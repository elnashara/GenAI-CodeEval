problem_number,index,category,problem_type,problem,solution_prompt,solution,test_input,expected,actual,status,pass,exception
21,1,easy,Checking if a number is prime,Implement an efficient algorithm to generate the nth prime number.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement an efficient algorithm to generate the nth prime number.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to generate the nth prime number
def funcImp(n):
    count = 0
    num = 2
    while count < n:
        if is_prime(num):
            count += 1
        num += 1
    return num - 1

# Test cases
test_cases = [1, 2, 5, 10, 20]

# Execute test cases
for i, test_case in enumerate(test_cases):
    result = funcImp(test_case)
    print(f""Test case {i+1}: {result}"")
```",1,2,2,PASS,TRUE,N/A
21,2,easy,Checking if a number is prime,Implement an efficient algorithm to generate the nth prime number.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement an efficient algorithm to generate the nth prime number.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to generate the nth prime number
def funcImp(n):
    count = 0
    num = 2
    while count < n:
        if is_prime(num):
            count += 1
        num += 1
    return num - 1

# Test cases
test_cases = [1, 2, 5, 10, 20]

# Execute test cases
for i, test_case in enumerate(test_cases):
    result = funcImp(test_case)
    print(f""Test case {i+1}: {result}"")
```",2,3,3,PASS,TRUE,N/A
21,3,easy,Checking if a number is prime,Implement an efficient algorithm to generate the nth prime number.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement an efficient algorithm to generate the nth prime number.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to generate the nth prime number
def funcImp(n):
    count = 0
    num = 2
    while count < n:
        if is_prime(num):
            count += 1
        num += 1
    return num - 1

# Test cases
test_cases = [1, 2, 5, 10, 20]

# Execute test cases
for i, test_case in enumerate(test_cases):
    result = funcImp(test_case)
    print(f""Test case {i+1}: {result}"")
```",3,11,11,PASS,TRUE,N/A
21,4,easy,Checking if a number is prime,Implement an efficient algorithm to generate the nth prime number.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement an efficient algorithm to generate the nth prime number.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to generate the nth prime number
def funcImp(n):
    count = 0
    num = 2
    while count < n:
        if is_prime(num):
            count += 1
        num += 1
    return num - 1

# Test cases
test_cases = [1, 2, 5, 10, 20]

# Execute test cases
for i, test_case in enumerate(test_cases):
    result = funcImp(test_case)
    print(f""Test case {i+1}: {result}"")
```",4,29,29,PASS,TRUE,N/A
21,5,easy,Checking if a number is prime,Implement an efficient algorithm to generate the nth prime number.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement an efficient algorithm to generate the nth prime number.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to generate the nth prime number
def funcImp(n):
    count = 0
    num = 2
    while count < n:
        if is_prime(num):
            count += 1
        num += 1
    return num - 1

# Test cases
test_cases = [1, 2, 5, 10, 20]

# Execute test cases
for i, test_case in enumerate(test_cases):
    result = funcImp(test_case)
    print(f""Test case {i+1}: {result}"")
```",5,71,71,PASS,TRUE,N/A
22,1,easy,Checking if a number is prime,Create a program that counts the total number of prime numbers less than or equal to a given input.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the total number of prime numbers less than or equal to a given input.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
def funcImp(n):
    """"""
    Function to count the total number of prime numbers less than or equal to a given input.

    Parameters:
    n (int): The given input.

    Returns:
    int: The total number of prime numbers less than or equal to the given input.
    """"""
    # Initialize a list to store the prime numbers
    primes = []

    # Iterate through all numbers from 2 to n
    for num in range(2, n+1):
        # Assume the number is prime
        is_prime = True

        # Check if the number is divisible by any number less than itself
        for i in range(2, num):
            if num % i == 0:
                # If the number is divisible, it is not prime
                is_prime = False
                break

        # If the number is prime, add it to the list
        if is_prime:
            primes.append(num)

    # Return the count of prime numbers
    return len(primes)
```",10,4,4,PASS,TRUE,N/A
22,2,easy,Checking if a number is prime,Create a program that counts the total number of prime numbers less than or equal to a given input.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the total number of prime numbers less than or equal to a given input.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
def funcImp(n):
    """"""
    Function to count the total number of prime numbers less than or equal to a given input.

    Parameters:
    n (int): The given input.

    Returns:
    int: The total number of prime numbers less than or equal to the given input.
    """"""
    # Initialize a list to store the prime numbers
    primes = []

    # Iterate through all numbers from 2 to n
    for num in range(2, n+1):
        # Assume the number is prime
        is_prime = True

        # Check if the number is divisible by any number less than itself
        for i in range(2, num):
            if num % i == 0:
                # If the number is divisible, it is not prime
                is_prime = False
                break

        # If the number is prime, add it to the list
        if is_prime:
            primes.append(num)

    # Return the count of prime numbers
    return len(primes)
```",20,8,8,PASS,TRUE,N/A
22,3,easy,Checking if a number is prime,Create a program that counts the total number of prime numbers less than or equal to a given input.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the total number of prime numbers less than or equal to a given input.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
def funcImp(n):
    """"""
    Function to count the total number of prime numbers less than or equal to a given input.

    Parameters:
    n (int): The given input.

    Returns:
    int: The total number of prime numbers less than or equal to the given input.
    """"""
    # Initialize a list to store the prime numbers
    primes = []

    # Iterate through all numbers from 2 to n
    for num in range(2, n+1):
        # Assume the number is prime
        is_prime = True

        # Check if the number is divisible by any number less than itself
        for i in range(2, num):
            if num % i == 0:
                # If the number is divisible, it is not prime
                is_prime = False
                break

        # If the number is prime, add it to the list
        if is_prime:
            primes.append(num)

    # Return the count of prime numbers
    return len(primes)
```",1,0,0,PASS,TRUE,N/A
22,4,easy,Checking if a number is prime,Create a program that counts the total number of prime numbers less than or equal to a given input.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the total number of prime numbers less than or equal to a given input.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.
","```python
def funcImp(n):
    """"""
    Function to count the total number of prime numbers less than or equal to a given input.

    Parameters:
    n (int): The given input.

    Returns:
    int: The total number of prime numbers less than or equal to the given input.
    """"""
    # Initialize a list to store the prime numbers
    primes = []

    # Iterate through all numbers from 2 to n
    for num in range(2, n+1):
        # Assume the number is prime
        is_prime = True

        # Check if the number is divisible by any number less than itself
        for i in range(2, num):
            if num % i == 0:
                # If the number is divisible, it is not prime
                is_prime = False
                break

        # If the number is prime, add it to the list
        if is_prime:
            primes.append(num)

    # Return the count of prime numbers
    return len(primes)
```",100,25,25,PASS,TRUE,N/A
23,1,easy,Checking if a number is prime,Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).,"## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to find the next twin prime pair after a given number
def funcImp(num):
    num = int(num)
    while True:
        num += 1
        if is_prime(num) and is_prime(num + 2):
            return (num, num + 2)

# Test cases
test_cases = [10, 20, 30, 40, 50]

# Execute test cases
for num in test_cases:
    result = funcImp(num)
    print(f""The next twin prime pair after {num} is {result}"")
```",10,"(11, 13)","(11, 13)",PASS,TRUE,N/A
23,2,easy,Checking if a number is prime,Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).,"## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to find the next twin prime pair after a given number
def funcImp(num):
    num = int(num)
    while True:
        num += 1
        if is_prime(num) and is_prime(num + 2):
            return (num, num + 2)

# Test cases
test_cases = [10, 20, 30, 40, 50]

# Execute test cases
for num in test_cases:
    result = funcImp(num)
    print(f""The next twin prime pair after {num} is {result}"")
```",20,"(21, 23)","(29, 31)",FAIL,FALSE,N/A
23,3,easy,Checking if a number is prime,Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).,"## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to find the next twin prime pair after a given number
def funcImp(num):
    num = int(num)
    while True:
        num += 1
        if is_prime(num) and is_prime(num + 2):
            return (num, num + 2)

# Test cases
test_cases = [10, 20, 30, 40, 50]

# Execute test cases
for num in test_cases:
    result = funcImp(num)
    print(f""The next twin prime pair after {num} is {result}"")
```",30,"(31, 33)","(41, 43)",FAIL,FALSE,N/A
23,4,easy,Checking if a number is prime,Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).,"## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to find the next twin prime pair after a given number
def funcImp(num):
    num = int(num)
    while True:
        num += 1
        if is_prime(num) and is_prime(num + 2):
            return (num, num + 2)

# Test cases
test_cases = [10, 20, 30, 40, 50]

# Execute test cases
for num in test_cases:
    result = funcImp(num)
    print(f""The next twin prime pair after {num} is {result}"")
```",40,"(41, 43)","(41, 43)",PASS,TRUE,N/A
23,5,easy,Checking if a number is prime,Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).,"## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to find the next twin prime pair after a given number (two primes with only one even number between them).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a number is prime
def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Function to find the next twin prime pair after a given number
def funcImp(num):
    num = int(num)
    while True:
        num += 1
        if is_prime(num) and is_prime(num + 2):
            return (num, num + 2)

# Test cases
test_cases = [10, 20, 30, 40, 50]

# Execute test cases
for num in test_cases:
    result = funcImp(num)
    print(f""The next twin prime pair after {num} is {result}"")
```",50,"(51, 53)","(59, 61)",FAIL,FALSE,N/A
24,1,easy,Checking if a number is prime,Write code to determine if two given numbers are coprime (their greatest common divisor is 1).,"## Problem Statement
- Develop a Python script to solve the problem: 'Write code to determine if two given numbers are coprime (their greatest common divisor is 1).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(num1, num2):
    # Check if either of the numbers is 1
    if num1 == 1 or num2 == 1:
        return True
    
    # Find the smaller number
    smaller = min(num1, num2)
    
    # Check if any number from 2 to the smaller number divides both numbers
    for i in range(2, smaller+1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    
    # If no common divisor is found, the numbers are coprime
    return True

# Test the function with some test cases
print(funcImp(5, 7))  # True
print(funcImp(12, 18))  # False
print(funcImp(8, 9))  # True
print(funcImp(1, 5))  # True
print(funcImp(0, 7))  # True
```","(5, 7)",TRUE,TRUE,PASS,TRUE,N/A
24,2,easy,Checking if a number is prime,Write code to determine if two given numbers are coprime (their greatest common divisor is 1).,"## Problem Statement
- Develop a Python script to solve the problem: 'Write code to determine if two given numbers are coprime (their greatest common divisor is 1).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(num1, num2):
    # Check if either of the numbers is 1
    if num1 == 1 or num2 == 1:
        return True
    
    # Find the smaller number
    smaller = min(num1, num2)
    
    # Check if any number from 2 to the smaller number divides both numbers
    for i in range(2, smaller+1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    
    # If no common divisor is found, the numbers are coprime
    return True

# Test the function with some test cases
print(funcImp(5, 7))  # True
print(funcImp(12, 18))  # False
print(funcImp(8, 9))  # True
print(funcImp(1, 5))  # True
print(funcImp(0, 7))  # True
```","(12, 18)",FALSE,FALSE,PASS,TRUE,N/A
24,3,easy,Checking if a number is prime,Write code to determine if two given numbers are coprime (their greatest common divisor is 1).,"## Problem Statement
- Develop a Python script to solve the problem: 'Write code to determine if two given numbers are coprime (their greatest common divisor is 1).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(num1, num2):
    # Check if either of the numbers is 1
    if num1 == 1 or num2 == 1:
        return True
    
    # Find the smaller number
    smaller = min(num1, num2)
    
    # Check if any number from 2 to the smaller number divides both numbers
    for i in range(2, smaller+1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    
    # If no common divisor is found, the numbers are coprime
    return True

# Test the function with some test cases
print(funcImp(5, 7))  # True
print(funcImp(12, 18))  # False
print(funcImp(8, 9))  # True
print(funcImp(1, 5))  # True
print(funcImp(0, 7))  # True
```","(8, 9)",TRUE,TRUE,PASS,TRUE,N/A
24,4,easy,Checking if a number is prime,Write code to determine if two given numbers are coprime (their greatest common divisor is 1).,"## Problem Statement
- Develop a Python script to solve the problem: 'Write code to determine if two given numbers are coprime (their greatest common divisor is 1).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(num1, num2):
    # Check if either of the numbers is 1
    if num1 == 1 or num2 == 1:
        return True
    
    # Find the smaller number
    smaller = min(num1, num2)
    
    # Check if any number from 2 to the smaller number divides both numbers
    for i in range(2, smaller+1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    
    # If no common divisor is found, the numbers are coprime
    return True

# Test the function with some test cases
print(funcImp(5, 7))  # True
print(funcImp(12, 18))  # False
print(funcImp(8, 9))  # True
print(funcImp(1, 5))  # True
print(funcImp(0, 7))  # True
```","(1, 5)",TRUE,TRUE,PASS,TRUE,N/A
24,5,easy,Checking if a number is prime,Write code to determine if two given numbers are coprime (their greatest common divisor is 1).,"## Problem Statement
- Develop a Python script to solve the problem: 'Write code to determine if two given numbers are coprime (their greatest common divisor is 1).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(num1, num2):
    # Check if either of the numbers is 1
    if num1 == 1 or num2 == 1:
        return True
    
    # Find the smaller number
    smaller = min(num1, num2)
    
    # Check if any number from 2 to the smaller number divides both numbers
    for i in range(2, smaller+1):
        if num1 % i == 0 and num2 % i == 0:
            return False
    
    # If no common divisor is found, the numbers are coprime
    return True

# Test the function with some test cases
print(funcImp(5, 7))  # True
print(funcImp(12, 18))  # False
print(funcImp(8, 9))  # True
print(funcImp(1, 5))  # True
print(funcImp(0, 7))  # True
```","(0, 7)",TRUE,TRUE,PASS,TRUE,N/A
25,1,easy,Reversing a string,Write a program to reverse a given string without using any built-in functions.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to reverse a given string without using any built-in functions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(input_string):
    # Initialize an empty string to store the reversed string
    reversed_string = """"

    # Iterate through the input string in reverse order
    for i in range(len(input_string)-1, -1, -1):
        # Append each character to the reversed string
        reversed_string += input_string[i]

    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    ""Hello, World!"",
    ""12345"",
    ""!@#$%"",
    """",
    ""abcdefghijklmnopqrstuvwxyz""
]

for test_case in test_cases:
    print(f""Input: {test_case}"")
    print(f""Output: {funcImp(test_case)}"")
    print()
```","Hello, World!","!dlroW ,olleH","!dlroW ,olleH",PASS,TRUE,N/A
25,2,easy,Reversing a string,Write a program to reverse a given string without using any built-in functions.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to reverse a given string without using any built-in functions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(input_string):
    # Initialize an empty string to store the reversed string
    reversed_string = """"

    # Iterate through the input string in reverse order
    for i in range(len(input_string)-1, -1, -1):
        # Append each character to the reversed string
        reversed_string += input_string[i]

    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    ""Hello, World!"",
    ""12345"",
    ""!@#$%"",
    """",
    ""abcdefghijklmnopqrstuvwxyz""
]

for test_case in test_cases:
    print(f""Input: {test_case}"")
    print(f""Output: {funcImp(test_case)}"")
    print()
```",12345,54321,54321,PASS,TRUE,N/A
25,3,easy,Reversing a string,Write a program to reverse a given string without using any built-in functions.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to reverse a given string without using any built-in functions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(input_string):
    # Initialize an empty string to store the reversed string
    reversed_string = """"

    # Iterate through the input string in reverse order
    for i in range(len(input_string)-1, -1, -1):
        # Append each character to the reversed string
        reversed_string += input_string[i]

    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    ""Hello, World!"",
    ""12345"",
    ""!@#$%"",
    """",
    ""abcdefghijklmnopqrstuvwxyz""
]

for test_case in test_cases:
    print(f""Input: {test_case}"")
    print(f""Output: {funcImp(test_case)}"")
    print()
```",!@#$%,%$#@!,%$#@!,PASS,TRUE,N/A
25,4,easy,Reversing a string,Write a program to reverse a given string without using any built-in functions.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to reverse a given string without using any built-in functions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(input_string):
    # Initialize an empty string to store the reversed string
    reversed_string = """"

    # Iterate through the input string in reverse order
    for i in range(len(input_string)-1, -1, -1):
        # Append each character to the reversed string
        reversed_string += input_string[i]

    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    ""Hello, World!"",
    ""12345"",
    ""!@#$%"",
    """",
    ""abcdefghijklmnopqrstuvwxyz""
]

for test_case in test_cases:
    print(f""Input: {test_case}"")
    print(f""Output: {funcImp(test_case)}"")
    print()
```",,,,PASS,TRUE,N/A
25,5,easy,Reversing a string,Write a program to reverse a given string without using any built-in functions.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to reverse a given string without using any built-in functions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(input_string):
    # Initialize an empty string to store the reversed string
    reversed_string = """"

    # Iterate through the input string in reverse order
    for i in range(len(input_string)-1, -1, -1):
        # Append each character to the reversed string
        reversed_string += input_string[i]

    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    ""Hello, World!"",
    ""12345"",
    ""!@#$%"",
    """",
    ""abcdefghijklmnopqrstuvwxyz""
]

for test_case in test_cases:
    print(f""Input: {test_case}"")
    print(f""Output: {funcImp(test_case)}"")
    print()
```",abcdefghijklmnopqrstuvwxyz,zyxwvutsrqponmlkjihgfedcba,zyxwvutsrqponmlkjihgfedcba,PASS,TRUE,N/A
26,1,easy,Reversing a string,Implement a function that takes a string as input and returns the reversed string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that takes a string as input and returns the reversed string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse a string
def funcImp(input_string):
    # Check if the input string is empty
    if len(input_string) == 0:
        return input_string
    
    # Use slicing to reverse the string
    reversed_string = input_string[::-1]
    
    return reversed_string

# Test cases
test_cases = [
    # Test case 1: Alphabetic string
    (""hello"", ""olleh""),
    
    # Test case 2: Numeric string
    (""12345"", ""54321""),
    
    # Test case 3: Special characters string
    (""!@#$%"", ""%$#@!""),
    
    # Test case 4: Empty string
    ("""", """"),
    
    # Test case 5: String with spaces
    (""hello world"", ""dlrow olleh"")
]

# Execute test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> {result}"")
    assert result == expected_output, ""Test case failed""
    
print(""All test cases passed!"")
```",hello,olleh,olleh,PASS,TRUE,N/A
26,2,easy,Reversing a string,Implement a function that takes a string as input and returns the reversed string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that takes a string as input and returns the reversed string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse a string
def funcImp(input_string):
    # Check if the input string is empty
    if len(input_string) == 0:
        return input_string
    
    # Use slicing to reverse the string
    reversed_string = input_string[::-1]
    
    return reversed_string

# Test cases
test_cases = [
    # Test case 1: Alphabetic string
    (""hello"", ""olleh""),
    
    # Test case 2: Numeric string
    (""12345"", ""54321""),
    
    # Test case 3: Special characters string
    (""!@#$%"", ""%$#@!""),
    
    # Test case 4: Empty string
    ("""", """"),
    
    # Test case 5: String with spaces
    (""hello world"", ""dlrow olleh"")
]

# Execute test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> {result}"")
    assert result == expected_output, ""Test case failed""
    
print(""All test cases passed!"")
```",12345,54321,54321,PASS,TRUE,N/A
26,3,easy,Reversing a string,Implement a function that takes a string as input and returns the reversed string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that takes a string as input and returns the reversed string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse a string
def funcImp(input_string):
    # Check if the input string is empty
    if len(input_string) == 0:
        return input_string
    
    # Use slicing to reverse the string
    reversed_string = input_string[::-1]
    
    return reversed_string

# Test cases
test_cases = [
    # Test case 1: Alphabetic string
    (""hello"", ""olleh""),
    
    # Test case 2: Numeric string
    (""12345"", ""54321""),
    
    # Test case 3: Special characters string
    (""!@#$%"", ""%$#@!""),
    
    # Test case 4: Empty string
    ("""", """"),
    
    # Test case 5: String with spaces
    (""hello world"", ""dlrow olleh"")
]

# Execute test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> {result}"")
    assert result == expected_output, ""Test case failed""
    
print(""All test cases passed!"")
```",!@#$%,%$#@!,%$#@!,PASS,TRUE,N/A
26,4,easy,Reversing a string,Implement a function that takes a string as input and returns the reversed string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that takes a string as input and returns the reversed string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse a string
def funcImp(input_string):
    # Check if the input string is empty
    if len(input_string) == 0:
        return input_string
    
    # Use slicing to reverse the string
    reversed_string = input_string[::-1]
    
    return reversed_string

# Test cases
test_cases = [
    # Test case 1: Alphabetic string
    (""hello"", ""olleh""),
    
    # Test case 2: Numeric string
    (""12345"", ""54321""),
    
    # Test case 3: Special characters string
    (""!@#$%"", ""%$#@!""),
    
    # Test case 4: Empty string
    ("""", """"),
    
    # Test case 5: String with spaces
    (""hello world"", ""dlrow olleh"")
]

# Execute test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> {result}"")
    assert result == expected_output, ""Test case failed""
    
print(""All test cases passed!"")
```",,,,PASS,TRUE,N/A
26,5,easy,Reversing a string,Implement a function that takes a string as input and returns the reversed string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that takes a string as input and returns the reversed string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse a string
def funcImp(input_string):
    # Check if the input string is empty
    if len(input_string) == 0:
        return input_string
    
    # Use slicing to reverse the string
    reversed_string = input_string[::-1]
    
    return reversed_string

# Test cases
test_cases = [
    # Test case 1: Alphabetic string
    (""hello"", ""olleh""),
    
    # Test case 2: Numeric string
    (""12345"", ""54321""),
    
    # Test case 3: Special characters string
    (""!@#$%"", ""%$#@!""),
    
    # Test case 4: Empty string
    ("""", """"),
    
    # Test case 5: String with spaces
    (""hello world"", ""dlrow olleh"")
]

# Execute test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> {result}"")
    assert result == expected_output, ""Test case failed""
    
print(""All test cases passed!"")
```",hello world,dlrow olleh,dlrow olleh,PASS,TRUE,N/A
27,1,easy,Reversing a string,Create an algorithm to reverse the words in a sentence while keeping the word order intact.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to reverse the words in a sentence while keeping the word order intact.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the words in a sentence while keeping the word order intact
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Reverse the order of the words
    reversed_words = words[::-1]
    
    # Join the reversed words back into a sentence
    reversed_sentence = ' '.join(reversed_words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    (""Hello World"", ""World Hello""),
    (""This is a test"", ""test a is This""),
    (""12345"", ""12345""),
    (""!@#$%"", ""!@#$%""),
    ("""", """")
]

for sentence, expected_result in test_cases:
    result = funcImp(sentence)
    print(f""Input: {sentence}"")
    print(f""Expected Output: {expected_result}"")
    print(f""Actual Output: {result}"")
    print()",Hello World,World Hello,World Hello,PASS,TRUE,N/A
27,2,easy,Reversing a string,Create an algorithm to reverse the words in a sentence while keeping the word order intact.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to reverse the words in a sentence while keeping the word order intact.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the words in a sentence while keeping the word order intact
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Reverse the order of the words
    reversed_words = words[::-1]
    
    # Join the reversed words back into a sentence
    reversed_sentence = ' '.join(reversed_words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    (""Hello World"", ""World Hello""),
    (""This is a test"", ""test a is This""),
    (""12345"", ""12345""),
    (""!@#$%"", ""!@#$%""),
    ("""", """")
]

for sentence, expected_result in test_cases:
    result = funcImp(sentence)
    print(f""Input: {sentence}"")
    print(f""Expected Output: {expected_result}"")
    print(f""Actual Output: {result}"")
    print()",This is a test,test a is This,test a is This,PASS,TRUE,N/A
27,3,easy,Reversing a string,Create an algorithm to reverse the words in a sentence while keeping the word order intact.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to reverse the words in a sentence while keeping the word order intact.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the words in a sentence while keeping the word order intact
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Reverse the order of the words
    reversed_words = words[::-1]
    
    # Join the reversed words back into a sentence
    reversed_sentence = ' '.join(reversed_words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    (""Hello World"", ""World Hello""),
    (""This is a test"", ""test a is This""),
    (""12345"", ""12345""),
    (""!@#$%"", ""!@#$%""),
    ("""", """")
]

for sentence, expected_result in test_cases:
    result = funcImp(sentence)
    print(f""Input: {sentence}"")
    print(f""Expected Output: {expected_result}"")
    print(f""Actual Output: {result}"")
    print()",12345,12345,12345,PASS,TRUE,N/A
27,4,easy,Reversing a string,Create an algorithm to reverse the words in a sentence while keeping the word order intact.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to reverse the words in a sentence while keeping the word order intact.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the words in a sentence while keeping the word order intact
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Reverse the order of the words
    reversed_words = words[::-1]
    
    # Join the reversed words back into a sentence
    reversed_sentence = ' '.join(reversed_words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    (""Hello World"", ""World Hello""),
    (""This is a test"", ""test a is This""),
    (""12345"", ""12345""),
    (""!@#$%"", ""!@#$%""),
    ("""", """")
]

for sentence, expected_result in test_cases:
    result = funcImp(sentence)
    print(f""Input: {sentence}"")
    print(f""Expected Output: {expected_result}"")
    print(f""Actual Output: {result}"")
    print()",!@#$%,!@#$%,!@#$%,PASS,TRUE,N/A
27,5,easy,Reversing a string,Create an algorithm to reverse the words in a sentence while keeping the word order intact.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to reverse the words in a sentence while keeping the word order intact.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the words in a sentence while keeping the word order intact
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Reverse the order of the words
    reversed_words = words[::-1]
    
    # Join the reversed words back into a sentence
    reversed_sentence = ' '.join(reversed_words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    (""Hello World"", ""World Hello""),
    (""This is a test"", ""test a is This""),
    (""12345"", ""12345""),
    (""!@#$%"", ""!@#$%""),
    ("""", """")
]

for sentence, expected_result in test_cases:
    result = funcImp(sentence)
    print(f""Input: {sentence}"")
    print(f""Expected Output: {expected_result}"")
    print(f""Actual Output: {result}"")
    print()",,,,PASS,TRUE,N/A
28,1,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 1: level,TRUE,TRUE,PASS,TRUE,N/A
28,2,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 2: racecar,TRUE,TRUE,PASS,TRUE,N/A
28,3,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 3: deified,TRUE,TRUE,PASS,TRUE,N/A
28,4,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 4: Aibohphobia,TRUE,TRUE,PASS,TRUE,N/A
28,5,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 5: hello,FALSE,FALSE,PASS,TRUE,N/A
28,6,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 6: world,FALSE,FALSE,PASS,TRUE,N/A
28,7,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 7: python,FALSE,FALSE,PASS,TRUE,N/A
28,8,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 8: programming,FALSE,FALSE,PASS,TRUE,N/A
28,9,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 9: 12321,TRUE,TRUE,PASS,TRUE,N/A
28,10,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 10: 98789,TRUE,TRUE,PASS,TRUE,N/A
28,11,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 11: 135797531,TRUE,TRUE,PASS,TRUE,N/A
28,12,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 12: 12345,FALSE,FALSE,PASS,TRUE,N/A
28,13,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 13: 98765,FALSE,FALSE,PASS,TRUE,N/A
28,14,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 14: 24680,FALSE,FALSE,PASS,TRUE,N/A
28,15,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 15: !@#$%^&*()_+,FALSE,TRUE,FAIL,FALSE,N/A
28,16,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 16: !@#$%^&*()_+()&^%$#@!,TRUE,TRUE,PASS,TRUE,N/A
28,17,easy,Reversing a string,Design a program to check if a given string is a palindrome (reads the same forwards and backwards).,"## Problem Statement
- Develop a Python script to solve the problem: 'Design a program to check if a given string is a palindrome (reads the same forwards and backwards).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if a given string is a palindrome
def funcImp(s):
    # Remove all non-alphanumeric characters from the string
    s = ''.join(e for e in s if e.isalnum())
    
    # Convert the string to lowercase
    s = s.lower()
    
    # Check if the string is equal to its reverse
    return s == s[::-1]

# Test cases
test_cases = [
    # Alphabetic palindromes
    (""level"", True),
    (""racecar"", True),
    (""deified"", True),
    (""Aibohphobia"", True),
    
    # Alphabetic non-palindromes
    (""hello"", False),
    (""world"", False),
    (""python"", False),
    (""programming"", False),
    
    # Numeric palindromes
    (""12321"", True),
    (""98789"", True),
    (""135797531"", True),
    
    # Numeric non-palindromes
    (""12345"", False),
    (""98765"", False),
    (""24680"", False),
    
    # Special characters
    (""!@#$%^&*()_+"", False),
    (""!@#$%^&*()_+()&^%$#@!"", True),
    
    # Empty string
    ("""", True)
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    print(f""Test case {i+1}: {s} -> {result}"")
    assert result == expected, ""Test case failed""
    
print(""All test cases passed"")
```",Test case 17: ,TRUE,TRUE,PASS,TRUE,N/A
29,1,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",aeiou,uoiea,uoiea,PASS,TRUE,N/A
29,2,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",bcdfghjklmnpqrstvwxyz,bcdfghjklmnpqrstvwxyz,bcdfghjklmnpqrstvwxyz,PASS,TRUE,N/A
29,3,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",hello world,hollo werld,hollo werld,PASS,TRUE,N/A
29,4,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",AEIOU,UOIEA,UOIEA,PASS,TRUE,N/A
29,5,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",BCDFGHJKLMNPQRSTVWXYZ,BCDFGHJKLMNPQRSTVWXYZ,BCDFGHJKLMNPQRSTVWXYZ,PASS,TRUE,N/A
29,6,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",HeLLo WoRLd,HoLLo WeRLd,HoLLo WeRLd,PASS,TRUE,N/A
29,7,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",@#$%^&*,@#$%^&*,@#$%^&*,PASS,TRUE,N/A
29,8,easy,Reversing a string,"Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an algorithm to reverse only the vowels in a given string, while keeping consonants in their original positions.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse only the vowels in a given string
def funcImp(input_string):
    # Convert the input string to a list of characters
    char_list = list(input_string)
    
    # Initialize two pointers, one at the start and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Define a set of vowels
    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}
    
    # Loop until the pointers meet or cross each other
    while start < end:
        # If the character at the start pointer is a vowel
        if char_list[start] in vowels:
            # If the character at the end pointer is a vowel
            if char_list[end] in vowels:
                # Swap the vowels at the start and end positions
                char_list[start], char_list[end] = char_list[end], char_list[start]
                # Move the start pointer one step forward
                start += 1
            # Move the end pointer one step backward
            end -= 1
        # If the character at the start pointer is not a vowel, move the start pointer one step forward
        else:
            start += 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    # Return the reversed string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Test case with all vowels
    (""aeiou"", ""uoiea""),
    # Test case with all consonants
    (""bcdfghjklmnpqrstvwxyz"", ""bcdfghjklmnpqrstvwxyz""),
    # Test case with mixed vowels and consonants
    (""hello world"", ""hollo werld""),
    # Test case with uppercase vowels
    (""AEIOU"", ""UOIEA""),
    # Test case with uppercase consonants
    (""BCDFGHJKLMNPQRSTVWXYZ"", ""BCDFGHJKLMNPQRSTVWXYZ""),
    # Test case with mixed uppercase and lowercase vowels and consonants
    (""HeLLo WoRLd"", ""HoLLo WeRLd""),
    # Test case with special characters
    (""@#$%^&*"", ""@#$%^&*""),
    # Test case with empty string
    ("""", """")
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    if result == expected_output:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed"")
        print(f""Expected output: {expected_output}"")
        print(f""Actual output: {result}"")
    print()",,,,PASS,TRUE,N/A
30,1,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",Hello World,hELLO wORLD,hELLO wORLD,PASS,TRUE,N/A
30,2,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",Python,pYTHON,pYTHON,PASS,TRUE,N/A
30,3,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",abcDEF,ABCdef,ABCdef,PASS,TRUE,N/A
30,4,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",,,,PASS,TRUE,N/A
30,5,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",12345,12345,12345,PASS,TRUE,N/A
30,6,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",1a2b3c,1A2B3C,1A2B3C,PASS,TRUE,N/A
30,7,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",!@#$%^&*,!@#$%^&*,!@#$%^&*,PASS,TRUE,N/A
30,8,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```","Hello, World!","hELLO, wORLD!","hELLO, wORLD!",PASS,TRUE,N/A
30,9,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",Hello123,hELLO123,hELLO123,PASS,TRUE,N/A
30,10,easy,Reversing a string,"Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').","## Problem Statement
- Develop a Python script to solve the problem: 'Write code to reverse the case of each character in a given string (e.g., 'Hello World' becomes 'hELLO wORLD').'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse the case of each character in a given string
def funcImp(input_string):
    # Initialize an empty string to store the reversed case string
    reversed_string = """"
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is uppercase
        if char.isupper():
            # Convert the character to lowercase and append it to the reversed string
            reversed_string += char.lower()
        # Check if the character is lowercase
        elif char.islower():
            # Convert the character to uppercase and append it to the reversed string
            reversed_string += char.upper()
        # If the character is neither uppercase nor lowercase (e.g., special character or number)
        else:
            # Append the character as it is to the reversed string
            reversed_string += char
    
    # Return the reversed case string
    return reversed_string

# Test the function with different test cases
test_cases = [
    # Alphabetic strings
    (""Hello World"", ""hELLO wORLD""),
    (""Python"", ""pYTHON""),
    (""abcDEF"", ""ABCdef""),
    ("""", """"),
    
    # Numeric strings
    (""12345"", ""12345""),
    (""1a2b3c"", ""1A2B3C""),
    
    # Special characters
    (""!@#$%^&*"", ""!@#$%^&*""),
    (""Hello, World!"", ""hELLO, wORLD!""),
    
    # Mixed strings
    (""Hello123"", ""hELLO123""),
    (""!@#$Abc"", ""!@#$aBC""),
]

# Execute the test cases
for i, (input_string, expected_output) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}:"")
    print(f""Input: {input_string}"")
    print(f""Expected Output: {expected_output}"")
    print(f""Actual Output: {result}"")
    print("""")

```",!@#$Abc,!@#$aBC,!@#$aBC,PASS,TRUE,N/A
31,1,easy,Reversing a string,"Implement a function that reverses every other word in a sentence, starting from the second word.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that reverses every other word in a sentence, starting from the second word.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse every other word in a sentence
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over the words and reverse every other word
    for i in range(1, len(words), 2):
        words[i] = words[i][::-1]
    
    # Join the words back into a sentence
    reversed_sentence = ' '.join(words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    ""Hello World"",
    ""This is a test"",
    ""12345 67890"",
    ""!@#$ %^&*"",
    """",
    ""SingleWord""
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",Hello World,Hello dlroW,Hello dlroW,PASS,TRUE,N/A
31,2,easy,Reversing a string,"Implement a function that reverses every other word in a sentence, starting from the second word.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that reverses every other word in a sentence, starting from the second word.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse every other word in a sentence
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over the words and reverse every other word
    for i in range(1, len(words), 2):
        words[i] = words[i][::-1]
    
    # Join the words back into a sentence
    reversed_sentence = ' '.join(words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    ""Hello World"",
    ""This is a test"",
    ""12345 67890"",
    ""!@#$ %^&*"",
    """",
    ""SingleWord""
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",This is a test,This si a tset,This si a tset,PASS,TRUE,N/A
31,3,easy,Reversing a string,"Implement a function that reverses every other word in a sentence, starting from the second word.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that reverses every other word in a sentence, starting from the second word.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse every other word in a sentence
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over the words and reverse every other word
    for i in range(1, len(words), 2):
        words[i] = words[i][::-1]
    
    # Join the words back into a sentence
    reversed_sentence = ' '.join(words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    ""Hello World"",
    ""This is a test"",
    ""12345 67890"",
    ""!@#$ %^&*"",
    """",
    ""SingleWord""
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",12345 67890,12345 09876,12345 09876,PASS,TRUE,N/A
31,4,easy,Reversing a string,"Implement a function that reverses every other word in a sentence, starting from the second word.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that reverses every other word in a sentence, starting from the second word.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse every other word in a sentence
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over the words and reverse every other word
    for i in range(1, len(words), 2):
        words[i] = words[i][::-1]
    
    # Join the words back into a sentence
    reversed_sentence = ' '.join(words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    ""Hello World"",
    ""This is a test"",
    ""12345 67890"",
    ""!@#$ %^&*"",
    """",
    ""SingleWord""
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",!@#$ %^&*,!@#$ *&^%,!@#$ *&^%,PASS,TRUE,N/A
31,5,easy,Reversing a string,"Implement a function that reverses every other word in a sentence, starting from the second word.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that reverses every other word in a sentence, starting from the second word.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse every other word in a sentence
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over the words and reverse every other word
    for i in range(1, len(words), 2):
        words[i] = words[i][::-1]
    
    # Join the words back into a sentence
    reversed_sentence = ' '.join(words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    ""Hello World"",
    ""This is a test"",
    ""12345 67890"",
    ""!@#$ %^&*"",
    """",
    ""SingleWord""
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",,,,PASS,TRUE,N/A
31,6,easy,Reversing a string,"Implement a function that reverses every other word in a sentence, starting from the second word.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that reverses every other word in a sentence, starting from the second word.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse every other word in a sentence
def funcImp(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over the words and reverse every other word
    for i in range(1, len(words), 2):
        words[i] = words[i][::-1]
    
    # Join the words back into a sentence
    reversed_sentence = ' '.join(words)
    
    # Return the reversed sentence
    return reversed_sentence

# Test the function with different test cases
test_cases = [
    ""Hello World"",
    ""This is a test"",
    ""12345 67890"",
    ""!@#$ %^&*"",
    """",
    ""SingleWord""
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",SingleWord,SingleWord,SingleWord,PASS,TRUE,N/A
32,1,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abcd),dcba,dcba,PASS,TRUE,N/A
32,2,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",abc(def)),fedcba,defcba,FAIL,FALSE,N/A
32,3,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi),ihgfedcba,ihgdefcba,FAIL,FALSE,N/A
32,4,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi(jkl)),ihgjklfedcba,jklihgdefcba,FAIL,FALSE,N/A
32,5,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi(jkl)mno),onmlkjihgjklfedcba,onmjklihgdefcba,FAIL,FALSE,N/A
32,6,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi(jkl)mno)pqr,rqpomnolkjihgjklfedcba,onmjklihgdefcbapqr,FAIL,FALSE,N/A
32,7,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi(jkl)mno)pqr(stu),utsrqpomnolkjihgjklfedcba,onmjklihgdefcbapqruts,FAIL,FALSE,N/A
32,8,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi(jkl)mno)pqr(stu)vwxyz,zyxwvutsrqpomnolkjihgjklfedcba,onmjklihgdefcbapqrutsvwxyz,FAIL,FALSE,N/A
32,9,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",,,,PASS,TRUE,N/A
32,10,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",abcd,abcd,abcd,PASS,TRUE,N/A
32,11,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abcd,(abcd,(abcd,PASS,TRUE,N/A
32,12,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",abcd),abcd),dcba,FAIL,FALSE,N/A
32,13,easy,Reversing a string,"Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.","## Problem Statement
- Develop a Python script to solve the problem: 'Design an algorithm that reverses only the characters within parentheses in a given string, while leaving other characters unchanged.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> str:
    stack = []
    for char in s:
        if char == ')':
            temp = ''
            while stack and stack[-1] != '(':
                temp += stack.pop()
            if stack:
                stack.pop()  # remove '('
            stack.extend(temp)
        else:
            stack.append(char)
    return ''.join(stack)


# Test Cases
test_cases = [
    (""(abcd)"", ""dcba""),
    (""(abc(def))"", ""fedcba""),
    (""(abc(def)ghi)"", ""ihgfedcba""),
    (""(abc(def)ghi(jkl))"", ""ihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)"", ""onmlkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr"", ""rqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)"", ""utsrqpomnolkjihgjklfedcba""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz"", ""zyxwvutsrqpomnolkjihgjklfedcba""),
    ("""", """"),
    (""abcd"", ""abcd""),
    (""(abcd"", ""(abcd""),
    (""abcd)"", ""abcd)""),
    (""(abc(def)ghi(jkl)mno)pqr(stu)vwxyz)"", ""zyxwvutsrqpomnolkjihgjklfedcba)"")
]

# Execute Test Cases
for i, (input_str, expected_output) in enumerate(test_cases):
    output = funcImp(input_str)
    assert output == expected_output, f""Test case {i+1} failed: expected '{expected_output}', got '{output}'""

print(""All test cases passed!"")
```",(abc(def)ghi(jkl)mno)pqr(stu)vwxyz),zyxwvutsrqpomnolkjihgjklfedcba),zyxwvsturqpabcfedghilkjmno,FAIL,FALSE,N/A
33,1,easy,Reversing a string,"Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.","## Problem Statement
- Develop a Python script to solve the problem: 'Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(sentence):
    """"""
    Reverses each individual word in a sentence while preserving whitespace and punctuation.
    
    Args:
        sentence (str): The input sentence.
        
    Returns:
        str: The sentence with each word reversed.
    """"""
    words = sentence.split()  # Split the sentence into individual words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words back into a sentence
    
    return reversed_sentence


# Test cases
test_cases = [
    (""Hello, world!"", ""olleH, dlrow!""),
    (""This is a test."", ""sihT si a tset.""),
    (""12345"", ""54321""),
    ("""", """"),
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    (""Python is awesome!"", ""nohtyP si !emosewa""),
]

# Execute test cases
for i, (sentence, expected_result) in enumerate(test_cases):
    result = funcImp(sentence)
    assert result == expected_result, f""Test case {i+1} failed: expected '{expected_result}', got '{result}'""

print(""All test cases passed!"")
```","Hello, world!","olleH, dlrow!",olleH !dlrow,FAIL,FALSE,N/A
33,2,easy,Reversing a string,"Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.","## Problem Statement
- Develop a Python script to solve the problem: 'Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(sentence):
    """"""
    Reverses each individual word in a sentence while preserving whitespace and punctuation.
    
    Args:
        sentence (str): The input sentence.
        
    Returns:
        str: The sentence with each word reversed.
    """"""
    words = sentence.split()  # Split the sentence into individual words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words back into a sentence
    
    return reversed_sentence


# Test cases
test_cases = [
    (""Hello, world!"", ""olleH, dlrow!""),
    (""This is a test."", ""sihT si a tset.""),
    (""12345"", ""54321""),
    ("""", """"),
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    (""Python is awesome!"", ""nohtyP si !emosewa""),
]

# Execute test cases
for i, (sentence, expected_result) in enumerate(test_cases):
    result = funcImp(sentence)
    assert result == expected_result, f""Test case {i+1} failed: expected '{expected_result}', got '{result}'""

print(""All test cases passed!"")
```",This is a test.,sihT si a tset.,sihT si a .tset,FAIL,FALSE,N/A
33,3,easy,Reversing a string,"Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.","## Problem Statement
- Develop a Python script to solve the problem: 'Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(sentence):
    """"""
    Reverses each individual word in a sentence while preserving whitespace and punctuation.
    
    Args:
        sentence (str): The input sentence.
        
    Returns:
        str: The sentence with each word reversed.
    """"""
    words = sentence.split()  # Split the sentence into individual words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words back into a sentence
    
    return reversed_sentence


# Test cases
test_cases = [
    (""Hello, world!"", ""olleH, dlrow!""),
    (""This is a test."", ""sihT si a tset.""),
    (""12345"", ""54321""),
    ("""", """"),
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    (""Python is awesome!"", ""nohtyP si !emosewa""),
]

# Execute test cases
for i, (sentence, expected_result) in enumerate(test_cases):
    result = funcImp(sentence)
    assert result == expected_result, f""Test case {i+1} failed: expected '{expected_result}', got '{result}'""

print(""All test cases passed!"")
```",12345,54321,54321,PASS,TRUE,N/A
33,4,easy,Reversing a string,"Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.","## Problem Statement
- Develop a Python script to solve the problem: 'Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(sentence):
    """"""
    Reverses each individual word in a sentence while preserving whitespace and punctuation.
    
    Args:
        sentence (str): The input sentence.
        
    Returns:
        str: The sentence with each word reversed.
    """"""
    words = sentence.split()  # Split the sentence into individual words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words back into a sentence
    
    return reversed_sentence


# Test cases
test_cases = [
    (""Hello, world!"", ""olleH, dlrow!""),
    (""This is a test."", ""sihT si a tset.""),
    (""12345"", ""54321""),
    ("""", """"),
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    (""Python is awesome!"", ""nohtyP si !emosewa""),
]

# Execute test cases
for i, (sentence, expected_result) in enumerate(test_cases):
    result = funcImp(sentence)
    assert result == expected_result, f""Test case {i+1} failed: expected '{expected_result}', got '{result}'""

print(""All test cases passed!"")
```",,,,PASS,TRUE,N/A
33,5,easy,Reversing a string,"Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.","## Problem Statement
- Develop a Python script to solve the problem: 'Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(sentence):
    """"""
    Reverses each individual word in a sentence while preserving whitespace and punctuation.
    
    Args:
        sentence (str): The input sentence.
        
    Returns:
        str: The sentence with each word reversed.
    """"""
    words = sentence.split()  # Split the sentence into individual words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words back into a sentence
    
    return reversed_sentence


# Test cases
test_cases = [
    (""Hello, world!"", ""olleH, dlrow!""),
    (""This is a test."", ""sihT si a tset.""),
    (""12345"", ""54321""),
    ("""", """"),
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    (""Python is awesome!"", ""nohtyP si !emosewa""),
]

# Execute test cases
for i, (sentence, expected_result) in enumerate(test_cases):
    result = funcImp(sentence)
    assert result == expected_result, f""Test case {i+1} failed: expected '{expected_result}', got '{result}'""

print(""All test cases passed!"")
```",!@#$%^&*(),)(*&^%$#@!,)(*&^%$#@!,PASS,TRUE,N/A
33,6,easy,Reversing a string,"Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.","## Problem Statement
- Develop a Python script to solve the problem: 'Create code to reverse each individual word in a sentence, while preserving whitespace and punctuation.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(sentence):
    """"""
    Reverses each individual word in a sentence while preserving whitespace and punctuation.
    
    Args:
        sentence (str): The input sentence.
        
    Returns:
        str: The sentence with each word reversed.
    """"""
    words = sentence.split()  # Split the sentence into individual words
    reversed_words = [word[::-1] for word in words]  # Reverse each word
    reversed_sentence = ' '.join(reversed_words)  # Join the reversed words back into a sentence
    
    return reversed_sentence


# Test cases
test_cases = [
    (""Hello, world!"", ""olleH, dlrow!""),
    (""This is a test."", ""sihT si a tset.""),
    (""12345"", ""54321""),
    ("""", """"),
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    (""Python is awesome!"", ""nohtyP si !emosewa""),
]

# Execute test cases
for i, (sentence, expected_result) in enumerate(test_cases):
    result = funcImp(sentence)
    assert result == expected_result, f""Test case {i+1} failed: expected '{expected_result}', got '{result}'""

print(""All test cases passed!"")
```",Python is awesome!,nohtyP si !emosewa,nohtyP si !emosewa,PASS,TRUE,N/A
34,1,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",,,,PASS,TRUE,N/A
34,2,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",a,a,a,PASS,TRUE,N/A
34,3,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",abcdefghijklmnopqrstuvwxyz,zyxwvutsrqponmlkjihgfedcba,zyxwvutsrqponmlkjihgfedcba,PASS,TRUE,N/A
34,4,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",123456789,9876543210,9876543210,PASS,TRUE,N/A
34,5,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",!@#$%^&*(),)(*&^%$#@!,)(*&^%$#@!,PASS,TRUE,N/A
34,6,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",hello world,dlrow olleh,dlrow olleh,PASS,TRUE,N/A
34,7,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",aaaaaaa,aaaaaaa,aaaaaaa,PASS,TRUE,N/A
34,8,easy,Reversing a string,"Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.","## Problem Statement
- Develop a Python script to solve the problem: 'Develop an efficient algorithm to reverse large strings (e.g., strings with millions of characters) without causing memory or performance issues.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to reverse large strings without causing memory or performance issues
def funcImp(string):
    # Check if the string is empty
    if len(string) == 0:
        return string
    
    # Convert the string to a list of characters
    char_list = list(string)
    
    # Initialize two pointers, one at the beginning and one at the end of the list
    start = 0
    end = len(char_list) - 1
    
    # Swap characters at the start and end positions until the pointers meet in the middle
    while start < end:
        char_list[start], char_list[end] = char_list[end], char_list[start]
        start += 1
        end -= 1
    
    # Convert the list of characters back to a string
    reversed_string = ''.join(char_list)
    
    return reversed_string

# Test cases
test_cases = [
    # Empty string
    ("""", """"),
    # String with one character
    (""a"", ""a""),
    # String with all alphabetic characters
    (""abcdefghijklmnopqrstuvwxyz"", ""zyxwvutsrqponmlkjihgfedcba""),
    # String with all numeric characters
    (""0123456789"", ""9876543210""),
    # String with special characters
    (""!@#$%^&*()"", "")(*&^%$#@!""),
    # String with spaces
    (""hello world"", ""dlrow olleh""),
    # String with repeated characters
    (""aaaaaaa"", ""aaaaaaa""),
    # String with mixed characters
    (""AbCdEfG"", ""GfEdCbA"")
]

# Execute test cases
for i, (string, expected) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}:"")
    print(f""Input: {string}"")
    print(f""Expected output: {expected}"")
    print(f""Actual output: {result}"")
    print()
```",AbCdEfG,GfEdCbA,GfEdCbA,PASS,TRUE,N/A
35,1,easy,Counting the occurrence of a character in a string,Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of occurrences of a character in a string
def funcImp(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: character 'a' occurs 3 times in the string 'banana'
    (""banana"", ""a"", 3),
    # Test case 2: character 'o' occurs 2 times in the string 'hello'
    (""hello"", ""o"", 2),
    # Test case 3: character '1' occurs 1 time in the string '12345'
    (""12345"", ""1"", 1),
    # Test case 4: character ' ' occurs 0 times in the string 'hello'
    (""hello"", "" "", 0),
    # Test case 5: character '!' occurs 4 times in the string 'hello!hello!hello!hello!'
    (""hello!hello!hello!hello!"", ""!"", 4),
    # Test case 6: character 'a' occurs 0 times in the empty string ''
    ("""", ""a"", 0),
]

# Execute test cases
for i, (string, char, expected) in enumerate(test_cases):
    result = funcImp(string, char)
    print(f""Test case {i+1}: {result == expected}"")
    print(f""Input: string='{string}', char='{char}'"")
    print(f""Expected: {expected}, Result: {result}"")
    print()
```","string='banana', char='a'",3,3,PASS,TRUE,N/A
35,2,easy,Counting the occurrence of a character in a string,Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of occurrences of a character in a string
def funcImp(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: character 'a' occurs 3 times in the string 'banana'
    (""banana"", ""a"", 3),
    # Test case 2: character 'o' occurs 2 times in the string 'hello'
    (""hello"", ""o"", 2),
    # Test case 3: character '1' occurs 1 time in the string '12345'
    (""12345"", ""1"", 1),
    # Test case 4: character ' ' occurs 0 times in the string 'hello'
    (""hello"", "" "", 0),
    # Test case 5: character '!' occurs 4 times in the string 'hello!hello!hello!hello!'
    (""hello!hello!hello!hello!"", ""!"", 4),
    # Test case 6: character 'a' occurs 0 times in the empty string ''
    ("""", ""a"", 0),
]

# Execute test cases
for i, (string, char, expected) in enumerate(test_cases):
    result = funcImp(string, char)
    print(f""Test case {i+1}: {result == expected}"")
    print(f""Input: string='{string}', char='{char}'"")
    print(f""Expected: {expected}, Result: {result}"")
    print()
```","string='hello', char='o'",1,1,PASS,TRUE,N/A
35,3,easy,Counting the occurrence of a character in a string,Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of occurrences of a character in a string
def funcImp(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: character 'a' occurs 3 times in the string 'banana'
    (""banana"", ""a"", 3),
    # Test case 2: character 'o' occurs 2 times in the string 'hello'
    (""hello"", ""o"", 2),
    # Test case 3: character '1' occurs 1 time in the string '12345'
    (""12345"", ""1"", 1),
    # Test case 4: character ' ' occurs 0 times in the string 'hello'
    (""hello"", "" "", 0),
    # Test case 5: character '!' occurs 4 times in the string 'hello!hello!hello!hello!'
    (""hello!hello!hello!hello!"", ""!"", 4),
    # Test case 6: character 'a' occurs 0 times in the empty string ''
    ("""", ""a"", 0),
]

# Execute test cases
for i, (string, char, expected) in enumerate(test_cases):
    result = funcImp(string, char)
    print(f""Test case {i+1}: {result == expected}"")
    print(f""Input: string='{string}', char='{char}'"")
    print(f""Expected: {expected}, Result: {result}"")
    print()
```","string='12345', char='1'",1,1,PASS,TRUE,N/A
35,4,easy,Counting the occurrence of a character in a string,Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of occurrences of a character in a string
def funcImp(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: character 'a' occurs 3 times in the string 'banana'
    (""banana"", ""a"", 3),
    # Test case 2: character 'o' occurs 2 times in the string 'hello'
    (""hello"", ""o"", 2),
    # Test case 3: character '1' occurs 1 time in the string '12345'
    (""12345"", ""1"", 1),
    # Test case 4: character ' ' occurs 0 times in the string 'hello'
    (""hello"", "" "", 0),
    # Test case 5: character '!' occurs 4 times in the string 'hello!hello!hello!hello!'
    (""hello!hello!hello!hello!"", ""!"", 4),
    # Test case 6: character 'a' occurs 0 times in the empty string ''
    ("""", ""a"", 0),
]

# Execute test cases
for i, (string, char, expected) in enumerate(test_cases):
    result = funcImp(string, char)
    print(f""Test case {i+1}: {result == expected}"")
    print(f""Input: string='{string}', char='{char}'"")
    print(f""Expected: {expected}, Result: {result}"")
    print()
```","string='hello', char=' '",0,0,PASS,TRUE,N/A
35,5,easy,Counting the occurrence of a character in a string,Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of occurrences of a character in a string
def funcImp(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: character 'a' occurs 3 times in the string 'banana'
    (""banana"", ""a"", 3),
    # Test case 2: character 'o' occurs 2 times in the string 'hello'
    (""hello"", ""o"", 2),
    # Test case 3: character '1' occurs 1 time in the string '12345'
    (""12345"", ""1"", 1),
    # Test case 4: character ' ' occurs 0 times in the string 'hello'
    (""hello"", "" "", 0),
    # Test case 5: character '!' occurs 4 times in the string 'hello!hello!hello!hello!'
    (""hello!hello!hello!hello!"", ""!"", 4),
    # Test case 6: character 'a' occurs 0 times in the empty string ''
    ("""", ""a"", 0),
]

# Execute test cases
for i, (string, char, expected) in enumerate(test_cases):
    result = funcImp(string, char)
    print(f""Test case {i+1}: {result == expected}"")
    print(f""Input: string='{string}', char='{char}'"")
    print(f""Expected: {expected}, Result: {result}"")
    print()
```","string='hello!hello!hello!hello!', char='!'",4,4,PASS,TRUE,N/A
35,6,easy,Counting the occurrence of a character in a string,Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a function that takes a string and a character as input and returns the number of occurrences of that character in the string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of occurrences of a character in a string
def funcImp(string, char):
    count = 0
    for c in string:
        if c == char:
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: character 'a' occurs 3 times in the string 'banana'
    (""banana"", ""a"", 3),
    # Test case 2: character 'o' occurs 2 times in the string 'hello'
    (""hello"", ""o"", 2),
    # Test case 3: character '1' occurs 1 time in the string '12345'
    (""12345"", ""1"", 1),
    # Test case 4: character ' ' occurs 0 times in the string 'hello'
    (""hello"", "" "", 0),
    # Test case 5: character '!' occurs 4 times in the string 'hello!hello!hello!hello!'
    (""hello!hello!hello!hello!"", ""!"", 4),
    # Test case 6: character 'a' occurs 0 times in the empty string ''
    ("""", ""a"", 0),
]

# Execute test cases
for i, (string, char, expected) in enumerate(test_cases):
    result = funcImp(string, char)
    print(f""Test case {i+1}: {result == expected}"")
    print(f""Input: string='{string}', char='{char}'"")
    print(f""Expected: {expected}, Result: {result}"")
    print()
```","string='', char='a'",0,0,PASS,TRUE,N/A
36,1,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",a,1,1,PASS,TRUE,N/A
36,2,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",abc,1,1,PASS,TRUE,N/A
36,3,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",aabbbccc,3,3,PASS,TRUE,N/A
36,4,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",aabbcc,2,2,PASS,TRUE,N/A
36,5,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",1.23E+14,5,5,PASS,TRUE,N/A
36,6,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",!@#$%^&*()_+,1,1,PASS,TRUE,N/A
36,7,easy,Counting the occurrence of a character in a string,"Given a string, find the most frequent character(s) and their count(s).","## Problem Statement
- Develop a Python script to solve the problem: 'Given a string, find the most frequent character(s) and their count(s).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to find the most frequent character(s) and their count(s)
def funcImp(input_string):
    # Create a dictionary to store the count of each character
    char_count = {}
    
    # Iterate through each character in the input string
    for char in input_string:
        # If the character is already in the dictionary, increment its count
        if char in char_count:
            char_count[char] += 1
        # If the character is not in the dictionary, add it with a count of 1
        else:
            char_count[char] = 1
    
    # Find the maximum count of any character in the input string
    max_count = max(char_count.values())
    
    # Create a list to store the most frequent character(s)
    most_frequent_chars = []
    
    # Iterate through each character and its count in the dictionary
    for char, count in char_count.items():
        # If the count is equal to the maximum count, add the character to the list
        if count == max_count:
            most_frequent_chars.append(char)
    
    # Return the most frequent character(s) and their count(s)
    return most_frequent_chars, max_count

# Test the function with different test cases
test_cases = [
    """",  # Empty string
    ""a"",  # Single character string
    ""abc"",  # String with all unique characters
    ""aabbbccc"",  # String with repeated characters
    ""aabbcc"",  # String with repeated characters but different counts
    ""123333444455555"",  # String with numeric characters
    ""!@#$%^&*()_+"",  # String with special characters
    ""aAaAaA"",  # String with both lowercase and uppercase characters
]

for test_case in test_cases:
    result = funcImp(test_case)
    print(f""Input: {test_case}"")
    print(f""Output: {result}"")
    print()",aAaAaA,3,3,PASS,TRUE,N/A
37,1,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",hll wrld,0,0,PASS,TRUE,N/A
37,2,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",aeiou,5,5,PASS,TRUE,N/A
37,3,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",hello world,3,3,PASS,TRUE,N/A
37,4,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",,0,0,PASS,TRUE,N/A
37,5,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",@#$%^&,0,0,PASS,TRUE,N/A
37,6,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",12345,0,0,PASS,TRUE,N/A
37,7,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",AEIOU,5,5,PASS,TRUE,N/A
37,8,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",aEiOu,5,5,PASS,TRUE,N/A
37,9,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",aaaaaeeeeiiiiiooooouuuuu,25,24,FAIL,FALSE,N/A
37,10,easy,Counting the occurrence of a character in a string,Write a program to count the number of vowels in a given string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to count the number of vowels in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of vowels in a given string
def funcImp(string):
    # Initialize a counter variable to keep track of the number of vowels
    count = 0
    
    # Convert the string to lowercase to handle both uppercase and lowercase vowels
    string = string.lower()
    
    # Iterate through each character in the string
    for char in string:
        # Check if the character is a vowel
        if char in ['a', 'e', 'i', 'o', 'u']:
            # Increment the counter if the character is a vowel
            count += 1
    
    # Return the final count of vowels
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: string with no vowels
    (""hll wrld"", 0),
    # Test case 2: string with all vowels
    (""aeiou"", 5),
    # Test case 3: string with mixed vowels and consonants
    (""hello world"", 3),
    # Test case 4: empty string
    ("""", 0),
    # Test case 5: string with special characters
    (""@#$%^&"", 0),
    # Test case 6: string with numbers
    (""12345"", 0),
    # Test case 7: string with uppercase vowels
    (""AEIOU"", 5),
    # Test case 8: string with uppercase and lowercase vowels
    (""aEiOu"", 5),
    # Test case 9: string with only vowels
    (""aaaaaeeeeiiiiiooooouuuuu"", 25),
    # Test case 10: string with only consonants
    (""bcdfghjklmnpqrstvwxyz"", 0)
]

# Execute the test cases
for i, (string, expected_result) in enumerate(test_cases):
    result = funcImp(string)
    print(f""Test case {i+1}: {string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")",bcdfghjklmnpqrstvwxyz,0,0,PASS,TRUE,N/A
38,1,easy,Counting the occurrence of a character in a string,Implement a function that counts the number of uppercase letters in a string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that counts the number of uppercase letters in a string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of uppercase letters in a string
def funcImp(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: string with no uppercase letters
    (""hello world"", 0),
    
    # Test case 2: string with all uppercase letters
    (""HELLO WORLD"", 10),
    
    # Test case 3: string with mixed uppercase and lowercase letters
    (""HeLlO WoRlD"", 6),
    
    # Test case 4: string with numbers and special characters
    (""123!@#$%^&*"", 0),
    
    # Test case 5: empty string
    ("""", 0)
]

# Execute test cases
for i, (string, expected_count) in enumerate(test_cases):
    result = funcImp(string)
    if result == expected_count:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed. Expected {expected_count}, but got {result}"")
```",hello world,0,0,PASS,TRUE,N/A
38,2,easy,Counting the occurrence of a character in a string,Implement a function that counts the number of uppercase letters in a string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that counts the number of uppercase letters in a string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of uppercase letters in a string
def funcImp(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: string with no uppercase letters
    (""hello world"", 0),
    
    # Test case 2: string with all uppercase letters
    (""HELLO WORLD"", 10),
    
    # Test case 3: string with mixed uppercase and lowercase letters
    (""HeLlO WoRlD"", 6),
    
    # Test case 4: string with numbers and special characters
    (""123!@#$%^&*"", 0),
    
    # Test case 5: empty string
    ("""", 0)
]

# Execute test cases
for i, (string, expected_count) in enumerate(test_cases):
    result = funcImp(string)
    if result == expected_count:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed. Expected {expected_count}, but got {result}"")
```",HELLO WORLD,10,10,PASS,TRUE,N/A
38,3,easy,Counting the occurrence of a character in a string,Implement a function that counts the number of uppercase letters in a string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that counts the number of uppercase letters in a string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of uppercase letters in a string
def funcImp(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: string with no uppercase letters
    (""hello world"", 0),
    
    # Test case 2: string with all uppercase letters
    (""HELLO WORLD"", 10),
    
    # Test case 3: string with mixed uppercase and lowercase letters
    (""HeLlO WoRlD"", 6),
    
    # Test case 4: string with numbers and special characters
    (""123!@#$%^&*"", 0),
    
    # Test case 5: empty string
    ("""", 0)
]

# Execute test cases
for i, (string, expected_count) in enumerate(test_cases):
    result = funcImp(string)
    if result == expected_count:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed. Expected {expected_count}, but got {result}"")
```",HeLlO WoRlD,6,6,PASS,TRUE,N/A
38,4,easy,Counting the occurrence of a character in a string,Implement a function that counts the number of uppercase letters in a string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that counts the number of uppercase letters in a string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of uppercase letters in a string
def funcImp(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: string with no uppercase letters
    (""hello world"", 0),
    
    # Test case 2: string with all uppercase letters
    (""HELLO WORLD"", 10),
    
    # Test case 3: string with mixed uppercase and lowercase letters
    (""HeLlO WoRlD"", 6),
    
    # Test case 4: string with numbers and special characters
    (""123!@#$%^&*"", 0),
    
    # Test case 5: empty string
    ("""", 0)
]

# Execute test cases
for i, (string, expected_count) in enumerate(test_cases):
    result = funcImp(string)
    if result == expected_count:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed. Expected {expected_count}, but got {result}"")
```",123!@#$%^&*,0,0,PASS,TRUE,N/A
38,5,easy,Counting the occurrence of a character in a string,Implement a function that counts the number of uppercase letters in a string.,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function that counts the number of uppercase letters in a string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of uppercase letters in a string
def funcImp(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count

# Test cases
test_cases = [
    # Test case 1: string with no uppercase letters
    (""hello world"", 0),
    
    # Test case 2: string with all uppercase letters
    (""HELLO WORLD"", 10),
    
    # Test case 3: string with mixed uppercase and lowercase letters
    (""HeLlO WoRlD"", 6),
    
    # Test case 4: string with numbers and special characters
    (""123!@#$%^&*"", 0),
    
    # Test case 5: empty string
    ("""", 0)
]

# Execute test cases
for i, (string, expected_count) in enumerate(test_cases):
    result = funcImp(string)
    if result == expected_count:
        print(f""Test case {i+1}: Passed"")
    else:
        print(f""Test case {i+1}: Failed. Expected {expected_count}, but got {result}"")
```",,0,0,PASS,TRUE,N/A
39,1,easy,Counting the occurrence of a character in a string,Create an algorithm to count the occurrences of each word in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to count the occurrences of each word in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each word in a sentence
def funcImp(sentence):
    # Initialize an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over each word in the sentence
    for word in words:
        # Check if the word is already in the dictionary
        if word in word_counts:
            # If the word is already in the dictionary, increment its count by 1
            word_counts[word] += 1
        else:
            # If the word is not in the dictionary, add it with a count of 1
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    ""Hello world"",
    ""This is a test"",
    ""Count the occurrences of each word in this sentence"",
    ""123 456 789"",
    ""!@#$ %^& *()"",
    """"
]

for sentence in test_cases:
    print(f""Sentence: {sentence}"")
    print(f""Word Counts: {funcImp(sentence)}"")
    print()
```",Sentence: Hello world,2,2,PASS,TRUE,N/A
39,2,easy,Counting the occurrence of a character in a string,Create an algorithm to count the occurrences of each word in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to count the occurrences of each word in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each word in a sentence
def funcImp(sentence):
    # Initialize an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over each word in the sentence
    for word in words:
        # Check if the word is already in the dictionary
        if word in word_counts:
            # If the word is already in the dictionary, increment its count by 1
            word_counts[word] += 1
        else:
            # If the word is not in the dictionary, add it with a count of 1
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    ""Hello world"",
    ""This is a test"",
    ""Count the occurrences of each word in this sentence"",
    ""123 456 789"",
    ""!@#$ %^& *()"",
    """"
]

for sentence in test_cases:
    print(f""Sentence: {sentence}"")
    print(f""Word Counts: {funcImp(sentence)}"")
    print()
```",Sentence: This is a test,4,4,PASS,TRUE,N/A
39,3,easy,Counting the occurrence of a character in a string,Create an algorithm to count the occurrences of each word in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to count the occurrences of each word in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each word in a sentence
def funcImp(sentence):
    # Initialize an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over each word in the sentence
    for word in words:
        # Check if the word is already in the dictionary
        if word in word_counts:
            # If the word is already in the dictionary, increment its count by 1
            word_counts[word] += 1
        else:
            # If the word is not in the dictionary, add it with a count of 1
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    ""Hello world"",
    ""This is a test"",
    ""Count the occurrences of each word in this sentence"",
    ""123 456 789"",
    ""!@#$ %^& *()"",
    """"
]

for sentence in test_cases:
    print(f""Sentence: {sentence}"")
    print(f""Word Counts: {funcImp(sentence)}"")
    print()
```",Sentence: Count the occurrences of each word in this sentence,9,9,PASS,TRUE,N/A
39,4,easy,Counting the occurrence of a character in a string,Create an algorithm to count the occurrences of each word in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to count the occurrences of each word in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each word in a sentence
def funcImp(sentence):
    # Initialize an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over each word in the sentence
    for word in words:
        # Check if the word is already in the dictionary
        if word in word_counts:
            # If the word is already in the dictionary, increment its count by 1
            word_counts[word] += 1
        else:
            # If the word is not in the dictionary, add it with a count of 1
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    ""Hello world"",
    ""This is a test"",
    ""Count the occurrences of each word in this sentence"",
    ""123 456 789"",
    ""!@#$ %^& *()"",
    """"
]

for sentence in test_cases:
    print(f""Sentence: {sentence}"")
    print(f""Word Counts: {funcImp(sentence)}"")
    print()
```",Sentence: 123 456 789,3,3,PASS,TRUE,N/A
39,5,easy,Counting the occurrence of a character in a string,Create an algorithm to count the occurrences of each word in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create an algorithm to count the occurrences of each word in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each word in a sentence
def funcImp(sentence):
    # Initialize an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the sentence into words
    words = sentence.split()
    
    # Iterate over each word in the sentence
    for word in words:
        # Check if the word is already in the dictionary
        if word in word_counts:
            # If the word is already in the dictionary, increment its count by 1
            word_counts[word] += 1
        else:
            # If the word is not in the dictionary, add it with a count of 1
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    ""Hello world"",
    ""This is a test"",
    ""Count the occurrences of each word in this sentence"",
    ""123 456 789"",
    ""!@#$ %^& *()"",
    """"
]

for sentence in test_cases:
    print(f""Sentence: {sentence}"")
    print(f""Word Counts: {funcImp(sentence)}"")
    print()
```",Sentence: !@#$ %^& *(),3,3,PASS,TRUE,N/A
40,1,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",abcabcbb,3,3,PASS,TRUE,N/A
40,2,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",bbbbb,1,1,PASS,TRUE,N/A
40,3,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",pwwkew,3,3,PASS,TRUE,N/A
40,4,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",,0,0,PASS,TRUE,N/A
40,5,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```", ,1,1,PASS,TRUE,N/A
40,6,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",1234567890,10,10,PASS,TRUE,N/A
40,7,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",!@#$%^&*(),10,10,PASS,TRUE,N/A
40,8,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",aab,2,2,PASS,TRUE,N/A
40,9,easy,Counting the occurrence of a character in a string,Write a program to find the longest substring without repeating characters and return its length.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write a program to find the longest substring without repeating characters and return its length.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
def funcImp(s: str) -> int:
    """"""
    Function to find the length of the longest substring without repeating characters.
    
    Parameters:
    s (str): The input string
    
    Returns:
    int: The length of the longest substring without repeating characters
    """"""
    # Initialize variables
    max_length = 0
    start = 0
    char_dict = {}
    
    # Iterate through the string
    for i in range(len(s)):
        # Check if the character is already in the dictionary
        if s[i] in char_dict:
            # Update the start index to the next index of the repeated character
            start = max(start, char_dict[s[i]] + 1)
        
        # Update the character's index in the dictionary
        char_dict[s[i]] = i
        
        # Update the maximum length
        max_length = max(max_length, i - start + 1)
    
    return max_length


# Test cases
test_cases = [
    (""abcabcbb"", 3),  # Longest substring without repeating characters is ""abc""
    (""bbbbb"", 1),  # Longest substring without repeating characters is ""b""
    (""pwwkew"", 3),  # Longest substring without repeating characters is ""wke""
    ("""", 0),  # Empty string
    ("" "", 1),  # Single character string
    (""1234567890"", 10),  # Longest substring without repeating characters is the entire string
    (""!@#$%^&*()"", 10),  # Longest substring without repeating characters is the entire string
    (""aab"", 2),  # Longest substring without repeating characters is ""ab""
    (""dvdf"", 3),  # Longest substring without repeating characters is ""vdf""
]

# Execute test cases
for i, (s, expected) in enumerate(test_cases):
    result = funcImp(s)
    assert result == expected, f""Test case {i+1} failed: expected {expected}, got {result}""
    print(f""Test case {i+1} passed"")
```",dvdf,3,3,PASS,TRUE,N/A
41,1,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","(""anagram"", ""nagaram"")",TRUE,TRUE,PASS,TRUE,N/A
41,2,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","(""listen"", ""silent"")",TRUE,TRUE,PASS,TRUE,N/A
41,3,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","(""hello"", ""world"")",FALSE,FALSE,PASS,TRUE,N/A
41,4,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","(""12345"", ""54321"")",TRUE,TRUE,PASS,TRUE,N/A
41,5,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","("""", """")",TRUE,TRUE,PASS,TRUE,N/A
41,6,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","(""!@#$%"", ""%$#@!"")",TRUE,TRUE,PASS,TRUE,N/A
41,7,easy,Counting the occurrence of a character in a string,"Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).","## Problem Statement
- Develop a Python script to solve the problem: 'Given two strings, write an algorithm to check if they are anagrams (contain exactly the same characters with the same frequency).'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to check if two strings are anagrams
def funcImp(str1, str2):
    # Convert both strings to lowercase
    str1 = str1.lower()
    str2 = str2.lower()
    
    # Remove all non-alphabetic characters from both strings
    str1 = ''.join(c for c in str1 if c.isalpha())
    str2 = ''.join(c for c in str2 if c.isalpha())
    
    # Sort both strings
    sorted_str1 = sorted(str1)
    sorted_str2 = sorted(str2)
    
    # Check if the sorted strings are equal
    if sorted_str1 == sorted_str2:
        return True
    else:
        return False

# Test cases
test_cases = [
    (""anagram"", ""nagaram"", True),
    (""listen"", ""silent"", True),
    (""hello"", ""world"", False),
    (""12345"", ""54321"", True),
    ("""", """", True),
    (""!@#$%"", ""%$#@!"", True),
    (""abc"", ""def"", False)
]

# Execute test cases
for i, (str1, str2, expected_result) in enumerate(test_cases):
    result = funcImp(str1, str2)
    print(f""Test case {i+1}: {result == expected_result}"")
```","(""abc"", ""def"")",FALSE,FALSE,PASS,TRUE,N/A
42,1,easy,Counting the occurrence of a character in a string,"Implement a function to count the number of special characters (e.g., punctuation marks) in a given string.","## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function to count the number of special characters (e.g., punctuation marks) in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of special characters in a given string
def funcImp(input_string):
    # Initialize a counter variable to keep track of the number of special characters
    count = 0
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a special character
        if not char.isalnum() and char != ' ':
            # Increment the counter if the character is a special character
            count += 1
    
    # Return the count of special characters
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: input string with no special characters
    (""Hello World"", 0),
    
    # Test case 2: input string with only special characters
    (""!@#$%^&*()"", 10),
    
    # Test case 3: input string with a mix of alphabets, numbers, and special characters
    (""Hello123!@#"", 4),
    
    # Test case 4: input string with spaces and special characters
    (""Hello World!"", 1),
    
    # Test case 5: empty input string
    ("""", 0)
]

# Execute the test cases
for i, (input_string, expected_result) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")
```",Hello World,0,0,PASS,TRUE,N/A
42,2,easy,Counting the occurrence of a character in a string,,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function to count the number of special characters (e.g., punctuation marks) in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of special characters in a given string
def funcImp(input_string):
    # Initialize a counter variable to keep track of the number of special characters
    count = 0
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a special character
        if not char.isalnum() and char != ' ':
            # Increment the counter if the character is a special character
            count += 1
    
    # Return the count of special characters
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: input string with no special characters
    (""Hello World"", 0),
    
    # Test case 2: input string with only special characters
    (""!@#$%^&*()"", 10),
    
    # Test case 3: input string with a mix of alphabets, numbers, and special characters
    (""Hello123!@#"", 4),
    
    # Test case 4: input string with spaces and special characters
    (""Hello World!"", 1),
    
    # Test case 5: empty input string
    ("""", 0)
]

# Execute the test cases
for i, (input_string, expected_result) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")
```",!@#$%^&*(),10,10,PASS,TRUE,N/A
42,3,easy,Counting the occurrence of a character in a string,,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function to count the number of special characters (e.g., punctuation marks) in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of special characters in a given string
def funcImp(input_string):
    # Initialize a counter variable to keep track of the number of special characters
    count = 0
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a special character
        if not char.isalnum() and char != ' ':
            # Increment the counter if the character is a special character
            count += 1
    
    # Return the count of special characters
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: input string with no special characters
    (""Hello World"", 0),
    
    # Test case 2: input string with only special characters
    (""!@#$%^&*()"", 10),
    
    # Test case 3: input string with a mix of alphabets, numbers, and special characters
    (""Hello123!@#"", 4),
    
    # Test case 4: input string with spaces and special characters
    (""Hello World!"", 1),
    
    # Test case 5: empty input string
    ("""", 0)
]

# Execute the test cases
for i, (input_string, expected_result) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")
```",Hello123!@#,3,3,PASS,TRUE,N/A
42,4,easy,Counting the occurrence of a character in a string,,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function to count the number of special characters (e.g., punctuation marks) in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of special characters in a given string
def funcImp(input_string):
    # Initialize a counter variable to keep track of the number of special characters
    count = 0
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a special character
        if not char.isalnum() and char != ' ':
            # Increment the counter if the character is a special character
            count += 1
    
    # Return the count of special characters
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: input string with no special characters
    (""Hello World"", 0),
    
    # Test case 2: input string with only special characters
    (""!@#$%^&*()"", 10),
    
    # Test case 3: input string with a mix of alphabets, numbers, and special characters
    (""Hello123!@#"", 4),
    
    # Test case 4: input string with spaces and special characters
    (""Hello World!"", 1),
    
    # Test case 5: empty input string
    ("""", 0)
]

# Execute the test cases
for i, (input_string, expected_result) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")
```",Hello World!,1,1,PASS,TRUE,N/A
42,5,easy,Counting the occurrence of a character in a string,,"## Problem Statement
- Develop a Python script to solve the problem: 'Implement a function to count the number of special characters (e.g., punctuation marks) in a given string.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of special characters in a given string
def funcImp(input_string):
    # Initialize a counter variable to keep track of the number of special characters
    count = 0
    
    # Iterate through each character in the input string
    for char in input_string:
        # Check if the character is a special character
        if not char.isalnum() and char != ' ':
            # Increment the counter if the character is a special character
            count += 1
    
    # Return the count of special characters
    return count

# Test the function with different test cases
test_cases = [
    # Test case 1: input string with no special characters
    (""Hello World"", 0),
    
    # Test case 2: input string with only special characters
    (""!@#$%^&*()"", 10),
    
    # Test case 3: input string with a mix of alphabets, numbers, and special characters
    (""Hello123!@#"", 4),
    
    # Test case 4: input string with spaces and special characters
    (""Hello World!"", 1),
    
    # Test case 5: empty input string
    ("""", 0)
]

# Execute the test cases
for i, (input_string, expected_result) in enumerate(test_cases):
    result = funcImp(input_string)
    print(f""Test case {i+1}: {input_string} -> Expected: {expected_result}, Result: {result}"")
    assert result == expected_result, f""Test case {i+1} failed""

print(""All test cases passed!"")
```",,0,0,PASS,TRUE,N/A
43,1,easy,Counting the occurrence of a character in a string,Write an algorithm to count the number of words in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write an algorithm to count the number of words in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of words in a sentence
def funcImp(sentence):
    # Check if the sentence is empty
    if not sentence:
        return 0
    
    # Split the sentence into words using whitespace as the delimiter
    words = sentence.split()
    
    # Return the number of words
    return len(words)

# Test cases
test_cases = [
    # Test case 1: Alphabetic sentence
    {
        ""input"": ""This is a test sentence"",
        ""expected_output"": 5
    },
    # Test case 2: Numeric sentence
    {
        ""input"": ""12345 67890"",
        ""expected_output"": 2
    },
    # Test case 3: Special characters sentence
    {
        ""input"": ""!@#$%^&*()"",
        ""expected_output"": 0
    },
    # Test case 4: Empty sentence
    {
        ""input"": """",
        ""expected_output"": 0
    },
    # Test case 5: Sentence with leading and trailing whitespace
    {
        ""input"": ""   This is a test sentence   "",
        ""expected_output"": 5
    }
]

# Execute test cases
for test_case in test_cases:
    input_data = test_case[""input""]
    expected_output = test_case[""expected_output""]
    
    # Call the function with the input data
    output = funcImp(input_data)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
```",This is a test sentence,5,5,PASS,TRUE,N/A
43,2,easy,Counting the occurrence of a character in a string,Write an algorithm to count the number of words in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write an algorithm to count the number of words in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of words in a sentence
def funcImp(sentence):
    # Check if the sentence is empty
    if not sentence:
        return 0
    
    # Split the sentence into words using whitespace as the delimiter
    words = sentence.split()
    
    # Return the number of words
    return len(words)

# Test cases
test_cases = [
    # Test case 1: Alphabetic sentence
    {
        ""input"": ""This is a test sentence"",
        ""expected_output"": 5
    },
    # Test case 2: Numeric sentence
    {
        ""input"": ""12345 67890"",
        ""expected_output"": 2
    },
    # Test case 3: Special characters sentence
    {
        ""input"": ""!@#$%^&*()"",
        ""expected_output"": 0
    },
    # Test case 4: Empty sentence
    {
        ""input"": """",
        ""expected_output"": 0
    },
    # Test case 5: Sentence with leading and trailing whitespace
    {
        ""input"": ""   This is a test sentence   "",
        ""expected_output"": 5
    }
]

# Execute test cases
for test_case in test_cases:
    input_data = test_case[""input""]
    expected_output = test_case[""expected_output""]
    
    # Call the function with the input data
    output = funcImp(input_data)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
```",12345 67890,2,2,PASS,TRUE,N/A
43,3,easy,Counting the occurrence of a character in a string,Write an algorithm to count the number of words in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write an algorithm to count the number of words in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of words in a sentence
def funcImp(sentence):
    # Check if the sentence is empty
    if not sentence:
        return 0
    
    # Split the sentence into words using whitespace as the delimiter
    words = sentence.split()
    
    # Return the number of words
    return len(words)

# Test cases
test_cases = [
    # Test case 1: Alphabetic sentence
    {
        ""input"": ""This is a test sentence"",
        ""expected_output"": 5
    },
    # Test case 2: Numeric sentence
    {
        ""input"": ""12345 67890"",
        ""expected_output"": 2
    },
    # Test case 3: Special characters sentence
    {
        ""input"": ""!@#$%^&*()"",
        ""expected_output"": 0
    },
    # Test case 4: Empty sentence
    {
        ""input"": """",
        ""expected_output"": 0
    },
    # Test case 5: Sentence with leading and trailing whitespace
    {
        ""input"": ""   This is a test sentence   "",
        ""expected_output"": 5
    }
]

# Execute test cases
for test_case in test_cases:
    input_data = test_case[""input""]
    expected_output = test_case[""expected_output""]
    
    # Call the function with the input data
    output = funcImp(input_data)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
```",!@#$%^&*(),0,1,FAIL,FALSE,N/A
43,4,easy,Counting the occurrence of a character in a string,Write an algorithm to count the number of words in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write an algorithm to count the number of words in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of words in a sentence
def funcImp(sentence):
    # Check if the sentence is empty
    if not sentence:
        return 0
    
    # Split the sentence into words using whitespace as the delimiter
    words = sentence.split()
    
    # Return the number of words
    return len(words)

# Test cases
test_cases = [
    # Test case 1: Alphabetic sentence
    {
        ""input"": ""This is a test sentence"",
        ""expected_output"": 5
    },
    # Test case 2: Numeric sentence
    {
        ""input"": ""12345 67890"",
        ""expected_output"": 2
    },
    # Test case 3: Special characters sentence
    {
        ""input"": ""!@#$%^&*()"",
        ""expected_output"": 0
    },
    # Test case 4: Empty sentence
    {
        ""input"": """",
        ""expected_output"": 0
    },
    # Test case 5: Sentence with leading and trailing whitespace
    {
        ""input"": ""   This is a test sentence   "",
        ""expected_output"": 5
    }
]

# Execute test cases
for test_case in test_cases:
    input_data = test_case[""input""]
    expected_output = test_case[""expected_output""]
    
    # Call the function with the input data
    output = funcImp(input_data)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
```",,0,0,PASS,TRUE,N/A
43,5,easy,Counting the occurrence of a character in a string,Write an algorithm to count the number of words in a sentence.,"## Problem Statement
- Develop a Python script to solve the problem: 'Write an algorithm to count the number of words in a sentence.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the number of words in a sentence
def funcImp(sentence):
    # Check if the sentence is empty
    if not sentence:
        return 0
    
    # Split the sentence into words using whitespace as the delimiter
    words = sentence.split()
    
    # Return the number of words
    return len(words)

# Test cases
test_cases = [
    # Test case 1: Alphabetic sentence
    {
        ""input"": ""This is a test sentence"",
        ""expected_output"": 5
    },
    # Test case 2: Numeric sentence
    {
        ""input"": ""12345 67890"",
        ""expected_output"": 2
    },
    # Test case 3: Special characters sentence
    {
        ""input"": ""!@#$%^&*()"",
        ""expected_output"": 0
    },
    # Test case 4: Empty sentence
    {
        ""input"": """",
        ""expected_output"": 0
    },
    # Test case 5: Sentence with leading and trailing whitespace
    {
        ""input"": ""   This is a test sentence   "",
        ""expected_output"": 5
    }
]

# Execute test cases
for test_case in test_cases:
    input_data = test_case[""input""]
    expected_output = test_case[""expected_output""]
    
    # Call the function with the input data
    output = funcImp(input_data)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
```",   This is a test sentence   ,5,5,PASS,TRUE,N/A
44,1,easy,Counting the occurrence of a character in a string,Create a program that counts the occurrences of each unique word in a paragraph.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the occurrences of each unique word in a paragraph.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each unique word in a paragraph
def funcImp(paragraph):
    # Create an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the paragraph into words
    words = paragraph.split()
    
    # Iterate over each word in the paragraph
    for word in words:
        # Remove any punctuation from the word
        word = word.strip("",.?!;:"")
        
        # Convert the word to lowercase
        word = word.lower()
        
        # If the word is already in the dictionary, increment its count
        if word in word_counts:
            word_counts[word] += 1
        # If the word is not in the dictionary, add it with a count of 1
        else:
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    # Test case with a simple paragraph
    {
        ""input"": ""This is a test. This is only a test."",
        ""output"": {
            ""this"": 2,
            ""is"": 2,
            ""a"": 2,
            ""test"": 2,
            ""only"": 1
        }
    },
    # Test case with a paragraph containing numbers
    {
        ""input"": ""The number is 123. The number is 456."",
        ""output"": {
            ""the"": 2,
            ""number"": 2,
            ""is"": 2,
            ""123"": 1,
            ""456"": 1
        }
    },
    # Test case with a paragraph containing special characters
    {
        ""input"": ""Hello, world! Hello, Python!"",
        ""output"": {
            ""hello"": 2,
            ""world"": 1,
            ""python"": 1
        }
    },
    # Test case with an empty paragraph
    {
        ""input"": """",
        ""output"": {}
    }
]

# Execute the test cases
for test_case in test_cases:
    input_str = test_case[""input""]
    expected_output = test_case[""output""]
    
    # Call the function with the input string
    output = funcImp(input_str)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
        print(""Expected output:"", expected_output)
        print(""Actual output:"", output)
    print()",This is a test. This is only a test.,"{'this': 2, 'is': 2, 'a': 2, 'test': 2, 'only': 1}","{'this': 2, 'is': 2, 'a': 2, 'test': 2, 'only': 1}",PASS,TRUE,N/A
44,2,easy,Counting the occurrence of a character in a string,Create a program that counts the occurrences of each unique word in a paragraph.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the occurrences of each unique word in a paragraph.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each unique word in a paragraph
def funcImp(paragraph):
    # Create an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the paragraph into words
    words = paragraph.split()
    
    # Iterate over each word in the paragraph
    for word in words:
        # Remove any punctuation from the word
        word = word.strip("",.?!;:"")
        
        # Convert the word to lowercase
        word = word.lower()
        
        # If the word is already in the dictionary, increment its count
        if word in word_counts:
            word_counts[word] += 1
        # If the word is not in the dictionary, add it with a count of 1
        else:
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    # Test case with a simple paragraph
    {
        ""input"": ""This is a test. This is only a test."",
        ""output"": {
            ""this"": 2,
            ""is"": 2,
            ""a"": 2,
            ""test"": 2,
            ""only"": 1
        }
    },
    # Test case with a paragraph containing numbers
    {
        ""input"": ""The number is 123. The number is 456."",
        ""output"": {
            ""the"": 2,
            ""number"": 2,
            ""is"": 2,
            ""123"": 1,
            ""456"": 1
        }
    },
    # Test case with a paragraph containing special characters
    {
        ""input"": ""Hello, world! Hello, Python!"",
        ""output"": {
            ""hello"": 2,
            ""world"": 1,
            ""python"": 1
        }
    },
    # Test case with an empty paragraph
    {
        ""input"": """",
        ""output"": {}
    }
]

# Execute the test cases
for test_case in test_cases:
    input_str = test_case[""input""]
    expected_output = test_case[""output""]
    
    # Call the function with the input string
    output = funcImp(input_str)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
        print(""Expected output:"", expected_output)
        print(""Actual output:"", output)
    print()",The number is 123. The number is 456.,"{'the': 2, 'number': 2, 'is': 2, '123': 1, '456': 1}","{'the': 2, 'number': 2, 'is': 2, '123': 1, '456': 1}",PASS,TRUE,N/A
44,3,easy,Counting the occurrence of a character in a string,Create a program that counts the occurrences of each unique word in a paragraph.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the occurrences of each unique word in a paragraph.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each unique word in a paragraph
def funcImp(paragraph):
    # Create an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the paragraph into words
    words = paragraph.split()
    
    # Iterate over each word in the paragraph
    for word in words:
        # Remove any punctuation from the word
        word = word.strip("",.?!;:"")
        
        # Convert the word to lowercase
        word = word.lower()
        
        # If the word is already in the dictionary, increment its count
        if word in word_counts:
            word_counts[word] += 1
        # If the word is not in the dictionary, add it with a count of 1
        else:
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    # Test case with a simple paragraph
    {
        ""input"": ""This is a test. This is only a test."",
        ""output"": {
            ""this"": 2,
            ""is"": 2,
            ""a"": 2,
            ""test"": 2,
            ""only"": 1
        }
    },
    # Test case with a paragraph containing numbers
    {
        ""input"": ""The number is 123. The number is 456."",
        ""output"": {
            ""the"": 2,
            ""number"": 2,
            ""is"": 2,
            ""123"": 1,
            ""456"": 1
        }
    },
    # Test case with a paragraph containing special characters
    {
        ""input"": ""Hello, world! Hello, Python!"",
        ""output"": {
            ""hello"": 2,
            ""world"": 1,
            ""python"": 1
        }
    },
    # Test case with an empty paragraph
    {
        ""input"": """",
        ""output"": {}
    }
]

# Execute the test cases
for test_case in test_cases:
    input_str = test_case[""input""]
    expected_output = test_case[""output""]
    
    # Call the function with the input string
    output = funcImp(input_str)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
        print(""Expected output:"", expected_output)
        print(""Actual output:"", output)
    print()","Hello, world! Hello, Python!","{'hello': 2, 'world': 1, 'python': 1}","{'hello': 2, 'world': 1, 'python': 1}",PASS,TRUE,N/A
44,4,easy,Counting the occurrence of a character in a string,Create a program that counts the occurrences of each unique word in a paragraph.,"## Problem Statement
- Develop a Python script to solve the problem: 'Create a program that counts the occurrences of each unique word in a paragraph.'

## Solution Development
- Create a Python function named 'funcImp' that implements the solution.
- Ensure that the function is defined at the beginning of your script and is accessible throughout the script.

## Script Requirements
- The script should define the 'funcImp' function at the root level, not inside any class or other function.
- Include comments in the script to explain the logic and functionality of the 'funcImp' function.
- Test the function within the script to ensure it's correctly defined and functioning as expected.

## Test Case Execution
- Execute the 'funcImp' function with various test cases to verify its correctness.
- Ensure that the function 'funcImp' is defined and accessible in the scope where the test cases are executed.

## Test Case Preparation
- Prepare a set of test cases, including edge cases, to thoroughly test the function.
- Test cases should cover different types of input strings, such as alphabetic, numeric, special characters, and empty strings.

## Execution Process
- Run each test case through the 'funcImp' function.
- Capture the output of each test case to compare it with the expected result.","```python
# Function to count the occurrences of each unique word in a paragraph
def funcImp(paragraph):
    # Create an empty dictionary to store the word counts
    word_counts = {}
    
    # Split the paragraph into words
    words = paragraph.split()
    
    # Iterate over each word in the paragraph
    for word in words:
        # Remove any punctuation from the word
        word = word.strip("",.?!;:"")
        
        # Convert the word to lowercase
        word = word.lower()
        
        # If the word is already in the dictionary, increment its count
        if word in word_counts:
            word_counts[word] += 1
        # If the word is not in the dictionary, add it with a count of 1
        else:
            word_counts[word] = 1
    
    # Return the word counts dictionary
    return word_counts

# Test the function with different test cases
test_cases = [
    # Test case with a simple paragraph
    {
        ""input"": ""This is a test. This is only a test."",
        ""output"": {
            ""this"": 2,
            ""is"": 2,
            ""a"": 2,
            ""test"": 2,
            ""only"": 1
        }
    },
    # Test case with a paragraph containing numbers
    {
        ""input"": ""The number is 123. The number is 456."",
        ""output"": {
            ""the"": 2,
            ""number"": 2,
            ""is"": 2,
            ""123"": 1,
            ""456"": 1
        }
    },
    # Test case with a paragraph containing special characters
    {
        ""input"": ""Hello, world! Hello, Python!"",
        ""output"": {
            ""hello"": 2,
            ""world"": 1,
            ""python"": 1
        }
    },
    # Test case with an empty paragraph
    {
        ""input"": """",
        ""output"": {}
    }
]

# Execute the test cases
for test_case in test_cases:
    input_str = test_case[""input""]
    expected_output = test_case[""output""]
    
    # Call the function with the input string
    output = funcImp(input_str)
    
    # Compare the output with the expected output
    if output == expected_output:
        print(""Test case passed"")
    else:
        print(""Test case failed"")
        print(""Expected output:"", expected_output)
        print(""Actual output:"", output)
    print()",,{},{},PASS,TRUE,N/A
