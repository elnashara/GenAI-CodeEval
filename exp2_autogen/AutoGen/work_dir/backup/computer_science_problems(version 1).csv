seq,serial_number,Category,ProblemType,problem,ser
1,easy,Finding the sum of two numbers,Write a program that takes two integers as input and calculates their sum.,1,1
2,easy,Finding the sum of two numbers,Implement a function that returns the sum of two floating-point numbers.,2,2
3,easy,Finding the sum of two numbers,"Write a function that takes two strings containing numeric values, converts them to integers, and returns their sum.",3,3
4,easy,Finding the sum of two numbers,Develop an algorithm to find the sum of two binary numbers represented as strings.,4,4
5,easy,Finding the sum of two numbers,Create a function that finds the sum of all odd numbers between two given integers (inclusive).,5,5
6,easy,Finding the sum of two numbers,Write an algorithm to find the sum of all prime numbers between two given integers (inclusive).,6,6
7,easy,Calculating the average of a list of numbers,Write a program to calculate the average of a list of numbers using a for loop.,7,7
8,easy,Calculating the average of a list of numbers,Implement a function that takes in a list of numbers and returns the average using recursion.,8,8
9,easy,Calculating the average of a list of numbers,Create a program that calculates the average of a list of numbers without using any built-in functions or libraries.,9,9
10,easy,Calculating the average of a list of numbers,"Design an algorithm to find the average of a list of numbers, handling cases where the list is empty or contains invalid entries.",10,10
11,easy,Calculating the average of a list of numbers,"Develop a program that calculates the weighted average of a list of numbers, given their respective weights.",11,11
12,easy,Calculating the average of a list of numbers,Write a function that finds the median (middle value) of a list of numbers and then calculates the average of all values greater than or equal to the median.,12,12
13,easy,Calculating the average of a list of numbers,Implement an algorithm to calculate the moving average (average over a sliding window) for each element in a given list.,13,13
14,easy,Calculating the average of a list of numbers,"Design an efficient algorithm to calculate the running average (average up to current position) for each element in an array, without modifying the original array.",14,14
15,easy,Checking if a number is prime,Write a program to check if a given number is prime or not.,15,15
16,easy,Checking if a number is prime,Implement a function that returns the smallest prime number greater than a given input.,16,16
17,easy,Checking if a number is prime,Create a program that prints all the prime numbers between two given numbers.,17,17
18,easy,Checking if a number is prime,Develop an algorithm to find the sum of all prime numbers within a given range.,18,18
19,easy,Checking if a number is prime,Design a function to calculate the largest prime factor of a given number.,19,19
20,easy,Checking if a number is prime,Write code to determine if a given number is semiprime (a product of two prime numbers).,20,20
21,intermediate,Sorting algorithms,Implement the Bubble Sort algorithm and analyze its time complexity.,184,21
22,intermediate,Sorting algorithms,Write a program to implement the Insertion Sort algorithm and calculate its average case time complexity.,185,22
23,intermediate,Sorting algorithms,Design an algorithm to sort an array of strings in lexicographical order using any suitable sorting technique.,187,24
24,intermediate,Sorting algorithms,Implement the Selection Sort algorithm and discuss its advantages and disadvantages compared to other sorting algorithms.,188,25
25,intermediate,Sorting algorithms,Develop an algorithm to sort a linked list using the Merge Sort technique.,189,26
26,intermediate,Sorting algorithms,Write a program to implement the Radix Sort algorithm for sorting positive integers in ascending order.,190,27
28,intermediate,Sorting algorithms,"Design an efficient algorithm to sort an array with many duplicate elements, such as counting sort or bucket sort.",192,29
29,intermediate,Sorting algorithms,Implement the Heap Sort algorithm and evaluate its time complexity in both best-case and worst-case scenarios.,193,30
30,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Find the shortest path between two nodes in an undirected graph using breadth-first search.,194,31
31,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Determine if a directed graph contains a cycle using depth-first search.,195,32
32,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Implement Dijkstra's algorithm to find the shortest path from a single source node to all other nodes in a weighted graph.,196,33
33,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Check if a given undirected graph is connected or not using depth-first search.,197,34
34,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Perform topological sorting on a directed acyclic graph using depth-first search.,198,35
35,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Find all possible paths between two nodes in an undirected graph using depth-first search.,199,36
36,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Detect and print all cycles in an undirected graph using depth-first search.,200,37
37,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Determine if there exists a path between two nodes in an undirected graph using breadth-first search.,201,38
38,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)","Implement Kruskal's algorithm to find the minimum spanning tree of a weighted, connected graph.",202,39
39,intermediate,"Graph traversal (e.g., depth-first search, breadth-first search)",Count the number of connected components in an undirected graph using depth-first search.,203,40
40,medium,Binary Search,Implement a binary search algorithm to find the index of a specific element in a sorted array.,379,41
41,medium,Binary Search,"Given a sorted array, find the first occurrence of a target element using binary search.",380,42
42,medium,Binary Search,Find the last occurrence of a target element in a sorted array using binary search.,381,43
43,medium,Binary Search,Implement an iterative version of the binary search algorithm to find the index of an element in a sorted array.,382,44
44,medium,Binary Search,"Given a rotated sorted array, find the minimum element using binary search.",383,45
45,medium,Binary Search,Implement binary search on a two-dimensional matrix to find if a target element exists.,384,46
46,medium,Binary Search,Find the peak element (an element greater than its neighbors) in an unsorted array using binary search.,385,47
47,medium,Binary Search,"Given an infinite sorted array (or unknown size), find the index of a target element using binary search.",386,48
48,medium,Binary Search,"Determine if an array is bitonic (first increasing, then decreasing) using binary search.",387,49
49,medium,Binary Search,Find the square root of a given number using binary search.,388,50
50,medium,Depth-First Search (DFS),Finding connected components in an undirected graph using DFS.,389,51
51,medium,Depth-First Search (DFS),Implementing a recursive DFS algorithm to traverse a binary tree.,390,52
52,medium,Depth-First Search (DFS),Determining if a directed graph contains a cycle using DFS.,391,53
53,medium,Depth-First Search (DFS),Computing the topological ordering of a directed acyclic graph (DAG) using DFS.,392,54
54,medium,Depth-First Search (DFS),Solving the maze problem by finding a path from start to end using DFS.,393,55
55,medium,Depth-First Search (DFS),Implementing backtracking with DFS to solve the N-Queens problem.,394,56
56,medium,Depth-First Search (DFS),Finding all possible paths between two nodes in a directed graph using DFS.,395,57
57,medium,Depth-First Search (DFS),Detecting and extracting strongly connected components in a directed graph using Tarjan's algorithm with DFS.,396,58
58,medium,Depth-First Search (DFS),Checking if there is a path between two nodes in an undirected graph using DFS.,397,59
59,medium,Depth-First Search (DFS),Implementing depth-limited search (DLS) as an extension of DFS for solving problems with limited depth.,398,60
60,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)","Shortest Path: Given a weighted graph, find the shortest path between two vertices using Dijkstra's algorithm.",579,61
61,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)",Minimum Spanning Tree: Find the minimum spanning tree of a weighted graph using Prim's or Kruskal's algorithm.,580,62
62,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)",All Pairs Shortest Path: Compute the shortest path between all pairs of vertices in a weighted graph using Floyd-Warshall algorithm.,581,63
63,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)",Maximum Flow: Determine the maximum flow from a source to a sink in a flow network using Ford-Fulkerson or Edmonds-Karp algorithm.,582,64
64,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)",Traveling Salesman Problem: Find the shortest possible route that visits each city exactly once and returns to the starting city using techniques like branch and bound or dynamic programming.,583,65
65,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)","Bipartite Matching: Determine if there exists a perfect matching in a bipartite graph, and if so, find one, using algorithms like Hopcroft-Karp or Edmonds' blossom algorithm.",584,66
66,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)",Strongly Connected Components: Identify all strongly connected components in a directed graph using Tarjan's or Kosaraju's algorithm.,585,67
67,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)","Topological Sorting: Sort the vertices of a directed acyclic graph (DAG) such that for every directed edge uv, vertex u comes before v in the sorting order.",586,68
68,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)","Eulerian Path/Cycle: Find an Eulerian path or cycle in an undirected or directed graph respectively, where each edge is visited exactly once.",587,69
69,advanced,"Graph algorithms (e.g., Dijkstra's algorithm)","Minimum Cut: Compute the minimum cut of an undirected graph, which partitions the vertices into two disjoint sets such that the sum of weights of edges crossing between them is minimized.",588,70
70,advanced,Dynamic programming problems,Longest Increasing Subsequence: Find the length of the longest subsequence in an array that is strictly increasing.,589,71
71,advanced,Dynamic programming problems,"Knapsack Problem: Given a set of items with weights and values, determine the maximum value that can be obtained by selecting a subset of items without exceeding a given weight limit.",590,72
72,advanced,Dynamic programming problems,"Edit Distance: Find the minimum number of operations (insertion, deletion, or substitution) required to transform one string into another.",591,73
73,advanced,Dynamic programming problems,Coin Change Problem: Determine the number of ways to make change for a given amount using a given set of coin denominations.,592,74
74,advanced,Dynamic programming problems,Fibonacci Sequence: Implement an algorithm to calculate the nth Fibonacci number efficiently using dynamic programming techniques.,593,75
75,advanced,Dynamic programming problems,"Matrix Chain Multiplication: Given a sequence of matrices, determine the most efficient way to multiply them together.",594,76
76,advanced,Dynamic programming problems,Maximum Subarray Sum: Find the contiguous subarray within an array that has the largest sum.,595,77
77,advanced,Dynamic programming problems,Longest Common Subsequence: Find the length of the longest subsequence common to two sequences.,596,78
78,advanced,Dynamic programming problems,"Subset Sum Problem: Given a set of positive integers and a target sum, determine if there is any subset that sums up to the target value.",597,79
79,advanced,Dynamic programming problems,"Traveling Salesman Problem (TSP): Given a list of cities and their pairwise distances, find the shortest possible route that visits each city exactly once and returns to the starting city.",598,80
80,hard,Knapsack Problem,"0/1 Knapsack Problem: Given a set of items with weights and values, find the most valuable combination of items that can be packed into a knapsack with a given weight capacity.",796,81
81,hard,Knapsack Problem,"Fractional Knapsack Problem: Similar to the 0/1 Knapsack Problem, but here we can take fractions of items to maximize the total value within the weight capacity.",797,82
82,hard,Knapsack Problem,"Unbounded Knapsack Problem: In this variation, there is an unlimited supply of each item, and we need to find the maximum value that can be obtained by selecting any number of items without exceeding the weight capacity.",798,83
83,hard,Knapsack Problem,"Subset Sum Problem: Given a set of integers and a target sum, determine if there exists a subset whose elements sum up to the given target.",799,84
84,hard,Knapsack Problem,Partition Equal Subset Sum: This problem involves partitioning a given set into two subsets such that both subsets have equal sums.,800,85
85,hard,Knapsack Problem,"Multiple Knapsack Problem: In this variant, we have multiple knapsacks with different weight capacities and need to find the optimal distribution of items across these knapsacks to maximize their total value.",801,86
86,hard,Knapsack Problem,"Bounded Knapsack Problem: Similar to the 0/1 Knapsack Problem, but here we have a limited number of each item available for selection.",802,87
87,hard,Knapsack Problem,Quadratic Knapsack Problem: This problem extends the traditional knapsack problem by introducing quadratic terms in the objective function or constraints.,803,88
88,hard,Knapsack Problem,"Time-Constrained Knapsack Problem: Here, each item has an associated time requirement for packing it into the knapsack, and we need to maximize the value while staying within a given time constraint.",804,89
89,hard,Knapsack Problem,"Profit Maximization with Weighted Items: In this variation, each item has an associated profit-to-weight ratio, and we need to select items such that the sum of their profit-to-weight ratios is maximized.",805,90
90,hard,Longest Common Subsequence,"Given two strings, find the length of their longest common subsequence.",806,91
91,hard,Longest Common Subsequence,Find one of the longest common subsequences between two given strings.,807,92
92,hard,Longest Common Subsequence,Determine if two strings have a common subsequence of length k.,808,93
93,hard,Longest Common Subsequence,Find the number of distinct longest common subsequences between two given strings.,809,94
94,hard,Longest Common Subsequence,"Given an array of strings, find the longest common subsequence among all pairs of strings.",810,95
95,hard,Longest Common Subsequence,Find the shortest string that contains all characters from a given set as a subsequence.,811,96
96,hard,Longest Common Subsequence,Determine if a string can be formed by concatenating multiple copies of another string (using its subsequences).,812,97
97,hard,Longest Common Subsequence,"Given three strings, find the longest common subsequence that is present in all three strings.",813,98
98,hard,Longest Common Subsequence,Find the minimum number of deletions required to make two given strings equal by removing characters not present in their longest common subsequence.,814,99
99,hard,Longest Common Subsequence,"Given a set of DNA sequences, find the longest common subsequence that appears in at least half of them.",815,100
