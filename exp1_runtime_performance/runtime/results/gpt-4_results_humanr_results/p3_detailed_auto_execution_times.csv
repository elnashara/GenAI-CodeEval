problem,prompt_name,code_index,code_segment,Size,Min,Average,Max,Exception
p3_find_n_smallest_number,prompt_1,1,"['from heapq import nsmallest\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    smallest_nums = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]']",1000,0.004611399956047535,0.004981981993187219,0.0068368997890502214,N/A
p3_find_n_smallest_number,prompt_1,1,"['from heapq import nsmallest\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    smallest_nums = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]']",10000,0.04297820013016462,0.044919058999512346,0.05166830006055534,N/A
p3_find_n_smallest_number,prompt_1,1,"['from heapq import nsmallest\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    smallest_nums = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]']",100000,0.4213853001128882,0.4282633430068381,0.44852339988574386,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",1000,0.008509600069373846,0.009845490001607686,0.04271319997496903,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",10000,0.14111610013060272,0.14545397400623186,0.1605407998431474,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",100000,2.064920200034976,2.094820406998042,2.131428300170228,N/A
p3_find_n_smallest_number,prompt_1,3,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007158999796956778,0.007857574983499944,0.010626599891111255,N/A
p3_find_n_smallest_number,prompt_1,3,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11315230000764132,0.11710069099906832,0.1352770000230521,N/A
p3_find_n_smallest_number,prompt_1,3,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.585280700121075,1.6080522790155374,1.6594942999072373,N/A
p3_find_n_smallest_number,prompt_1,4,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.0046983000356704,0.005105013998690993,0.008538400055840611,N/A
p3_find_n_smallest_number,prompt_1,4,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.0439279000274837,0.045935827996581795,0.05816909996792674,N/A
p3_find_n_smallest_number,prompt_1,4,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.41882720007561147,0.4265808660001494,0.4444798999466002,N/A
p3_find_n_smallest_number,prompt_1,5,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is larger than the size of the list arg1'\n    count = {}\n    for idx, num in enumerate(arg1):\n        if num in count:\n            count[num].append(idx)\n        else:\n            count[num] = [idx]\n    sorted_items = sorted(count.items())\n    result = []\n    for k, v in sorted_items:\n        if len(v) < arg2:\n            result += v\n            arg2 -= len(v)\n        else:\n            result += v[:arg2]\n            break\n    return result""]",1000,0.01565790013410151,0.01662861499702558,0.020752100041136146,N/A
p3_find_n_smallest_number,prompt_1,5,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is larger than the size of the list arg1'\n    count = {}\n    for idx, num in enumerate(arg1):\n        if num in count:\n            count[num].append(idx)\n        else:\n            count[num] = [idx]\n    sorted_items = sorted(count.items())\n    result = []\n    for k, v in sorted_items:\n        if len(v) < arg2:\n            result += v\n            arg2 -= len(v)\n        else:\n            result += v[:arg2]\n            break\n    return result""]",10000,0.2561383000575006,0.2616425320203416,0.26952049997635186,N/A
p3_find_n_smallest_number,prompt_1,5,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is larger than the size of the list arg1'\n    count = {}\n    for idx, num in enumerate(arg1):\n        if num in count:\n            count[num].append(idx)\n        else:\n            count[num] = [idx]\n    sorted_items = sorted(count.items())\n    result = []\n    for k, v in sorted_items:\n        if len(v) < arg2:\n            result += v\n            arg2 -= len(v)\n        else:\n            result += v[:arg2]\n            break\n    return result""]",100000,4.214763399912044,4.323214380983263,5.964293900178745,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    else:\n        sorted_list = sorted([(x, i) for i, x in enumerate(arg1)])[:arg2]\n        indices = [i for x, i in sorted_list]\n        return indices']",1000,0.01210330007597804,0.012976966984570026,0.029860900016501546,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    else:\n        sorted_list = sorted([(x, i) for i, x in enumerate(arg1)])[:arg2]\n        indices = [i for x, i in sorted_list]\n        return indices']",10000,0.18118610000237823,0.1862904319842346,0.19626490003429353,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    else:\n        sorted_list = sorted([(x, i) for i, x in enumerate(arg1)])[:arg2]\n        indices = [i for x, i in sorted_list]\n        return indices']",100000,2.8630892001092434,2.9046854190109297,2.9757035998627543,N/A
p3_find_n_smallest_number,prompt_1,7,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.007270399946719408,0.007767413007095456,0.009330299915745854,N/A
p3_find_n_smallest_number,prompt_1,7,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.11023440002463758,0.1138323280075565,0.12056279997341335,N/A
p3_find_n_smallest_number,prompt_1,7,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.581969999941066,1.6093701500073074,1.675333600025624,N/A
p3_find_n_smallest_number,prompt_1,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_numbers = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_numbers)\n    smallest_indexes = [heapq.heappop(indexed_numbers)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005233500152826309,0.005504911991301924,0.006403400097042322,N/A
p3_find_n_smallest_number,prompt_1,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_numbers = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_numbers)\n    smallest_indexes = [heapq.heappop(indexed_numbers)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06784459995105863,0.06952312899054959,0.07541000004857779,N/A
p3_find_n_smallest_number,prompt_1,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_numbers = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_numbers)\n    smallest_indexes = [heapq.heappop(indexed_numbers)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7672206000424922,0.7788438950036652,0.8113591999281198,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arg1, arg2):\n    arg1_indices = list(range(len(arg1)))\n    arg1_indices.sort(key=lambda x: arg1[x])\n    return arg1_indices[:arg2]']",1000,0.007401200011372566,0.007750578999985009,0.010960099985823035,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arg1, arg2):\n    arg1_indices = list(range(len(arg1)))\n    arg1_indices.sort(key=lambda x: arg1[x])\n    return arg1_indices[:arg2]']",10000,0.11025370005518198,0.11371419599978254,0.13344109989702702,N/A
p3_find_n_smallest_number,prompt_1,9,"['def funcImp(arg1, arg2):\n    arg1_indices = list(range(len(arg1)))\n    arg1_indices.sort(key=lambda x: arg1[x])\n    return arg1_indices[:arg2]']",100000,1.6028378999326378,1.6214988299878315,1.6616666000336409,N/A
p3_find_n_smallest_number,prompt_1,10,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_numbers = [(num, i) for i, num in enumerate(arg1)]\n    indexed_numbers.sort()\n    smallest_tuples = indexed_numbers[:arg2]\n    return [t[1] for t in smallest_tuples]']",1000,0.011517399922013283,0.012521958991419524,0.0197630999609828,N/A
p3_find_n_smallest_number,prompt_1,10,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_numbers = [(num, i) for i, num in enumerate(arg1)]\n    indexed_numbers.sort()\n    smallest_tuples = indexed_numbers[:arg2]\n    return [t[1] for t in smallest_tuples]']",10000,0.17512509995140135,0.17986481001134963,0.2129781001713127,N/A
p3_find_n_smallest_number,prompt_1,10,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_numbers = [(num, i) for i, num in enumerate(arg1)]\n    indexed_numbers.sort()\n    smallest_tuples = indexed_numbers[:arg2]\n    return [t[1] for t in smallest_tuples]']",100000,2.8035244999919087,2.8420337540027685,2.914205800043419,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arg1, arg2):\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])][:arg2]']",1000,0.009889099979773164,0.010699544015806169,0.013915299903601408,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arg1, arg2):\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])][:arg2]']",10000,0.15712239989079535,0.16313459701603278,0.1691122001502663,N/A
p3_find_n_smallest_number,prompt_1,11,"['def funcImp(arg1, arg2):\n    return [i for i, x in sorted(enumerate(arg1), key=lambda x: x[1])][:arg2]']",100000,2.6463031999301165,2.697101505007595,2.839020200073719,N/A
p3_find_n_smallest_number,prompt_1,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    h = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(h)\n    return [heapq.heappop(h)[1] for _ in range(arg2)]']",1000,0.005050200037658215,0.005395224005915225,0.007787900045514107,N/A
p3_find_n_smallest_number,prompt_1,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    h = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(h)\n    return [heapq.heappop(h)[1] for _ in range(arg2)]']",10000,0.06616980000399053,0.06777194298803807,0.06995190004818141,N/A
p3_find_n_smallest_number,prompt_1,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    h = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(h)\n    return [heapq.heappop(h)[1] for _ in range(arg2)]']",100000,0.7610851000063121,0.7864295559795573,1.0627279998734593,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007391100050881505,0.008519954993389547,0.03234810009598732,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.11010410008020699,0.11330187802203,0.1310838998761028,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.581234599929303,1.6149304329929874,1.6576896999031305,N/A
p3_find_n_smallest_number,prompt_1,14,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007274199975654483,0.007961403001099826,0.012531400192528963,N/A
p3_find_n_smallest_number,prompt_1,14,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11132169980555773,0.11510927200783044,0.13506539980880916,N/A
p3_find_n_smallest_number,prompt_1,14,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.584824699908495,1.6132583169988357,1.6578023000620306,N/A
p3_find_n_smallest_number,prompt_1,15,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    queue = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(queue)\n    for i in range(arg2, len(arg1)):\n        if -queue[0][0] > arg1[i]:\n            heapq.heapreplace(queue, (-arg1[i], i))\n    return [x[1] for x in queue]']",1000,0.0027972999960184097,0.002990368993487209,0.003954699961468577,N/A
p3_find_n_smallest_number,prompt_1,15,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    queue = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(queue)\n    for i in range(arg2, len(arg1)):\n        if -queue[0][0] > arg1[i]:\n            heapq.heapreplace(queue, (-arg1[i], i))\n    return [x[1] for x in queue]']",10000,0.02687240019440651,0.028345572005491704,0.03625020012259483,N/A
p3_find_n_smallest_number,prompt_1,15,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    queue = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(queue)\n    for i in range(arg2, len(arg1)):\n        if -queue[0][0] > arg1[i]:\n            heapq.heapreplace(queue, (-arg1[i], i))\n    return [x[1] for x in queue]']",100000,0.26912630000151694,0.27637326999567446,0.29110489995218813,N/A
p3_find_n_smallest_number,prompt_1,16,"['def funcImp(arg1, arg2):\n    sorted_array = sorted([(value, i) for i, value in enumerate(arg1)])\n    smallest_indices = [index for value, index in sorted_array[:arg2]]\n    return smallest_indices']",1000,0.012139300117269158,0.012666907995007932,0.018205999862402678,N/A
p3_find_n_smallest_number,prompt_1,16,"['def funcImp(arg1, arg2):\n    sorted_array = sorted([(value, i) for i, value in enumerate(arg1)])\n    smallest_indices = [index for value, index in sorted_array[:arg2]]\n    return smallest_indices']",10000,0.18196760001592338,0.18649941900279374,0.19541600020602345,N/A
p3_find_n_smallest_number,prompt_1,16,"['def funcImp(arg1, arg2):\n    sorted_array = sorted([(value, i) for i, value in enumerate(arg1)])\n    smallest_indices = [index for value, index in sorted_array[:arg2]]\n    return smallest_indices']",100000,2.860706799896434,2.936101402004715,3.3799593998119235,N/A
p3_find_n_smallest_number,prompt_1,17,"['import numpy as np\n\ndef funcImp(arg1, arg2):\n    arr = np.array(arg1)\n    sorted_indices = np.argsort(arr)\n    return sorted_indices[:arg2].tolist()']",1000,0.003055199980735779,0.0032498670066706836,0.003690799931064248,N/A
p3_find_n_smallest_number,prompt_1,17,"['import numpy as np\n\ndef funcImp(arg1, arg2):\n    arr = np.array(arg1)\n    sorted_indices = np.argsort(arr)\n    return sorted_indices[:arg2].tolist()']",10000,0.057598100043833256,0.06015993900829926,0.07236210000701249,N/A
p3_find_n_smallest_number,prompt_1,17,"['import numpy as np\n\ndef funcImp(arg1, arg2):\n    arr = np.array(arg1)\n    sorted_indices = np.argsort(arr)\n    return sorted_indices[:arg2].tolist()']",100000,0.6834551999345422,0.6938772490015254,0.7092422000132501,N/A
p3_find_n_smallest_number,prompt_1,18,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_values = sorted([(value, i) for i, value in enumerate(arg1)])\n    indices = [index for value, index in sorted_values[:arg2]]\n    return indices']",1000,0.012086299946531653,0.012569065992720426,0.015729399863630533,N/A
p3_find_n_smallest_number,prompt_1,18,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_values = sorted([(value, i) for i, value in enumerate(arg1)])\n    indices = [index for value, index in sorted_values[:arg2]]\n    return indices']",10000,0.18320979992859066,0.18671255100518466,0.1985842001158744,N/A
p3_find_n_smallest_number,prompt_1,18,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_values = sorted([(value, i) for i, value in enumerate(arg1)])\n    indices = [index for value, index in sorted_values[:arg2]]\n    return indices']",100000,2.8518159999512136,2.915649619998876,2.9993447000160813,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    if arg2 <= len(arg1):\n        return sorted_indexes[:arg2]\n    else:\n        return sorted_indexes']",1000,0.007477199891582131,0.007934573979582638,0.011511599877849221,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    if arg2 <= len(arg1):\n        return sorted_indexes[:arg2]\n    else:\n        return sorted_indexes']",10000,0.11169489985331893,0.1152925109770149,0.12286249990575016,N/A
p3_find_n_smallest_number,prompt_1,19,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    if arg2 <= len(arg1):\n        return sorted_indexes[:arg2]\n    else:\n        return sorted_indexes']",100000,1.599793199915439,1.6173384049907327,1.6662167999893427,N/A
p3_find_n_smallest_number,prompt_1,20,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index = [(num, i) for i, num in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, num_index)\n    return [i for num, i in k_smallest_tuples]']",1000,0.005299000069499016,0.005959387009497732,0.011451200116425753,N/A
p3_find_n_smallest_number,prompt_1,20,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index = [(num, i) for i, num in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, num_index)\n    return [i for num, i in k_smallest_tuples]']",10000,0.05333579983562231,0.054906971990130844,0.058799599995836616,N/A
p3_find_n_smallest_number,prompt_1,20,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index = [(num, i) for i, num in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, num_index)\n    return [i for num, i in k_smallest_tuples]']",100000,0.6734295999631286,0.6884784460044466,0.712398000061512,N/A
p3_find_n_smallest_number,prompt_1,21,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexes = [(arg1[i], i) for i in range(len(arg1))]\n    smallest_k_elements = heapq.nsmallest(arg2, indexes)\n    return [index for _, index in smallest_k_elements]']",1000,0.004900999832898378,0.005218694999348373,0.005740900058299303,N/A
p3_find_n_smallest_number,prompt_1,21,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexes = [(arg1[i], i) for i in range(len(arg1))]\n    smallest_k_elements = heapq.nsmallest(arg2, indexes)\n    return [index for _, index in smallest_k_elements]']",10000,0.04951540008187294,0.05144056100863963,0.05515590007416904,N/A
p3_find_n_smallest_number,prompt_1,21,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexes = [(arg1[i], i) for i in range(len(arg1))]\n    smallest_k_elements = heapq.nsmallest(arg2, indexes)\n    return [index for _, index in smallest_k_elements]']",100000,0.6721478002145886,0.6849050970119425,0.7058331000152975,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    enumerated = list(enumerate(arg1))\n    sorted_enumeration = sorted(enumerated, key=lambda x: x[1])\n    smallest_indexes = [index for index, value in sorted_enumeration[:arg2]]\n    return smallest_indexes']",1000,0.008673999924212694,0.009117158008739351,0.012060499982908368,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    enumerated = list(enumerate(arg1))\n    sorted_enumeration = sorted(enumerated, key=lambda x: x[1])\n    smallest_indexes = [index for index, value in sorted_enumeration[:arg2]]\n    return smallest_indexes']",10000,0.14204780012369156,0.14551597701152785,0.15766260004602373,N/A
p3_find_n_smallest_number,prompt_1,22,"['def funcImp(arg1, arg2):\n    enumerated = list(enumerate(arg1))\n    sorted_enumeration = sorted(enumerated, key=lambda x: x[1])\n    smallest_indexes = [index for index, value in sorted_enumeration[:arg2]]\n    return smallest_indexes']",100000,2.1443509000819176,2.180300684988033,2.2502737001050264,N/A
p3_find_n_smallest_number,prompt_1,23,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004696799907833338,0.004844636006746441,0.005732699995860457,N/A
p3_find_n_smallest_number,prompt_1,23,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.043734499951824546,0.045188812005799266,0.05039840005338192,N/A
p3_find_n_smallest_number,prompt_1,23,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4196318998001516,0.42832879099296406,0.4539302000775933,N/A
p3_find_n_smallest_number,prompt_1,24,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    index_value_pairs = list(enumerate(arg1))\n    index_value_pairs.sort(key=lambda x: x[1])\n    indices = [index for index, _ in index_value_pairs[:arg2]]\n    indices.sort()\n    return indices']",1000,0.00854730000719428,0.008887137982528657,0.010150199988856912,N/A
p3_find_n_smallest_number,prompt_1,24,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    index_value_pairs = list(enumerate(arg1))\n    index_value_pairs.sort(key=lambda x: x[1])\n    indices = [index for index, _ in index_value_pairs[:arg2]]\n    indices.sort()\n    return indices']",10000,0.13826159993186593,0.14110330200288446,0.1491790001746267,N/A
p3_find_n_smallest_number,prompt_1,24,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    index_value_pairs = list(enumerate(arg1))\n    index_value_pairs.sort(key=lambda x: x[1])\n    indices = [index for index, _ in index_value_pairs[:arg2]]\n    indices.sort()\n    return indices']",100000,2.0769702999386936,2.0982993719913066,2.147480099927634,N/A
p3_find_n_smallest_number,prompt_1,25,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid number of elements to find, select value between 1 and length of the input list'\n    indices_list = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return indices_list[:arg2]""]",1000,0.00739459996111691,0.007743553002364933,0.0087311000097543,N/A
p3_find_n_smallest_number,prompt_1,25,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid number of elements to find, select value between 1 and length of the input list'\n    indices_list = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return indices_list[:arg2]""]",10000,0.11280410015024245,0.116076764985919,0.13145099999383092,N/A
p3_find_n_smallest_number,prompt_1,25,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid number of elements to find, select value between 1 and length of the input list'\n    indices_list = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return indices_list[:arg2]""]",100000,1.576537200016901,1.5968607209948822,1.652473900001496,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.007385100005194545,0.007757645992096513,0.009273200063034892,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.11191949993371964,0.11447541799163446,0.119819900020957,N/A
p3_find_n_smallest_number,prompt_1,26,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.602857399964705,1.6212351040053181,1.6582222001161426,N/A
p3_find_n_smallest_number,prompt_1,27,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 < 1:\n        return []\n    pairs = [(num, i) for i, num in enumerate(arg1)]\n    pairs.sort()\n    indices = [i for num, i in pairs[:arg2]]\n    return indices']",1000,0.011636700015515089,0.012355617005378008,0.014234399888664484,N/A
p3_find_n_smallest_number,prompt_1,27,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 < 1:\n        return []\n    pairs = [(num, i) for i, num in enumerate(arg1)]\n    pairs.sort()\n    indices = [i for num, i in pairs[:arg2]]\n    return indices']",10000,0.179386000148952,0.18467716799816117,0.19767919997684658,N/A
p3_find_n_smallest_number,prompt_1,27,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 < 1:\n        return []\n    pairs = [(num, i) for i, num in enumerate(arg1)]\n    pairs.sort()\n    indices = [i for num, i in pairs[:arg2]]\n    return indices']",100000,2.792371899820864,2.8426408469909803,2.923105200054124,N/A
p3_find_n_smallest_number,prompt_1,28,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError(""Invalid \'k\' value. \'k\' should be less than or equal to the length of the input list."")\n    if not arg1 or arg2 == 0:\n        return []\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(paired_list)\n    smallest_indices = [heapq.heappop(paired_list)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005058600101619959,0.005832229012157768,0.019847100134938955,N/A
p3_find_n_smallest_number,prompt_1,28,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError(""Invalid \'k\' value. \'k\' should be less than or equal to the length of the input list."")\n    if not arg1 or arg2 == 0:\n        return []\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(paired_list)\n    smallest_indices = [heapq.heappop(paired_list)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06484080012887716,0.06634492199169471,0.07327289995737374,N/A
p3_find_n_smallest_number,prompt_1,28,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError(""Invalid \'k\' value. \'k\' should be less than or equal to the length of the input list."")\n    if not arg1 or arg2 == 0:\n        return []\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(paired_list)\n    smallest_indices = [heapq.heappop(paired_list)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7652178998105228,0.7777718420000747,0.8005399000830948,N/A
p3_find_n_smallest_number,prompt_1,29,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    indexed_arg1 = [(number, index) for index, number in enumerate(arg1)]\n    smallest_numbers = heapq.nsmallest(arg2, indexed_arg1)\n    return [number[1] for number in smallest_numbers]']",1000,0.005304299993440509,0.005550181993748992,0.0075592000503093,N/A
p3_find_n_smallest_number,prompt_1,29,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    indexed_arg1 = [(number, index) for index, number in enumerate(arg1)]\n    smallest_numbers = heapq.nsmallest(arg2, indexed_arg1)\n    return [number[1] for number in smallest_numbers]']",10000,0.053108999971300364,0.055152470015455035,0.06287889997474849,N/A
p3_find_n_smallest_number,prompt_1,29,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    indexed_arg1 = [(number, index) for index, number in enumerate(arg1)]\n    smallest_numbers = heapq.nsmallest(arg2, indexed_arg1)\n    return [number[1] for number in smallest_numbers]']",100000,0.6765694001223892,0.6956261300016194,0.7316427000332624,N/A
p3_find_n_smallest_number,prompt_1,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    combined = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(combined)\n    smallest_elements_indices = [heapq.heappop(combined)[1] for _ in range(arg2)]\n    return smallest_elements_indices']",1000,0.005153500009328127,0.005457510992418975,0.0075644999742507935,N/A
p3_find_n_smallest_number,prompt_1,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    combined = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(combined)\n    smallest_elements_indices = [heapq.heappop(combined)[1] for _ in range(arg2)]\n    return smallest_elements_indices']",10000,0.06781839998438954,0.0691489540063776,0.07178909983485937,N/A
p3_find_n_smallest_number,prompt_1,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    combined = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(combined)\n    smallest_elements_indices = [heapq.heappop(combined)[1] for _ in range(arg2)]\n    return smallest_elements_indices']",100000,0.7705671000294387,0.7863240289967507,0.8052424998022616,N/A
p3_find_n_smallest_number,prompt_1,31,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> None:\n    if arg2 > len(arg1):\n        pass\n        return\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indices = [i for num in smallest_nums for i, j in enumerate(arg1) if j == num]\n    pass']",1000,0.009392200037837029,0.00981761999661103,0.013222499983385205,N/A
p3_find_n_smallest_number,prompt_1,31,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> None:\n    if arg2 > len(arg1):\n        pass\n        return\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indices = [i for num in smallest_nums for i, j in enumerate(arg1) if j == num]\n    pass']",10000,0.09573350008577108,0.09856834601145238,0.10558259999379516,N/A
p3_find_n_smallest_number,prompt_1,31,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> None:\n    if arg2 > len(arg1):\n        pass\n        return\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indices = [i for num in smallest_nums for i, j in enumerate(arg1) if j == num]\n    pass']",100000,0.9720475000794977,0.9902958620083518,1.022645300021395,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""The value of \'k\' is greater than the number of elements in the list.""\n    elif arg2 < 1:\n        return ""The value of \'k\' must be at least 1.""\n    else:\n        indexed_values = list(enumerate(arg1))\n        sorted_indexed_values = sorted(indexed_values, key=lambda x: x[1])\n        return [index for index, value in sorted_indexed_values[:arg2]]']",1000,0.008665299974381924,0.009297036002390086,0.015153399901464581,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""The value of \'k\' is greater than the number of elements in the list.""\n    elif arg2 < 1:\n        return ""The value of \'k\' must be at least 1.""\n    else:\n        indexed_values = list(enumerate(arg1))\n        sorted_indexed_values = sorted(indexed_values, key=lambda x: x[1])\n        return [index for index, value in sorted_indexed_values[:arg2]]']",10000,0.14249220001511276,0.14559103902196513,0.1610729000531137,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""The value of \'k\' is greater than the number of elements in the list.""\n    elif arg2 < 1:\n        return ""The value of \'k\' must be at least 1.""\n    else:\n        indexed_values = list(enumerate(arg1))\n        sorted_indexed_values = sorted(indexed_values, key=lambda x: x[1])\n        return [index for index, value in sorted_indexed_values[:arg2]]']",100000,2.150285000214353,2.1831430989922955,2.2484655999578536,N/A
p3_find_n_smallest_number,prompt_1,33,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1_sorted_with_indexes = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for value, index in arg1_sorted_with_indexes[:arg2]]']",1000,0.012012599967420101,0.012692122990265488,0.018041999777778983,N/A
p3_find_n_smallest_number,prompt_1,33,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1_sorted_with_indexes = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for value, index in arg1_sorted_with_indexes[:arg2]]']",10000,0.1826577999163419,0.1858563590189442,0.19543640012852848,N/A
p3_find_n_smallest_number,prompt_1,33,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1_sorted_with_indexes = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for value, index in arg1_sorted_with_indexes[:arg2]]']",100000,2.899352499982342,2.946416390002705,2.994338900083676,N/A
p3_find_n_smallest_number,prompt_1,34,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",1000,0.00848240009509027,0.008981956003699451,0.01293109985999763,N/A
p3_find_n_smallest_number,prompt_1,34,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",10000,0.14214390004053712,0.1454568999935873,0.15127040003426373,N/A
p3_find_n_smallest_number,prompt_1,34,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",100000,2.082786599872634,2.105455715009011,2.168072500033304,N/A
p3_find_n_smallest_number,prompt_1,35,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.007392799947410822,0.007703494015149772,0.008477200055494905,N/A
p3_find_n_smallest_number,prompt_1,35,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.11357220006175339,0.11741200999822468,0.1393008001614362,N/A
p3_find_n_smallest_number,prompt_1,35,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.595550499856472,1.617856399018783,1.6777855998370796,N/A
p3_find_n_smallest_number,prompt_1,36,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    pairs = [(num, idx) for idx, num in enumerate(arg1)]\n    sorted_pairs = sorted(pairs, key=lambda x: x[0])\n    result = [idx for num, idx in sorted_pairs[:arg2]]\n    return result']",1000,0.010010599857196212,0.010518043979536741,0.012355000013485551,N/A
p3_find_n_smallest_number,prompt_1,36,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    pairs = [(num, idx) for idx, num in enumerate(arg1)]\n    sorted_pairs = sorted(pairs, key=lambda x: x[0])\n    result = [idx for num, idx in sorted_pairs[:arg2]]\n    return result']",10000,0.15407359995879233,0.15771497700130566,0.1634215998928994,N/A
p3_find_n_smallest_number,prompt_1,36,"['def funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    pairs = [(num, idx) for idx, num in enumerate(arg1)]\n    sorted_pairs = sorted(pairs, key=lambda x: x[0])\n    result = [idx for num, idx in sorted_pairs[:arg2]]\n    return result']",100000,2.271639999933541,2.301365762001369,2.3512267998885363,N/A
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    num_index_pairs = list(enumerate(arg1))\n    sorted_pairs = sorted(num_index_pairs, key=lambda x: x[1])\n    return [index for index, num in sorted_pairs[:arg2]]']",1000,0.008573299972340465,0.009217540014069527,0.011338300071656704,N/A
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    num_index_pairs = list(enumerate(arg1))\n    sorted_pairs = sorted(num_index_pairs, key=lambda x: x[1])\n    return [index for index, num in sorted_pairs[:arg2]]']",10000,0.13961990014649928,0.1451958609977737,0.15259510022588074,N/A
p3_find_n_smallest_number,prompt_1,37,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    num_index_pairs = list(enumerate(arg1))\n    sorted_pairs = sorted(num_index_pairs, key=lambda x: x[1])\n    return [index for index, num in sorted_pairs[:arg2]]']",100000,2.133923500077799,2.1755543790059164,2.226779199903831,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    k_smallest_numbers = sorted(arg1)[:arg2]\n    indices = [arg1.index(num) for num in k_smallest_numbers]\n    return indices']",1000,0.004297700012102723,0.004707231994252652,0.006053100107237697,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    k_smallest_numbers = sorted(arg1)[:arg2]\n    indices = [arg1.index(num) for num in k_smallest_numbers]\n    return indices']",10000,0.0849416998680681,0.08909768400946633,0.10098540014587343,N/A
p3_find_n_smallest_number,prompt_1,38,"['def funcImp(arg1, arg2):\n    k_smallest_numbers = sorted(arg1)[:arg2]\n    indices = [arg1.index(num) for num in k_smallest_numbers]\n    return indices']",100000,1.0986301000230014,1.1180529789975844,1.1409052000381052,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    sorted_idx = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_idx[:arg2]']",1000,0.005593700101599097,0.00598735800711438,0.0076950001530349255,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    sorted_idx = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_idx[:arg2]']",10000,0.09240509988740087,0.09601537999464199,0.10782320005819201,N/A
p3_find_n_smallest_number,prompt_1,39,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    sorted_idx = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_idx[:arg2]']",100000,1.4185897998977453,1.5010282900067977,1.6731030000373721,N/A
p3_find_n_smallest_number,prompt_1,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= len(arg1):\n        return [i[0] for i in sorted([(i[0], i[1]) for i in list(enumerate(arg1))], key=lambda x: x[1])[:arg2]]\n    else:\n        return 'Second argument is larger than the number of elements in the list.'""]",1000,0.011694500222802162,0.013099502983968704,0.02342150011099875,N/A
p3_find_n_smallest_number,prompt_1,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= len(arg1):\n        return [i[0] for i in sorted([(i[0], i[1]) for i in list(enumerate(arg1))], key=lambda x: x[1])[:arg2]]\n    else:\n        return 'Second argument is larger than the number of elements in the list.'""]",10000,0.1810014999937266,0.18886845800327137,0.19825639994814992,N/A
p3_find_n_smallest_number,prompt_1,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= len(arg1):\n        return [i[0] for i in sorted([(i[0], i[1]) for i in list(enumerate(arg1))], key=lambda x: x[1])[:arg2]]\n    else:\n        return 'Second argument is larger than the number of elements in the list.'""]",100000,2.545265099965036,2.64122468899237,2.7643446000292897,N/A
p3_find_n_smallest_number,prompt_1,41,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",1000,0.007414699997752905,0.008323977002874017,0.013193400111049414,N/A
p3_find_n_smallest_number,prompt_1,41,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",10000,0.11270490009337664,0.11852333500050008,0.14857589988969266,N/A
p3_find_n_smallest_number,prompt_1,41,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",100000,1.61219900008291,1.6733232910069638,1.7651810999959707,N/A
p3_find_n_smallest_number,prompt_1,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    smallest_numbers = heapq.nsmallest(arg2, indexed_numbers)\n    return [index for number, index in smallest_numbers]']",1000,0.0053316999692469835,0.005617237999103963,0.007983099902048707,N/A
p3_find_n_smallest_number,prompt_1,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    smallest_numbers = heapq.nsmallest(arg2, indexed_numbers)\n    return [index for number, index in smallest_numbers]']",10000,0.05272559984587133,0.05539568197447806,0.0632706000469625,N/A
p3_find_n_smallest_number,prompt_1,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    smallest_numbers = heapq.nsmallest(arg2, indexed_numbers)\n    return [index for number, index in smallest_numbers]']",100000,0.6736825001426041,0.6986491540027783,0.7483687000349164,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    indexed_numbers.sort(key=lambda x: x[0])\n    return [index for _, index in indexed_numbers[:arg2]]']",1000,0.009754600003361702,0.010275999994482844,0.012722899904474616,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    indexed_numbers.sort(key=lambda x: x[0])\n    return [index for _, index in indexed_numbers[:arg2]]']",10000,0.15204570000059903,0.1566069390065968,0.16750320000573993,N/A
p3_find_n_smallest_number,prompt_1,43,"['def funcImp(arg1, arg2):\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    indexed_numbers.sort(key=lambda x: x[0])\n    return [index for _, index in indexed_numbers[:arg2]]']",100000,2.2135207999963313,2.2599760360107757,2.341780799906701,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007191400043666363,0.007703514015302062,0.008708100067451596,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.11289739981293678,0.11735744700068608,0.1314066001214087,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.5920212001074106,1.6187549769971519,1.6551985000260174,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",1000,0.007370900129899383,0.007858962009195239,0.009378999937325716,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",10000,0.11247020005248487,0.11635602200403809,0.13560699997469783,N/A
p3_find_n_smallest_number,prompt_1,45,"['def funcImp(arg1, arg2):\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",100000,1.5894259000197053,1.614403989999555,1.6631990000605583,N/A
p3_find_n_smallest_number,prompt_1,46,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return \'Error: Size ""k"" is greater than the length of the list.\'\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",1000,0.0071860000025480986,0.007763432017527521,0.011853100033476949,N/A
p3_find_n_smallest_number,prompt_1,46,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return \'Error: Size ""k"" is greater than the length of the list.\'\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",10000,0.1086966001894325,0.11272865801351145,0.13447579997591674,N/A
p3_find_n_smallest_number,prompt_1,46,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return \'Error: Size ""k"" is greater than the length of the list.\'\n    sorted_indexes = sorted(range(len(arg1)), key=lambda i: arg1[i])\n    return sorted_indexes[:arg2]']",100000,1.591186200035736,1.6088925970019772,1.6725542000494897,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",1000,0.007240999955683947,0.0077265760069713,0.009097399888560176,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",10000,0.11227379995398223,0.1173317249934189,0.1280100999865681,N/A
p3_find_n_smallest_number,prompt_1,47,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",100000,1.5748933001887053,1.6002697190083564,1.6425565001554787,N/A
p3_find_n_smallest_number,prompt_1,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for _, index in smallest_elements]']",1000,0.004520399961620569,0.004817037978209555,0.005599600030109286,N/A
p3_find_n_smallest_number,prompt_1,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for _, index in smallest_elements]']",10000,0.04306990001350641,0.04466145901475102,0.05110769998282194,N/A
p3_find_n_smallest_number,prompt_1,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for _, index in smallest_elements]']",100000,0.41434599994681776,0.4248230589833111,0.4458739999681711,N/A
p3_find_n_smallest_number,prompt_1,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (arg1[i], i))\n    indexes = []\n    for _ in range(min(arg2, len(min_heap))):\n        indexes.append(heapq.heappop(min_heap)[1])\n    return indexes']",1000,0.007147499825805426,0.0077247629896737635,0.009694400010630488,N/A
p3_find_n_smallest_number,prompt_1,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (arg1[i], i))\n    indexes = []\n    for _ in range(min(arg2, len(min_heap))):\n        indexes.append(heapq.heappop(min_heap)[1])\n    return indexes']",10000,0.08107300009578466,0.08515811999561265,0.09539400017820299,N/A
p3_find_n_smallest_number,prompt_1,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (arg1[i], i))\n    indexes = []\n    for _ in range(min(arg2, len(min_heap))):\n        indexes.append(heapq.heappop(min_heap)[1])\n    return indexes']",100000,0.9358737000729889,0.9504499009950087,0.9830355998128653,N/A
p3_find_n_smallest_number,prompt_1,50,"[""def funcImp(arg1, arg2):\n    assert arg2 <= len(arg1), 'arg2 cannot be greater than the length of arg1'\n    result = sorted([(num, idx) for idx, num in enumerate(arg1)])[:arg2]\n    return result""]",1000,0.011774300131946802,0.01253828699933365,0.01838229992426932,N/A
p3_find_n_smallest_number,prompt_1,50,"[""def funcImp(arg1, arg2):\n    assert arg2 <= len(arg1), 'arg2 cannot be greater than the length of arg1'\n    result = sorted([(num, idx) for idx, num in enumerate(arg1)])[:arg2]\n    return result""]",10000,0.1828215999994427,0.18858824299881236,0.20209200005047023,N/A
p3_find_n_smallest_number,prompt_1,50,"[""def funcImp(arg1, arg2):\n    assert arg2 <= len(arg1), 'arg2 cannot be greater than the length of arg1'\n    result = sorted([(num, idx) for idx, num in enumerate(arg1)])[:arg2]\n    return result""]",100000,2.8514120001345873,2.894986021993682,2.9561229997780174,N/A
p3_find_n_smallest_number,prompt_1,51,"['import heapq\n\ndef funcImp(arg1: list, arg2: int) -> list:\n    if len(arg1) < arg2:\n        return list(range(len(arg1)))\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, val in smallest_nums]\n    return indexes']",1000,0.004637100035324693,0.004883724986575544,0.006722999969497323,N/A
p3_find_n_smallest_number,prompt_1,51,"['import heapq\n\ndef funcImp(arg1: list, arg2: int) -> list:\n    if len(arg1) < arg2:\n        return list(range(len(arg1)))\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, val in smallest_nums]\n    return indexes']",10000,0.0427324001211673,0.04522584898397326,0.05657459981739521,N/A
p3_find_n_smallest_number,prompt_1,51,"['import heapq\n\ndef funcImp(arg1: list, arg2: int) -> list:\n    if len(arg1) < arg2:\n        return list(range(len(arg1)))\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, val in smallest_nums]\n    return indexes']",100000,0.41652109986171126,0.4244396319799125,0.4487458001822233,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007266700034961104,0.007959394021891058,0.012623100075870752,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.11071679997257888,0.11491901300149038,0.12585419998504221,N/A
p3_find_n_smallest_number,prompt_1,52,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.6055213001091033,1.6213898690068163,1.6610475999768823,N/A
p3_find_n_smallest_number,prompt_1,53,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    temp = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return temp[:arg2]']",1000,0.0074056999292224646,0.0079087789892219,0.013527599861845374,N/A
p3_find_n_smallest_number,prompt_1,53,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    temp = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return temp[:arg2]']",10000,0.1104523001704365,0.11339254801627248,0.12116310000419617,N/A
p3_find_n_smallest_number,prompt_1,53,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    temp = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return temp[:arg2]']",100000,1.6000983000267297,1.617853482987266,1.6668061001691967,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007360400166362524,0.007806525018531829,0.010663999943062663,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11558810016140342,0.11853088399395346,0.13428439991548657,N/A
p3_find_n_smallest_number,prompt_1,54,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.6090462000574917,1.6330049100052566,1.682888399809599,N/A
p3_find_n_smallest_number,prompt_1,55,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input. Argument 2 cannot be larger than the length of list in Argument 1'\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]""]",1000,0.007422500057145953,0.00826315099839121,0.014824599958956242,N/A
p3_find_n_smallest_number,prompt_1,55,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input. Argument 2 cannot be larger than the length of list in Argument 1'\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]""]",10000,0.11047780001536012,0.11328515799716116,0.12003210000693798,N/A
p3_find_n_smallest_number,prompt_1,55,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid input. Argument 2 cannot be larger than the length of list in Argument 1'\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]""]",100000,1.6025453000329435,1.619560209007468,1.6653440999798477,N/A
p3_find_n_smallest_number,prompt_1,56,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return sorted(indexes)']",1000,0.0047247998882085085,0.004874600004404784,0.00596830016002059,N/A
p3_find_n_smallest_number,prompt_1,56,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return sorted(indexes)']",10000,0.04354829993098974,0.045622430990915744,0.061013099970296025,N/A
p3_find_n_smallest_number,prompt_1,56,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    import heapq\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return sorted(indexes)']",100000,0.42160840006545186,0.42968477699905633,0.44180979998782277,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(num_list, k):\n    if not num_list or k <= 0:\n        return []\n    tuple_list = [(value, index) for index, value in enumerate(num_list)]\n    tuple_list.sort()\n    return [index for _, index in tuple_list[:k]]']",1000,0.011702100047841668,0.012334425984881818,0.017071699956431985,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(num_list, k):\n    if not num_list or k <= 0:\n        return []\n    tuple_list = [(value, index) for index, value in enumerate(num_list)]\n    tuple_list.sort()\n    return [index for _, index in tuple_list[:k]]']",10000,0.18224869994446635,0.1870773490029387,0.21772370021790266,N/A
p3_find_n_smallest_number,prompt_1,57,"['def funcImp(num_list, k):\n    if not num_list or k <= 0:\n        return []\n    tuple_list = [(value, index) for index, value in enumerate(num_list)]\n    tuple_list.sort()\n    return [index for _, index in tuple_list[:k]]']",100000,2.7950536001008004,2.8425350159965457,2.9332866000477225,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",1000,0.005723099922761321,0.005971493998076767,0.006586099974811077,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",10000,0.0937231001444161,0.09667522800853476,0.11390820005908608,N/A
p3_find_n_smallest_number,prompt_1,58,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",100000,1.4231968000531197,1.4439773969957606,1.4945255999919027,N/A
p3_find_n_smallest_number,prompt_1,59,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 0:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",1000,0.007385600125417113,0.007728971997275949,0.010784100042656064,N/A
p3_find_n_smallest_number,prompt_1,59,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 0:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",10000,0.11132710007950664,0.11428483801428228,0.13252080022357404,N/A
p3_find_n_smallest_number,prompt_1,59,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 0:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]']",100000,1.5929707000032067,1.622387796996627,1.7801501001231372,N/A
p3_find_n_smallest_number,prompt_1,60,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not all((isinstance(i, int) for i in arg1)) or not isinstance(arg2, int):\n        raise ValueError(\'Arguments are not of the correct types.\')\n    if arg2 < 1 or arg2 > len(arg1):\n        raise ValueError(\'""arg2"" is out of range.\')\n    indexed_values = sorted(((value, index) for index, value in enumerate(arg1)))\n    smallest_indexes = [index for value, index in indexed_values[:arg2]]\n    return smallest_indexes']",1000,0.015594699885696173,0.017256208001635968,0.026755800005048513,N/A
p3_find_n_smallest_number,prompt_1,60,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not all((isinstance(i, int) for i in arg1)) or not isinstance(arg2, int):\n        raise ValueError(\'Arguments are not of the correct types.\')\n    if arg2 < 1 or arg2 > len(arg1):\n        raise ValueError(\'""arg2"" is out of range.\')\n    indexed_values = sorted(((value, index) for index, value in enumerate(arg1)))\n    smallest_indexes = [index for value, index in indexed_values[:arg2]]\n    return smallest_indexes']",10000,0.2208831999450922,0.2257335399952717,0.236488499911502,N/A
p3_find_n_smallest_number,prompt_1,60,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not all((isinstance(i, int) for i in arg1)) or not isinstance(arg2, int):\n        raise ValueError(\'Arguments are not of the correct types.\')\n    if arg2 < 1 or arg2 > len(arg1):\n        raise ValueError(\'""arg2"" is out of range.\')\n    indexed_values = sorted(((value, index) for index, value in enumerate(arg1)))\n    smallest_indexes = [index for value, index in indexed_values[:arg2]]\n    return smallest_indexes']",100000,3.2579733999446034,3.4589300100156106,3.874733100179583,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    numbers_with_indices = list(enumerate(arg1))\n    numbers_with_indices.sort(key=lambda x: x[1])\n    return [idx for idx, _ in numbers_with_indices[:arg2]]']",1000,0.008238499984145164,0.00903823402011767,0.014817000133916736,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    numbers_with_indices = list(enumerate(arg1))\n    numbers_with_indices.sort(key=lambda x: x[1])\n    return [idx for idx, _ in numbers_with_indices[:arg2]]']",10000,0.13812340004369617,0.14236490001901983,0.14927930012345314,N/A
p3_find_n_smallest_number,prompt_1,61,"['def funcImp(arg1, arg2):\n    numbers_with_indices = list(enumerate(arg1))\n    numbers_with_indices.sort(key=lambda x: x[1])\n    return [idx for idx, _ in numbers_with_indices[:arg2]]']",100000,2.096653399989009,2.1422607339988464,2.3344900999218225,N/A
p3_find_n_smallest_number,prompt_1,62,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.00475119985640049,0.005029980991967022,0.011236000107601285,N/A
p3_find_n_smallest_number,prompt_1,62,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.042445699917152524,0.04549693101085722,0.06026439997367561,N/A
p3_find_n_smallest_number,prompt_1,62,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4174989000894129,0.430040558995679,0.47937100008130074,N/A
p3_find_n_smallest_number,prompt_1,63,"[""def funcImp(arg1, arg2):\n    if not 0 < arg2 <= len(arg1):\n        return 'Error: Invalid k value'\n    sorted_indices = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indices[:arg2]""]",1000,0.005522500025108457,0.006151622994802892,0.00970020005479455,N/A
p3_find_n_smallest_number,prompt_1,63,"[""def funcImp(arg1, arg2):\n    if not 0 < arg2 <= len(arg1):\n        return 'Error: Invalid k value'\n    sorted_indices = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indices[:arg2]""]",10000,0.0925014999229461,0.0960205180104822,0.10879510012455285,N/A
p3_find_n_smallest_number,prompt_1,63,"[""def funcImp(arg1, arg2):\n    if not 0 < arg2 <= len(arg1):\n        return 'Error: Invalid k value'\n    sorted_indices = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indices[:arg2]""]",100000,1.4271647999994457,1.4527264940156601,1.5836497999262065,N/A
p3_find_n_smallest_number,prompt_1,64,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not (isinstance(arg1, list) and all((isinstance(i, int) for i in arg1))):\n        raise ValueError('arg1 should be a list of integers')\n    if not (isinstance(arg2, int) and arg2 > 0):\n        raise ValueError('arg2 should be a positive integer')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    indexed_arg1 = list(enumerate(arg1))\n    heap = indexed_arg1[:arg2]\n    heapq.heapify(heap)\n    for index in range(arg2, len(indexed_arg1)):\n        if indexed_arg1[index][1] < heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, indexed_arg1[index])\n    sorted_indexes = [index for index, _ in sorted(heap, key=lambda x: x[1])]\n    return sorted_indexes""]",1000,0.007040699943900108,0.00763939400203526,0.01141740009188652,N/A
p3_find_n_smallest_number,prompt_1,64,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not (isinstance(arg1, list) and all((isinstance(i, int) for i in arg1))):\n        raise ValueError('arg1 should be a list of integers')\n    if not (isinstance(arg2, int) and arg2 > 0):\n        raise ValueError('arg2 should be a positive integer')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    indexed_arg1 = list(enumerate(arg1))\n    heap = indexed_arg1[:arg2]\n    heapq.heapify(heap)\n    for index in range(arg2, len(indexed_arg1)):\n        if indexed_arg1[index][1] < heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, indexed_arg1[index])\n    sorted_indexes = [index for index, _ in sorted(heap, key=lambda x: x[1])]\n    return sorted_indexes""]",10000,0.07514069997705519,0.07775237000081688,0.09197430009953678,N/A
p3_find_n_smallest_number,prompt_1,64,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not (isinstance(arg1, list) and all((isinstance(i, int) for i in arg1))):\n        raise ValueError('arg1 should be a list of integers')\n    if not (isinstance(arg2, int) and arg2 > 0):\n        raise ValueError('arg2 should be a positive integer')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    indexed_arg1 = list(enumerate(arg1))\n    heap = indexed_arg1[:arg2]\n    heapq.heapify(heap)\n    for index in range(arg2, len(indexed_arg1)):\n        if indexed_arg1[index][1] < heap[0][1]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, indexed_arg1[index])\n    sorted_indexes = [index for index, _ in sorted(heap, key=lambda x: x[1])]\n    return sorted_indexes""]",100000,0.93863490014337,0.9686322720116004,1.0165206000674516,N/A
p3_find_n_smallest_number,prompt_1,65,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise Exception('Second argument is bigger than the size of the array')\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    return [i[0] for i in sorted_list[:arg2]]""]",1000,0.008615300059318542,0.008999099982902407,0.010824100114405155,N/A
p3_find_n_smallest_number,prompt_1,65,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise Exception('Second argument is bigger than the size of the array')\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    return [i[0] for i in sorted_list[:arg2]]""]",10000,0.14229790004901588,0.14546611800557002,0.15806189994327724,N/A
p3_find_n_smallest_number,prompt_1,65,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise Exception('Second argument is bigger than the size of the array')\n    indexed_list = list(enumerate(arg1))\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    return [i[0] for i in sorted_list[:arg2]]""]",100000,2.1381995000410825,2.1604281019954943,2.2389942998997867,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1: list, arg2: int) -> list:\n    element_index_pairs = [(element, index) for index, element in enumerate(arg1)]\n    sorted_element_index_pairs = sorted(element_index_pairs, key=lambda x: x[0])\n    result = [index for element, index in sorted_element_index_pairs[:arg2]]\n    return result']",1000,0.009899500058963895,0.010447385997977107,0.013186500174924731,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1: list, arg2: int) -> list:\n    element_index_pairs = [(element, index) for index, element in enumerate(arg1)]\n    sorted_element_index_pairs = sorted(element_index_pairs, key=lambda x: x[0])\n    result = [index for element, index in sorted_element_index_pairs[:arg2]]\n    return result']",10000,0.15774590009823442,0.1612626289925538,0.1665042000822723,N/A
p3_find_n_smallest_number,prompt_1,66,"['def funcImp(arg1: list, arg2: int) -> list:\n    element_index_pairs = [(element, index) for index, element in enumerate(arg1)]\n    sorted_element_index_pairs = sorted(element_index_pairs, key=lambda x: x[0])\n    result = [index for element, index in sorted_element_index_pairs[:arg2]]\n    return result']",100000,2.2730791000649333,2.2996979839913547,2.3529500998556614,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1: list, arg2: int) -> list:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",1000,0.005515800090506673,0.005989146998617798,0.008854500018060207,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1: list, arg2: int) -> list:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",10000,0.09341400000266731,0.09640665799845011,0.11118999985046685,N/A
p3_find_n_smallest_number,prompt_1,67,"['def funcImp(arg1: list, arg2: int) -> list:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",100000,1.4218982001766562,1.4375285249948502,1.4846276000607759,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = list(enumerate(arg1))\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[1])\n    smallest_indexes = [idx for idx, val in sorted_indexed_list[:arg2]]\n    return smallest_indexes']",1000,0.008597899926826358,0.009103609991725534,0.011481799883767962,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = list(enumerate(arg1))\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[1])\n    smallest_indexes = [idx for idx, val in sorted_indexed_list[:arg2]]\n    return smallest_indexes']",10000,0.13906419998966157,0.14320999200455845,0.14694959996268153,N/A
p3_find_n_smallest_number,prompt_1,68,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = list(enumerate(arg1))\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[1])\n    smallest_indexes = [idx for idx, val in sorted_indexed_list[:arg2]]\n    return smallest_indexes']",100000,2.1495775000657886,2.1991029079817235,2.303471499821171,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.00747139984741807,0.007914361997973175,0.00983790005557239,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.10984120005741715,0.11380345500772819,0.12854289985261858,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.600225399946794,1.6580407049925998,1.7221045999322087,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",1000,0.007577900076285005,0.008499417989514767,0.015713199973106384,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",10000,0.11391840013675392,0.11999606300378218,0.14620260009542108,N/A
p3_find_n_smallest_number,prompt_1,70,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",100000,1.6072734999470413,1.657596782981418,1.7206818000413477,N/A
p3_find_n_smallest_number,prompt_1,71,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",1000,0.0072095999494194984,0.007770182990934699,0.009874500101432204,N/A
p3_find_n_smallest_number,prompt_1,71,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",10000,0.11101699993014336,0.11668702098540962,0.15195360011421144,N/A
p3_find_n_smallest_number,prompt_1,71,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",100000,1.6151099000126123,1.6922512490185908,1.9303518999367952,N/A
p3_find_n_smallest_number,prompt_1,72,"['def funcImp(arg1: list, arg2: int) -> list:\n    indexed_list = [(number, index) for index, number in enumerate(arg1)]\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[0])\n    smallest_nums_indices = [index for number, index in sorted_indexed_list[:arg2]]\n    return smallest_nums_indices']",1000,0.009998499881476164,0.011490322989411652,0.031436100136488676,N/A
p3_find_n_smallest_number,prompt_1,72,"['def funcImp(arg1: list, arg2: int) -> list:\n    indexed_list = [(number, index) for index, number in enumerate(arg1)]\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[0])\n    smallest_nums_indices = [index for number, index in sorted_indexed_list[:arg2]]\n    return smallest_nums_indices']",10000,0.1537381000816822,0.15783960800385102,0.16581090004183352,N/A
p3_find_n_smallest_number,prompt_1,72,"['def funcImp(arg1: list, arg2: int) -> list:\n    indexed_list = [(number, index) for index, number in enumerate(arg1)]\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[0])\n    smallest_nums_indices = [index for number, index in sorted_indexed_list[:arg2]]\n    return smallest_nums_indices']",100000,2.3037610999308527,2.3787417630082928,2.531702700071037,N/A
p3_find_n_smallest_number,prompt_1,73,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'arg2 must be less than or equal to length of arg1'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",1000,0.003306400030851364,0.0034080659970641136,0.004638299811631441,N/A
p3_find_n_smallest_number,prompt_1,73,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'arg2 must be less than or equal to length of arg1'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",10000,0.02947810012847185,0.030950272993650288,0.03831019997596741,N/A
p3_find_n_smallest_number,prompt_1,73,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'arg2 must be less than or equal to length of arg1'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",100000,0.29185270005837083,0.3059069069987163,0.340187800116837,N/A
p3_find_n_smallest_number,prompt_1,74,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: Invalid Input'\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]""]",1000,0.007451700046658516,0.0083905380172655,0.014428699854761362,N/A
p3_find_n_smallest_number,prompt_1,74,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: Invalid Input'\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]""]",10000,0.11291959998197854,0.12054505900247023,0.14119190000928938,N/A
p3_find_n_smallest_number,prompt_1,74,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: Invalid Input'\n    sorted_indices = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indices[:arg2]""]",100000,1.5792998999822885,1.653437746015843,1.7838425999507308,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007070600055158138,0.007719316992443055,0.009612600086256862,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.10988730005919933,0.11472817801404744,0.1303975998889655,N/A
p3_find_n_smallest_number,prompt_1,75,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.58874769997783,1.6094770059874282,1.6558007998391986,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for _, index in sorted_list[:arg2]]']",1000,0.011819900013506413,0.012691522995010019,0.015757400076836348,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for _, index in sorted_list[:arg2]]']",10000,0.17864219984039664,0.18423171300441027,0.1995260000694543,N/A
p3_find_n_smallest_number,prompt_1,76,"['def funcImp(arg1, arg2):\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for _, index in sorted_list[:arg2]]']",100000,2.813649399904534,3.0232272310042756,5.932233500061557,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    return sorted(sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2])']",1000,0.00716919987462461,0.007684400004800409,0.010265599936246872,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    return sorted(sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2])']",10000,0.11352270003408194,0.11679833699483425,0.1355085999239236,N/A
p3_find_n_smallest_number,prompt_1,77,"['def funcImp(arg1, arg2):\n    return sorted(sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2])']",100000,1.588093200000003,1.6104639670113101,1.6699133000802249,N/A
p3_find_n_smallest_number,prompt_1,78,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    if arg2 > len(arg1):\n        return sorted_indices\n    else:\n        return sorted_indices[:arg2]']",1000,0.007244599983096123,0.00794998400611803,0.013098299968987703,N/A
p3_find_n_smallest_number,prompt_1,78,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    if arg2 > len(arg1):\n        return sorted_indices\n    else:\n        return sorted_indices[:arg2]']",10000,0.11026159999892116,0.1133097569970414,0.12380889989435673,N/A
p3_find_n_smallest_number,prompt_1,78,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    if arg2 > len(arg1):\n        return sorted_indices\n    else:\n        return sorted_indices[:arg2]']",100000,1.5745135000906885,1.5937553000147455,1.634955600136891,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",1000,0.008479699958115816,0.009014613013714552,0.010899899993091822,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",10000,0.13928140001371503,0.1437857680185698,0.16700480016879737,N/A
p3_find_n_smallest_number,prompt_1,79,"['def funcImp(arg1, arg2):\n    return [i[0] for i in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",100000,2.0677340999245644,2.098843329004012,2.25469240010716,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the input list.""\n    indexed_list = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [sorted_indexed_list[i][1] for i in range(arg2)]\n    return k_smallest_indices']",1000,0.009564999956637621,0.010360323006752879,0.014145599910989404,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the input list.""\n    indexed_list = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [sorted_indexed_list[i][1] for i in range(arg2)]\n    return k_smallest_indices']",10000,0.14902259991504252,0.1534199110022746,0.16022180020809174,N/A
p3_find_n_smallest_number,prompt_1,80,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the input list.""\n    indexed_list = [(arg1[i], i) for i in range(len(arg1))]\n    sorted_indexed_list = sorted(indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [sorted_indexed_list[i][1] for i in range(arg2)]\n    return k_smallest_indices']",100000,2.232744700042531,2.2671226109936833,2.340283300029114,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.0072425000835210085,0.008228517002426088,0.014016400091350079,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11021380010060966,0.11398880800465122,0.12254299991764128,N/A
p3_find_n_smallest_number,prompt_1,81,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.599974300013855,1.6220485759922303,1.6826868001371622,N/A
p3_find_n_smallest_number,prompt_1,82,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.00461359997279942,0.004925150999333709,0.006969499867409468,N/A
p3_find_n_smallest_number,prompt_1,82,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.0431965000461787,0.04533304698066786,0.055716499919071794,N/A
p3_find_n_smallest_number,prompt_1,82,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4204380000010133,0.4284161029895768,0.4440391999669373,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",1000,0.0056404999922961,0.006029885003808886,0.009170399978756905,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",10000,0.09471970004960895,0.09776270298985765,0.10379559989087284,N/A
p3_find_n_smallest_number,prompt_1,83,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",100000,1.4033202999271452,1.4276687810034492,1.4689003999810666,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than array length.""\n    tuples_list = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_tuples = sorted(tuples_list)\n    indices = [index for val, index in sorted_tuples[:arg2]]\n    return indices']",1000,0.011720699956640601,0.013094006988685578,0.026915800059214234,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than array length.""\n    tuples_list = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_tuples = sorted(tuples_list)\n    indices = [index for val, index in sorted_tuples[:arg2]]\n    return indices']",10000,0.18124070018529892,0.18439820502419024,0.18970300001092255,N/A
p3_find_n_smallest_number,prompt_1,84,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than array length.""\n    tuples_list = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_tuples = sorted(tuples_list)\n    indices = [index for val, index in sorted_tuples[:arg2]]\n    return indices']",100000,2.8540952000766993,2.9155595519952477,2.9951704000122845,N/A
p3_find_n_smallest_number,prompt_1,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    neg_numbers = [(-num, i) for i, num in enumerate(arg1)]\n    maxheap = []\n    for i in range(arg2):\n        heapq.heappush(maxheap, neg_numbers[i])\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > maxheap[0][0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap, neg_numbers[i])\n    indices = [i[1] for i in maxheap]\n    return indices']",1000,0.006591300014406443,0.0070202670129947365,0.0086729999165982,N/A
p3_find_n_smallest_number,prompt_1,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    neg_numbers = [(-num, i) for i, num in enumerate(arg1)]\n    maxheap = []\n    for i in range(arg2):\n        heapq.heappush(maxheap, neg_numbers[i])\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > maxheap[0][0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap, neg_numbers[i])\n    indices = [i[1] for i in maxheap]\n    return indices']",10000,0.06992739997804165,0.07282207099022343,0.096807099878788,N/A
p3_find_n_smallest_number,prompt_1,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    neg_numbers = [(-num, i) for i, num in enumerate(arg1)]\n    maxheap = []\n    for i in range(arg2):\n        heapq.heappush(maxheap, neg_numbers[i])\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > maxheap[0][0]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap, neg_numbers[i])\n    indices = [i[1] for i in maxheap]\n    return indices']",100000,0.968008300056681,0.9864863830013201,1.0214571000542492,N/A
p3_find_n_smallest_number,prompt_1,86,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007292099995538592,0.00814952200744301,0.011778899934142828,N/A
p3_find_n_smallest_number,prompt_1,86,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.11051460006274283,0.11254843100905418,0.11649519996717572,N/A
p3_find_n_smallest_number,prompt_1,86,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.5898416000418365,1.6202945789974184,1.6875849000643939,N/A
p3_find_n_smallest_number,prompt_1,87,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005191100062802434,0.005597906007897109,0.008995600044727325,N/A
p3_find_n_smallest_number,prompt_1,87,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06606680015102029,0.06775313999038189,0.06959480000659823,N/A
p3_find_n_smallest_number,prompt_1,87,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7374392999336123,0.7466103209881112,0.7839860999956727,N/A
p3_find_n_smallest_number,prompt_1,88,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_heap = [(-value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    results = []\n    for _ in range(min(arg2, len(arg1))):\n        value, i = heapq.heappop(min_heap)\n        results.append(i)\n    return results']",1000,0.0060523999854922295,0.006343672000803054,0.008728299988433719,N/A
p3_find_n_smallest_number,prompt_1,88,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_heap = [(-value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    results = []\n    for _ in range(min(arg2, len(arg1))):\n        value, i = heapq.heappop(min_heap)\n        results.append(i)\n    return results']",10000,0.07848230004310608,0.08005639302311465,0.09052530000917614,N/A
p3_find_n_smallest_number,prompt_1,88,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_heap = [(-value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    results = []\n    for _ in range(min(arg2, len(arg1))):\n        value, i = heapq.heappop(min_heap)\n        results.append(i)\n    return results']",100000,0.8501541998703033,0.8614443139964715,0.9050906000193208,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.0072008001152426004,0.007873598004225641,0.012028499972075224,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11044880002737045,0.11378250301117078,0.11872330005280674,N/A
p3_find_n_smallest_number,prompt_1,89,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.5988145000301301,1.6293056700169108,1.6779767000116408,N/A
p3_find_n_smallest_number,prompt_1,90,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",1000,0.007370800012722611,0.0077024220069870355,0.010426599998027086,N/A
p3_find_n_smallest_number,prompt_1,90,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",10000,0.11115699983201921,0.1143660289910622,0.12436680006794631,N/A
p3_find_n_smallest_number,prompt_1,90,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted(range(len(arg1)), key=lambda k: arg1[k])[:arg2]']",100000,1.5995130999945104,1.619641509989742,1.6645428999327123,N/A
p3_find_n_smallest_number,prompt_1,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",1000,0.0023886999115347862,0.002570840991102159,0.003381999908015132,N/A
p3_find_n_smallest_number,prompt_1,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",10000,0.024046400096267462,0.02562689399346709,0.03567949985153973,N/A
p3_find_n_smallest_number,prompt_1,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",100000,0.24428489990532398,0.25097167301224543,0.29445770010352135,N/A
p3_find_n_smallest_number,prompt_1,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [i for _, i in heap]\n    return indexes']",1000,0.0026546998415142298,0.0028244549967348575,0.0031695999205112457,N/A
p3_find_n_smallest_number,prompt_1,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [i for _, i in heap]\n    return indexes']",10000,0.025913399877026677,0.02740113001316786,0.04175589978694916,N/A
p3_find_n_smallest_number,prompt_1,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indexes = [i for _, i in heap]\n    return indexes']",100000,0.25684150005690753,0.2644625720148906,0.3128810999915004,N/A
p3_find_n_smallest_number,prompt_1,93,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, num in smallest_nums]\n    return indices']",1000,0.004579200176522136,0.004866766009945423,0.005347499856725335,N/A
p3_find_n_smallest_number,prompt_1,93,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, num in smallest_nums]\n    return indices']",10000,0.04318849998526275,0.04542101001366973,0.08917350019328296,N/A
p3_find_n_smallest_number,prompt_1,93,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, num in smallest_nums]\n    return indices']",100000,0.41283400007523596,0.42690992102492603,0.48406309983693063,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007521900115534663,0.007824724006932229,0.011058300035074353,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.11138370004482567,0.1146261809905991,0.12240869994275272,N/A
p3_find_n_smallest_number,prompt_1,94,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.5983378000091761,1.63509610400768,1.7347107999958098,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    value_indexed = [(value, index) for index, value in enumerate(arg1)]\n    sorted_indexed = sorted(value_indexed, key=lambda x: x[0])\n    smallest_k_indices = [index for value, index in sorted_indexed[:arg2]]\n    return smallest_k_indices']",1000,0.00964939990080893,0.010289173990022391,0.013151099905371666,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    value_indexed = [(value, index) for index, value in enumerate(arg1)]\n    sorted_indexed = sorted(value_indexed, key=lambda x: x[0])\n    smallest_k_indices = [index for value, index in sorted_indexed[:arg2]]\n    return smallest_k_indices']",10000,0.1571212001144886,0.15995520199183375,0.17660739994607866,N/A
p3_find_n_smallest_number,prompt_1,95,"['def funcImp(arg1, arg2):\n    value_indexed = [(value, index) for index, value in enumerate(arg1)]\n    sorted_indexed = sorted(value_indexed, key=lambda x: x[0])\n    smallest_k_indices = [index for value, index in sorted_indexed[:arg2]]\n    return smallest_k_indices']",100000,2.2638608999550343,2.3112262690020726,2.4320282998960465,N/A
p3_find_n_smallest_number,prompt_1,96,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1) or arg2 <= 0:\n        return []\n    arg_copy = arg1[:]\n    arg_copy.sort()\n    smallest_elements = arg_copy[:arg2]\n    indexes = [arg1.index(element) for element in smallest_elements]\n    return indexes']",1000,0.0041877999901771545,0.004797999996226281,0.014177999924868345,N/A
p3_find_n_smallest_number,prompt_1,96,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1) or arg2 <= 0:\n        return []\n    arg_copy = arg1[:]\n    arg_copy.sort()\n    smallest_elements = arg_copy[:arg2]\n    indexes = [arg1.index(element) for element in smallest_elements]\n    return indexes']",10000,0.08718050015158951,0.09096745099406689,0.16386090009473264,N/A
p3_find_n_smallest_number,prompt_1,96,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1) or arg2 <= 0:\n        return []\n    arg_copy = arg1[:]\n    arg_copy.sort()\n    smallest_elements = arg_copy[:arg2]\n    indexes = [arg1.index(element) for element in smallest_elements]\n    return indexes']",100000,1.1046390999108553,1.118754612999037,1.19261149992235,N/A
p3_find_n_smallest_number,prompt_1,97,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return sorted([-heap[i][1] for i in range(len(heap))])']",1000,0.006972800008952618,0.0071220749942585825,0.007458200212568045,N/A
p3_find_n_smallest_number,prompt_1,97,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return sorted([-heap[i][1] for i in range(len(heap))])']",10000,0.06722339987754822,0.06922542701475322,0.07600419991649687,N/A
p3_find_n_smallest_number,prompt_1,97,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return sorted([-heap[i][1] for i in range(len(heap))])']",100000,0.6777488000225276,0.6893207510188222,0.7927349000237882,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    if arg2 > len(arg1):\n        return sorted_indexes\n    else:\n        return sorted_indexes[:arg2]']",1000,0.005457299994304776,0.005810996980872005,0.006695599993690848,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    if arg2 > len(arg1):\n        return sorted_indexes\n    else:\n        return sorted_indexes[:arg2]']",10000,0.09340260014869273,0.09570259300759063,0.10947080003097653,N/A
p3_find_n_smallest_number,prompt_1,98,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    if arg2 > len(arg1):\n        return sorted_indexes\n    else:\n        return sorted_indexes[:arg2]']",100000,1.4121809999924153,1.4715449079871177,1.6605462001170963,N/A
p3_find_n_smallest_number,prompt_1,99,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if not arg1 or arg2 > len(arg1):\n        return []\n    nums_with_idxs = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, nums_with_idxs)\n    return [idx for _, idx in smallest_nums]']",1000,0.005351899890229106,0.005687788010109216,0.007228899979963899,N/A
p3_find_n_smallest_number,prompt_1,99,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if not arg1 or arg2 > len(arg1):\n        return []\n    nums_with_idxs = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, nums_with_idxs)\n    return [idx for _, idx in smallest_nums]']",10000,0.05317500000819564,0.055620886003598574,0.07188419997692108,N/A
p3_find_n_smallest_number,prompt_1,99,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if not arg1 or arg2 > len(arg1):\n        return []\n    nums_with_idxs = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, nums_with_idxs)\n    return [idx for _, idx in smallest_nums]']",100000,0.6869880999438465,0.7282335210056045,0.8351590000092983,N/A
p3_find_n_smallest_number,prompt_1,100,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",1000,0.005658699898049235,0.006055338988080621,0.01038610003888607,N/A
p3_find_n_smallest_number,prompt_1,100,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",10000,0.09363340004347265,0.09827650398947299,0.19490219978615642,N/A
p3_find_n_smallest_number,prompt_1,100,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=arg1.__getitem__)\n    return sorted_indexes[:arg2]']",100000,1.4297048000153154,1.5148215629998594,1.705100900027901,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004656099947169423,0.004915299983695149,0.007639799965545535,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.042925499845296144,0.04510762100107968,0.05895370012149215,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4192622001282871,0.43299676801310855,0.4788686998654157,N/A
p3_find_n_smallest_number,prompt_2,2,"['from typing import List\nimport numpy as np\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return list(np.argsort(arg1)[:arg2])']",1000,0.0032223998568952084,0.0034655569982714953,0.004987500142306089,N/A
p3_find_n_smallest_number,prompt_2,2,"['from typing import List\nimport numpy as np\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return list(np.argsort(arg1)[:arg2])']",10000,0.05937329982407391,0.06175786300096661,0.0977547001093626,N/A
p3_find_n_smallest_number,prompt_2,2,"['from typing import List\nimport numpy as np\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return list(np.argsort(arg1)[:arg2])']",100000,0.6936856999527663,0.711013523992151,0.8056842000223696,N/A
p3_find_n_smallest_number,prompt_2,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_nums)\n    result = []\n    for _ in range(arg2):\n        min_item = heapq.heappop(indexed_nums)\n        result.append(min_item[1])\n    return result']",1000,0.005179199855774641,0.00594518699683249,0.018191699869930744,N/A
p3_find_n_smallest_number,prompt_2,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_nums)\n    result = []\n    for _ in range(arg2):\n        min_item = heapq.heappop(indexed_nums)\n        result.append(min_item[1])\n    return result']",10000,0.06374259991571307,0.06779639500193298,0.10363689996302128,N/A
p3_find_n_smallest_number,prompt_2,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_nums)\n    result = []\n    for _ in range(arg2):\n        min_item = heapq.heappop(indexed_nums)\n        result.append(min_item[1])\n    return result']",100000,0.7869283000472933,0.8019998499983921,0.8953875000588596,N/A
p3_find_n_smallest_number,prompt_2,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.004447000101208687,0.004726061001420021,0.00702890008687973,N/A
p3_find_n_smallest_number,prompt_2,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.04257269995287061,0.04459040701389313,0.05245180008932948,N/A
p3_find_n_smallest_number,prompt_2,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.43672720016911626,0.44990058201365174,0.5498811998404562,N/A
p3_find_n_smallest_number,prompt_2,5,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    max_heap = [(-value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[index]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[index], index))\n    smallest_indexes_result = [heap_element[1] for heap_element in max_heap]\n    return smallest_indexes_result']",1000,0.002900599967688322,0.003092681006528437,0.003454799996688962,N/A
p3_find_n_smallest_number,prompt_2,5,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    max_heap = [(-value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[index]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[index], index))\n    smallest_indexes_result = [heap_element[1] for heap_element in max_heap]\n    return smallest_indexes_result']",10000,0.026476799976080656,0.02779050000477582,0.037521299906075,N/A
p3_find_n_smallest_number,prompt_2,5,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    max_heap = [(-value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[index]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[index], index))\n    smallest_indexes_result = [heap_element[1] for heap_element in max_heap]\n    return smallest_indexes_result']",100000,0.26346429996192455,0.2728573269979097,0.3545794999226928,N/A
p3_find_n_smallest_number,prompt_2,6,"['import heapq\n\ndef funcImp(arg1: list, arg2: int) -> list:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.003152199788019061,0.003403702999930829,0.004770700121298432,N/A
p3_find_n_smallest_number,prompt_2,6,"['import heapq\n\ndef funcImp(arg1: list, arg2: int) -> list:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.028744200011715293,0.03046477901050821,0.04181240010075271,N/A
p3_find_n_smallest_number,prompt_2,6,"['import heapq\n\ndef funcImp(arg1: list, arg2: int) -> list:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29212559992447495,0.2998777429945767,0.37860239995643497,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    arg1 = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(arg1)\n    while len(arg1) > arg2:\n        heapq.heappop(arg1)\n    return sorted([i for num, i in arg1])']",1000,0.022995299892500043,0.02429216601187363,0.029960900079458952,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    arg1 = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(arg1)\n    while len(arg1) > arg2:\n        heapq.heappop(arg1)\n    return sorted([i for num, i in arg1])']",10000,0.3312200999353081,0.3413984340033494,0.4040339000057429,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    arg1 = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(arg1)\n    while len(arg1) > arg2:\n        heapq.heappop(arg1)\n    return sorted([i for num, i in arg1])']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,8,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    queue = []\n    for i in range(len(arg1)):\n        if len(queue) < arg2:\n            heapq.heappush(queue, (-arg1[i], i))\n        elif -queue[0][0] > arg1[i]:\n            heapq.heappop(queue)\n            heapq.heappush(queue, (-arg1[i], i))\n    return sorted((idx for val, idx in queue))']",1000,0.003841700032353401,0.004125843981746584,0.004613199969753623,N/A
p3_find_n_smallest_number,prompt_2,8,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    queue = []\n    for i in range(len(arg1)):\n        if len(queue) < arg2:\n            heapq.heappush(queue, (-arg1[i], i))\n        elif -queue[0][0] > arg1[i]:\n            heapq.heappop(queue)\n            heapq.heappush(queue, (-arg1[i], i))\n    return sorted((idx for val, idx in queue))']",10000,0.03601420018821955,0.03803702499717474,0.06286899978294969,N/A
p3_find_n_smallest_number,prompt_2,8,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    queue = []\n    for i in range(len(arg1)):\n        if len(queue) < arg2:\n            heapq.heappush(queue, (-arg1[i], i))\n        elif -queue[0][0] > arg1[i]:\n            heapq.heappop(queue)\n            heapq.heappush(queue, (-arg1[i], i))\n    return sorted((idx for val, idx in queue))']",100000,0.3629858000203967,0.37686780200572684,0.4456436999607831,N/A
p3_find_n_smallest_number,prompt_2,9,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the list'\n    indexed_values = [(val, index) for index, val in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, indexed_values)\n    return [index for val, index in smallest_pairs]""]",1000,0.00513219996355474,0.005631357997190207,0.00901699997484684,N/A
p3_find_n_smallest_number,prompt_2,9,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the list'\n    indexed_values = [(val, index) for index, val in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, indexed_values)\n    return [index for val, index in smallest_pairs]""]",10000,0.052946999901905656,0.05679271398345009,0.10351429996080697,N/A
p3_find_n_smallest_number,prompt_2,9,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the list'\n    indexed_values = [(val, index) for index, val in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, indexed_values)\n    return [index for val, index in smallest_pairs]""]",100000,0.7017481999937445,0.7255751970037818,0.774732599966228,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] < max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = sorted([i for _, i in max_heap])\n    return indices']",1000,0.0028364998288452625,0.0032151840045116843,0.0058564001228660345,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] < max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = sorted([i for _, i in max_heap])\n    return indices']",10000,0.02814180008135736,0.030628550006076692,0.05090429983101785,N/A
p3_find_n_smallest_number,prompt_2,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] < max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = sorted([i for _, i in max_heap])\n    return indices']",100000,0.2903561000712216,0.3001924710185267,0.37192049995064735,N/A
p3_find_n_smallest_number,prompt_2,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Input \'k\' cannot be larger than the number of elements in the list""\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, j in smallest]']",1000,0.004648700123652816,0.004908854993991554,0.006199599942192435,N/A
p3_find_n_smallest_number,prompt_2,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Input \'k\' cannot be larger than the number of elements in the list""\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, j in smallest]']",10000,0.044067899929359555,0.04579257600475103,0.050778600154444575,N/A
p3_find_n_smallest_number,prompt_2,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Input \'k\' cannot be larger than the number of elements in the list""\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, j in smallest]']",100000,0.4217312999535352,0.436866889980156,0.5057741000782698,N/A
p3_find_n_smallest_number,prompt_2,12,"['def funcImp(arg1, arg2):\n    return [i for i, v in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",1000,0.008523699827492237,0.009134612001944334,0.01259800000116229,N/A
p3_find_n_smallest_number,prompt_2,12,"['def funcImp(arg1, arg2):\n    return [i for i, v in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",10000,0.14279010007157922,0.14761652799788863,0.17276839981786907,N/A
p3_find_n_smallest_number,prompt_2,12,"['def funcImp(arg1, arg2):\n    return [i for i, v in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]']",100000,2.0907121000345796,2.128789237998426,2.202650000108406,N/A
p3_find_n_smallest_number,prompt_2,13,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_items]']",1000,0.004634700017049909,0.004973009000532329,0.006591599900275469,N/A
p3_find_n_smallest_number,prompt_2,13,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_items]']",10000,0.043089100159704685,0.04538738700095564,0.05619190004654229,N/A
p3_find_n_smallest_number,prompt_2,13,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_items]']",100000,0.41950639989227057,0.433339845999144,0.5047446999233216,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",1000,0.005199700128287077,0.005484937003348023,0.007989099947735667,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",10000,0.06382269994355738,0.06610360501566902,0.08674130006693304,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",100000,0.7558789001777768,0.7777611549990252,0.8350913999602199,N/A
p3_find_n_smallest_number,prompt_2,15,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, i))\n    return sorted([i for num, i in min_heap])']",1000,0.004268399905413389,0.004446807987987995,0.005368399899452925,N/A
p3_find_n_smallest_number,prompt_2,15,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, i))\n    return sorted([i for num, i in min_heap])']",10000,0.03952510003000498,0.0426005179900676,0.11568860011175275,N/A
p3_find_n_smallest_number,prompt_2,15,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, i))\n    return sorted([i for num, i in min_heap])']",100000,0.3995728997979313,0.4119330509821884,0.4920084001496434,N/A
p3_find_n_smallest_number,prompt_2,16,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return indexes']",1000,0.005224799970164895,0.005505737985949963,0.010594699997454882,N/A
p3_find_n_smallest_number,prompt_2,16,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return indexes']",10000,0.06530020013451576,0.06751455100253224,0.07073609996587038,N/A
p3_find_n_smallest_number,prompt_2,16,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return indexes']",100000,0.7607222001533955,0.7761091130157002,0.8176518999971449,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",1000,0.007450199918821454,0.007926416003610938,0.012392800068482757,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",10000,0.1104605000000447,0.11501388999400661,0.17527759983204305,N/A
p3_find_n_smallest_number,prompt_2,17,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda sub: arg1[sub])[:arg2]']",100000,1.6059195999987423,1.6389529210026377,1.7101004999130964,N/A
p3_find_n_smallest_number,prompt_2,18,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    elif arg2 <= len(arg1):\n        return [i for i, v in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]\n    else:\n        return None']",1000,0.004587200004607439,0.004881559009663761,0.008705500047653913,N/A
p3_find_n_smallest_number,prompt_2,18,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    elif arg2 <= len(arg1):\n        return [i for i, v in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]\n    else:\n        return None']",10000,0.04276950005441904,0.04643613402266055,0.12516350019723177,N/A
p3_find_n_smallest_number,prompt_2,18,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    elif arg2 <= len(arg1):\n        return [i for i, v in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]\n    else:\n        return None']",100000,0.4193078000098467,0.4327339129964821,0.4974316000007093,N/A
p3_find_n_smallest_number,prompt_2,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    elif arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        temp = [(num, idx) for idx, num in enumerate(arg1)]\n        heapq.heapify(temp)\n        return [heapq.heappop(temp)[1] for _ in range(arg2)]']",1000,0.005344199948012829,0.005664184004999697,0.0073898001573979855,N/A
p3_find_n_smallest_number,prompt_2,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    elif arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        temp = [(num, idx) for idx, num in enumerate(arg1)]\n        heapq.heapify(temp)\n        return [heapq.heappop(temp)[1] for _ in range(arg2)]']",10000,0.06233830004930496,0.06702171998564153,0.07592390011996031,N/A
p3_find_n_smallest_number,prompt_2,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    elif arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        temp = [(num, idx) for idx, num in enumerate(arg1)]\n        heapq.heapify(temp)\n        return [heapq.heappop(temp)[1] for _ in range(arg2)]']",100000,0.7526724999770522,0.7687207620055415,0.8424174000974745,N/A
p3_find_n_smallest_number,prompt_2,20,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    list_with_index = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, list_with_index)\n    index_list = [index for value, index in k_smallest]\n    return index_list']",1000,0.00529840006493032,0.005623441007919609,0.00848810002207756,N/A
p3_find_n_smallest_number,prompt_2,20,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    list_with_index = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, list_with_index)\n    index_list = [index for value, index in k_smallest]\n    return index_list']",10000,0.052849499974399805,0.056184256998822096,0.11381200002506375,N/A
p3_find_n_smallest_number,prompt_2,20,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    list_with_index = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, list_with_index)\n    index_list = [index for value, index in k_smallest]\n    return index_list']",100000,0.693722500000149,0.7177530119987204,0.7820347999222577,N/A
p3_find_n_smallest_number,prompt_2,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.0028165001422166824,0.003585268014576286,0.010527399834245443,N/A
p3_find_n_smallest_number,prompt_2,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.025915599893778563,0.02747176300501451,0.03313670004718006,N/A
p3_find_n_smallest_number,prompt_2,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.2616357000079006,0.2727594380057417,0.34033949999138713,N/A
p3_find_n_smallest_number,prompt_2,22,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than the length of the input list""\n    smallest_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indexes']",1000,0.0032229998614639044,0.0034306770097464324,0.005342499818652868,N/A
p3_find_n_smallest_number,prompt_2,22,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than the length of the input list""\n    smallest_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indexes']",10000,0.028957000002264977,0.03076131101930514,0.04811759991571307,N/A
p3_find_n_smallest_number,prompt_2,22,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than the length of the input list""\n    smallest_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indexes']",100000,0.29210219997912645,0.29940083499765024,0.3292480001691729,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007235300028696656,0.008758051006589085,0.032295200042426586,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11168850003741682,0.11967879300704226,0.20206600008532405,N/A
p3_find_n_smallest_number,prompt_2,23,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.6325022999662906,1.6608513599867,1.8099242001771927,N/A
p3_find_n_smallest_number,prompt_2,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1 = [(num, i) for i, num in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for num, i in smallest]\n    return indices']",1000,0.00510860001668334,0.00592012599343434,0.020449799951165915,N/A
p3_find_n_smallest_number,prompt_2,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1 = [(num, i) for i, num in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for num, i in smallest]\n    return indices']",10000,0.05224990006536245,0.055513574990909545,0.09646070003509521,N/A
p3_find_n_smallest_number,prompt_2,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1 = [(num, i) for i, num in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for num, i in smallest]\n    return indices']",100000,0.6896683000959456,0.7166716640000231,0.812781099928543,N/A
p3_find_n_smallest_number,prompt_2,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return ""Error: k can\'t be greater than the length of the list.""\n    elif len(arg1) == 0:\n        return ""Error: The list can\'t be empty.""\n    else:\n        smallest_nums_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n        return sorted(smallest_nums_indexes)']",1000,0.003185899928212166,0.0034110550046898423,0.005490799900144339,N/A
p3_find_n_smallest_number,prompt_2,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return ""Error: k can\'t be greater than the length of the list.""\n    elif len(arg1) == 0:\n        return ""Error: The list can\'t be empty.""\n    else:\n        smallest_nums_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n        return sorted(smallest_nums_indexes)']",10000,0.029059800086542964,0.030656097994651646,0.03962799999862909,N/A
p3_find_n_smallest_number,prompt_2,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return ""Error: k can\'t be greater than the length of the list.""\n    elif len(arg1) == 0:\n        return ""Error: The list can\'t be empty.""\n    else:\n        smallest_nums_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n        return sorted(smallest_nums_indexes)']",100000,0.29234939999878407,0.3016320529952645,0.35290800011716783,N/A
p3_find_n_smallest_number,prompt_2,26,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should not be greater than length of arg1')\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    heapq.heapify(num_index)\n    return [index for num, index in heapq.nsmallest(arg2, num_index)]""]",1000,0.007044499972835183,0.008119822996668517,0.0221023999620229,N/A
p3_find_n_smallest_number,prompt_2,26,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should not be greater than length of arg1')\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    heapq.heapify(num_index)\n    return [index for num, index in heapq.nsmallest(arg2, num_index)]""]",10000,0.08565180003643036,0.08872444299980999,0.09232120006345212,N/A
p3_find_n_smallest_number,prompt_2,26,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should not be greater than length of arg1')\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    heapq.heapify(num_index)\n    return [index for num, index in heapq.nsmallest(arg2, num_index)]""]",100000,1.0575516000390053,1.0823414900014177,1.1396369999274611,N/A
p3_find_n_smallest_number,prompt_2,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.004365500062704086,0.004605434995610267,0.005379399983212352,N/A
p3_find_n_smallest_number,prompt_2,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.042666299967095256,0.0457253579935059,0.10489710001274943,N/A
p3_find_n_smallest_number,prompt_2,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.43646440003067255,0.44880978101165964,0.5263487999327481,N/A
p3_find_n_smallest_number,prompt_2,28,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004620200023055077,0.004997812008950859,0.006997300079092383,N/A
p3_find_n_smallest_number,prompt_2,28,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.04322480014525354,0.04573647398035973,0.06039579981006682,N/A
p3_find_n_smallest_number,prompt_2,28,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, _ in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4247649998869747,0.4350700570223853,0.4937268001958728,N/A
p3_find_n_smallest_number,prompt_2,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    number_index_list = [(number, index) for index, number in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, number_index_list)\n    return [index for number, index in smallest_k_tuples]']",1000,0.005315700080245733,0.005664353996980936,0.007898199837654829,N/A
p3_find_n_smallest_number,prompt_2,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    number_index_list = [(number, index) for index, number in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, number_index_list)\n    return [index for number, index in smallest_k_tuples]']",10000,0.05218710005283356,0.055512793010566386,0.10078409989364445,N/A
p3_find_n_smallest_number,prompt_2,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    number_index_list = [(number, index) for index, number in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, number_index_list)\n    return [index for number, index in smallest_k_tuples]']",100000,0.688318100059405,0.7139307080139407,0.799824699992314,N/A
p3_find_n_smallest_number,prompt_2,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    combined = [(value, index) for index, value in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, combined)\n    return [index for value, index in smallest]']",1000,0.005303200101479888,0.005464954997878521,0.0065888999961316586,N/A
p3_find_n_smallest_number,prompt_2,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    combined = [(value, index) for index, value in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, combined)\n    return [index for value, index in smallest]']",10000,0.05297680012881756,0.05455885300179943,0.06450089998543262,N/A
p3_find_n_smallest_number,prompt_2,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    combined = [(value, index) for index, value in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, combined)\n    return [index for value, index in smallest]']",100000,0.683009099913761,0.7047015249775722,0.7867521001026034,N/A
p3_find_n_smallest_number,prompt_2,31,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k is greater than the length of the list'\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest]""]",1000,0.004726200131699443,0.004906152999028563,0.005903000012040138,N/A
p3_find_n_smallest_number,prompt_2,31,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k is greater than the length of the list'\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest]""]",10000,0.04372110008262098,0.04554180899867788,0.050765200052410364,N/A
p3_find_n_smallest_number,prompt_2,31,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k is greater than the length of the list'\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest]""]",100000,0.42117709992453456,0.4325342709943652,0.4866875000298023,N/A
p3_find_n_smallest_number,prompt_2,32,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 > len(arg1):\n        return 'Too many elements requested'\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices""]",1000,0.004722399869933724,0.00496152299689129,0.006654300028458238,N/A
p3_find_n_smallest_number,prompt_2,32,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 > len(arg1):\n        return 'Too many elements requested'\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices""]",10000,0.04369469988159835,0.04582162899430841,0.07411119993776083,N/A
p3_find_n_smallest_number,prompt_2,32,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 > len(arg1):\n        return 'Too many elements requested'\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [x[0] for x in smallest]\n    return indices""]",100000,0.42088130000047386,0.4336997569981031,0.5032561998814344,N/A
p3_find_n_smallest_number,prompt_2,33,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.0033232998102903366,0.003588644003029913,0.006663199979811907,N/A
p3_find_n_smallest_number,prompt_2,33,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.031231699977070093,0.03266713299555704,0.05603730003349483,N/A
p3_find_n_smallest_number,prompt_2,33,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.3098182000685483,0.3191869749920443,0.39623320009559393,N/A
p3_find_n_smallest_number,prompt_2,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return sorted(result)""]",1000,0.005165999988093972,0.005503767007030547,0.007440000073984265,N/A
p3_find_n_smallest_number,prompt_2,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return sorted(result)""]",10000,0.06652410002425313,0.06892382699996233,0.1069732999894768,N/A
p3_find_n_smallest_number,prompt_2,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than the number of elements in the list'\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return sorted(result)""]",100000,0.7724126998800784,0.8091653349995613,0.8580467000138015,N/A
p3_find_n_smallest_number,prompt_2,35,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.0045490998309105635,0.004888085001148283,0.007167600095272064,N/A
p3_find_n_smallest_number,prompt_2,35,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.04380470002070069,0.04610010098665953,0.08329019998200238,N/A
p3_find_n_smallest_number,prompt_2,35,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4212050000205636,0.43071221400983634,0.4958347000647336,N/A
p3_find_n_smallest_number,prompt_2,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.003257900010794401,0.003351776001509279,0.005099799949675798,N/A
p3_find_n_smallest_number,prompt_2,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.02881440008059144,0.030488410003017635,0.03725189995020628,N/A
p3_find_n_smallest_number,prompt_2,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.294173700036481,0.3032392580132,0.35730189993046224,N/A
p3_find_n_smallest_number,prompt_2,37,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest]']",1000,0.004560200031846762,0.004944784005638212,0.006560300011187792,N/A
p3_find_n_smallest_number,prompt_2,37,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest]']",10000,0.04375599999912083,0.04681693901773542,0.14122550003230572,N/A
p3_find_n_smallest_number,prompt_2,37,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest]']",100000,0.42476340010762215,0.4360199100128375,0.5041933001484722,N/A
p3_find_n_smallest_number,prompt_2,38,"['from typing import List\nfrom queue import PriorityQueue\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    pq = PriorityQueue()\n    for i, val in enumerate(arg1):\n        pq.put((val, i))\n    result = []\n    for _ in range(arg2):\n        result.append(pq.get()[1])\n    return result']",1000,0.05122070014476776,0.053510249000974,0.06635350012220442,N/A
p3_find_n_smallest_number,prompt_2,38,"['from typing import List\nfrom queue import PriorityQueue\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    pq = PriorityQueue()\n    for i, val in enumerate(arg1):\n        pq.put((val, i))\n    result = []\n    for _ in range(arg2):\n        result.append(pq.get()[1])\n    return result']",10000,0.5262653999961913,0.5404470909805968,0.6275087001267821,N/A
p3_find_n_smallest_number,prompt_2,38,"['from typing import List\nfrom queue import PriorityQueue\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    pq = PriorityQueue()\n    for i, val in enumerate(arg1):\n        pq.put((val, i))\n    result = []\n    for _ in range(arg2):\n        result.append(pq.get()[1])\n    return result']",100000,5.533636000007391,5.607009304005187,5.762201800011098,N/A
p3_find_n_smallest_number,prompt_2,39,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_numbers]']",1000,0.004672700073570013,0.0050651169987395404,0.01233969978056848,N/A
p3_find_n_smallest_number,prompt_2,39,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_numbers]']",10000,0.043980800081044436,0.046204797984100876,0.07112460001371801,N/A
p3_find_n_smallest_number,prompt_2,39,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_numbers]']",100000,0.42533839982934296,0.43420332699548453,0.47510470007546246,N/A
p3_find_n_smallest_number,prompt_2,40,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        else:\n            heapq.heappushpop(max_heap, (-num, i))\n    indexes = sorted([i for num, i in max_heap], key=lambda x: arg1[x])\n    return indexes']",1000,0.006913000019267201,0.007131445987615734,0.007741099921986461,N/A
p3_find_n_smallest_number,prompt_2,40,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        else:\n            heapq.heappushpop(max_heap, (-num, i))\n    indexes = sorted([i for num, i in max_heap], key=lambda x: arg1[x])\n    return indexes']",10000,0.06733050011098385,0.06944725299021229,0.0818120997864753,N/A
p3_find_n_smallest_number,prompt_2,40,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        else:\n            heapq.heappushpop(max_heap, (-num, i))\n    indexes = sorted([i for num, i in max_heap], key=lambda x: arg1[x])\n    return indexes']",100000,0.6746867999900132,0.6888858320051804,0.7692531999200583,N/A
p3_find_n_smallest_number,prompt_2,41,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    nums_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_with_indexes = heapq.nsmallest(arg2, nums_with_indexes)\n    indexes = [i for num, i in smallest_nums_with_indexes]\n    return indexes']",1000,0.005318900104612112,0.005706576008815318,0.012313199928030372,N/A
p3_find_n_smallest_number,prompt_2,41,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    nums_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_with_indexes = heapq.nsmallest(arg2, nums_with_indexes)\n    indexes = [i for num, i in smallest_nums_with_indexes]\n    return indexes']",10000,0.05271470011211932,0.05455506800673902,0.05954409996047616,N/A
p3_find_n_smallest_number,prompt_2,41,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    nums_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_with_indexes = heapq.nsmallest(arg2, nums_with_indexes)\n    indexes = [i for num, i in smallest_nums_with_indexes]\n    return indexes']",100000,0.6913970001041889,0.7101005380018615,0.74136559991166,N/A
p3_find_n_smallest_number,prompt_2,42,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, v in sorted(enumerate(arg1), key=lambda x: x[1])][:arg2]']",1000,0.010082100052386522,0.01148903702152893,0.04508409998379648,N/A
p3_find_n_smallest_number,prompt_2,42,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, v in sorted(enumerate(arg1), key=lambda x: x[1])][:arg2]']",10000,0.16537459986284375,0.17025109401671215,0.20513700018636882,N/A
p3_find_n_smallest_number,prompt_2,42,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, v in sorted(enumerate(arg1), key=lambda x: x[1])][:arg2]']",100000,2.7454045999329537,2.7994021149980837,2.9208394000306726,N/A
p3_find_n_smallest_number,prompt_2,43,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_k = [heapq.heappop(indexed_array) for _ in range(arg2)]\n    return [idx for val, idx in smallest_k]']",1000,0.005127100041136146,0.005518115994054824,0.007614899892359972,N/A
p3_find_n_smallest_number,prompt_2,43,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_k = [heapq.heappop(indexed_array) for _ in range(arg2)]\n    return [idx for val, idx in smallest_k]']",10000,0.06615240010432899,0.068812074016314,0.13930270005948842,N/A
p3_find_n_smallest_number,prompt_2,43,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_k = [heapq.heappop(indexed_array) for _ in range(arg2)]\n    return [idx for val, idx in smallest_k]']",100000,0.7786361000034958,0.792704485997092,0.820484499912709,N/A
p3_find_n_smallest_number,prompt_2,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-num, idx))\n    return [idx for num, idx in min_heap]']",1000,0.0041640999261289835,0.004398208991624415,0.006387900095432997,N/A
p3_find_n_smallest_number,prompt_2,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-num, idx))\n    return [idx for num, idx in min_heap]']",10000,0.03928670007735491,0.04095843399874866,0.048696500016376376,N/A
p3_find_n_smallest_number,prompt_2,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-num, idx))\n    return [idx for num, idx in min_heap]']",100000,0.4012295000720769,0.4131785429967567,0.5260234999004751,N/A
p3_find_n_smallest_number,prompt_2,45,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    res = []\n    for _ in range(arg2):\n        res.append(heapq.heappop(min_heap)[1])\n    return res']",1000,0.005193200195208192,0.005573865002952516,0.009163199923932552,N/A
p3_find_n_smallest_number,prompt_2,45,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    res = []\n    for _ in range(arg2):\n        res.append(heapq.heappop(min_heap)[1])\n    return res']",10000,0.06538909999653697,0.06665702999103815,0.07021240005269647,N/A
p3_find_n_smallest_number,prompt_2,45,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    res = []\n    for _ in range(arg2):\n        res.append(heapq.heappop(min_heap)[1])\n    return res']",100000,0.7846035999245942,0.7969899609871208,0.8496004999615252,N/A
p3_find_n_smallest_number,prompt_2,46,"['from typing import List\n\ndef partition(nums, low, high):\n    pivot = nums[high]\n    i = low - 1\n    for j in range(low, high):\n        if nums[j] <= pivot:\n            i = i + 1\n            nums[i], nums[j] = (nums[j], nums[i])\n    nums[i + 1], nums[high] = (nums[high], nums[i + 1])\n    return i + 1\n\ndef quick_sort(nums, low, high, indexes, k):\n    if low < high:\n        pi = partition(nums, low, high)\n        if k < pi:\n            quick_sort(nums, low, pi - 1, indexes, k)\n        elif k > pi:\n            quick_sort(nums, pi + 1, high, indexes, k)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexes = list(range(len(arg1)))\n    quick_sort(arg1, 0, len(arg1) - 1, indexes, arg2)\n    return indexes[:arg2]']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,46,"['from typing import List\n\ndef partition(nums, low, high):\n    pivot = nums[high]\n    i = low - 1\n    for j in range(low, high):\n        if nums[j] <= pivot:\n            i = i + 1\n            nums[i], nums[j] = (nums[j], nums[i])\n    nums[i + 1], nums[high] = (nums[high], nums[i + 1])\n    return i + 1\n\ndef quick_sort(nums, low, high, indexes, k):\n    if low < high:\n        pi = partition(nums, low, high)\n        if k < pi:\n            quick_sort(nums, low, pi - 1, indexes, k)\n        elif k > pi:\n            quick_sort(nums, pi + 1, high, indexes, k)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexes = list(range(len(arg1)))\n    quick_sort(arg1, 0, len(arg1) - 1, indexes, arg2)\n    return indexes[:arg2]']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,46,"['from typing import List\n\ndef partition(nums, low, high):\n    pivot = nums[high]\n    i = low - 1\n    for j in range(low, high):\n        if nums[j] <= pivot:\n            i = i + 1\n            nums[i], nums[j] = (nums[j], nums[i])\n    nums[i + 1], nums[high] = (nums[high], nums[i + 1])\n    return i + 1\n\ndef quick_sort(nums, low, high, indexes, k):\n    if low < high:\n        pi = partition(nums, low, high)\n        if k < pi:\n            quick_sort(nums, low, pi - 1, indexes, k)\n        elif k > pi:\n            quick_sort(nums, pi + 1, high, indexes, k)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexes = list(range(len(arg1)))\n    quick_sort(arg1, 0, len(arg1) - 1, indexes, arg2)\n    return indexes[:arg2]']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_2,47,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indices = sorted([i for num, i in heap])\n    return indices']",1000,0.0035032001323997974,0.0037525320053100586,0.00508800009265542,N/A
p3_find_n_smallest_number,prompt_2,47,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indices = sorted([i for num, i in heap])\n    return indices']",10000,0.03330070013180375,0.03447721500182524,0.038627499947324395,N/A
p3_find_n_smallest_number,prompt_2,47,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indices = sorted([i for num, i in heap])\n    return indices']",100000,0.3308332001324743,0.33881474901223557,0.3996587998699397,N/A
p3_find_n_smallest_number,prompt_2,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return sorted([i for num, i in max_heap], key=arg1.__getitem__)']",1000,0.0030895997770130634,0.003329097006935626,0.005811099894344807,N/A
p3_find_n_smallest_number,prompt_2,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return sorted([i for num, i in max_heap], key=arg1.__getitem__)']",10000,0.029410399962216616,0.031010957995895296,0.04243650007992983,N/A
p3_find_n_smallest_number,prompt_2,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return sorted([i for num, i in max_heap], key=arg1.__getitem__)']",100000,0.2941625998355448,0.30358382800593975,0.3701380998827517,N/A
p3_find_n_smallest_number,prompt_2,49,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1:\n        return 'Error: Second argument should be greater than 0'\n    if arg2 > len(arg1):\n        return 'Error: Second argument should not be greater than the length of the array'\n    smallest_nums_indices = heapq.nsmallest(arg2, range(len(arg1)), arg1.__getitem__)\n    return smallest_nums_indices""]",1000,0.003251400077715516,0.003398931003175676,0.006781900068745017,N/A
p3_find_n_smallest_number,prompt_2,49,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1:\n        return 'Error: Second argument should be greater than 0'\n    if arg2 > len(arg1):\n        return 'Error: Second argument should not be greater than the length of the array'\n    smallest_nums_indices = heapq.nsmallest(arg2, range(len(arg1)), arg1.__getitem__)\n    return smallest_nums_indices""]",10000,0.02953599998727441,0.03045107499929145,0.034312899922952056,N/A
p3_find_n_smallest_number,prompt_2,49,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1:\n        return 'Error: Second argument should be greater than 0'\n    if arg2 > len(arg1):\n        return 'Error: Second argument should not be greater than the length of the array'\n    smallest_nums_indices = heapq.nsmallest(arg2, range(len(arg1)), arg1.__getitem__)\n    return smallest_nums_indices""]",100000,0.2955527000594884,0.3021336879883893,0.3634617000352591,N/A
p3_find_n_smallest_number,prompt_2,50,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=arg1.__getitem__)[:arg2]']",1000,0.005638699978590012,0.00599357299739495,0.00760769983753562,N/A
p3_find_n_smallest_number,prompt_2,50,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=arg1.__getitem__)[:arg2]']",10000,0.09385290020145476,0.09692163900006562,0.11822299985215068,N/A
p3_find_n_smallest_number,prompt_2,50,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=arg1.__getitem__)[:arg2]']",100000,1.4450350000988692,1.4738592639868147,1.5513186999596655,N/A
p3_find_n_smallest_number,prompt_2,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0032597999088466167,0.0033763330010697246,0.0049536998849362135,N/A
p3_find_n_smallest_number,prompt_2,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.02919039991684258,0.03091760300565511,0.04546180018223822,N/A
p3_find_n_smallest_number,prompt_2,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29356559994630516,0.3039901349903084,0.3765042999293655,N/A
p3_find_n_smallest_number,prompt_2,52,"[""from typing import List\nimport heapq\nfrom operator import itemgetter\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 0:\n        return 'Error: Invalid value for k.'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=itemgetter(1))\n    idx_smallest_nums = [i for i, num in smallest_nums]\n    return idx_smallest_nums""]",1000,0.0036997999995946884,0.004026514994911849,0.006036499980837107,N/A
p3_find_n_smallest_number,prompt_2,52,"[""from typing import List\nimport heapq\nfrom operator import itemgetter\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 0:\n        return 'Error: Invalid value for k.'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=itemgetter(1))\n    idx_smallest_nums = [i for i, num in smallest_nums]\n    return idx_smallest_nums""]",10000,0.03484279988333583,0.0382810370111838,0.10913789994083345,N/A
p3_find_n_smallest_number,prompt_2,52,"[""from typing import List\nimport heapq\nfrom operator import itemgetter\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 0:\n        return 'Error: Invalid value for k.'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=itemgetter(1))\n    idx_smallest_nums = [i for i, num in smallest_nums]\n    return idx_smallest_nums""]",100000,0.33661230001598597,0.34966695899376643,0.4381677999626845,N/A
p3_find_n_smallest_number,prompt_2,53,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[1] for i in heapq.nsmallest(arg2, ((v, i) for i, v in enumerate(arg1)))]']",1000,0.005978700006380677,0.006270616012625396,0.00806890008971095,N/A
p3_find_n_smallest_number,prompt_2,53,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[1] for i in heapq.nsmallest(arg2, ((v, i) for i, v in enumerate(arg1)))]']",10000,0.055584399960935116,0.05818778799846768,0.12099009985104203,N/A
p3_find_n_smallest_number,prompt_2,53,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[1] for i in heapq.nsmallest(arg2, ((v, i) for i, v in enumerate(arg1)))]']",100000,0.5564079999458045,0.5723624909925275,0.6631159000098705,N/A
p3_find_n_smallest_number,prompt_2,54,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005206200061365962,0.005416746002156287,0.006339499959722161,N/A
p3_find_n_smallest_number,prompt_2,54,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06432229978963733,0.06642566701164469,0.07182609988376498,N/A
p3_find_n_smallest_number,prompt_2,54,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7729541000444442,0.7937793220113963,0.8549073000904173,N/A
p3_find_n_smallest_number,prompt_2,55,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_nums]']",1000,0.0046814000234007835,0.004943534007761628,0.008191399974748492,N/A
p3_find_n_smallest_number,prompt_2,55,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_nums]']",10000,0.04314159997738898,0.04553676900221035,0.05500370007939637,N/A
p3_find_n_smallest_number,prompt_2,55,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_nums]']",100000,0.42217490007169545,0.43633145600557327,0.5297591001726687,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    return [arg1.index(i) for i in sorted(arg1)[:arg2]]']",1000,0.004287000047042966,0.004646795992739499,0.006570100085809827,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    return [arg1.index(i) for i in sorted(arg1)[:arg2]]']",10000,0.08663549995981157,0.09050248898100108,0.1221189999487251,N/A
p3_find_n_smallest_number,prompt_2,56,"['def funcImp(arg1, arg2):\n    return [arg1.index(i) for i in sorted(arg1)[:arg2]]']",100000,1.1092039998620749,1.1344148449972271,1.2585026999004185,N/A
p3_find_n_smallest_number,prompt_2,57,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        value, i = heapq.heappop(heap)\n        smallest_indexes.append(i)\n    return smallest_indexes']",1000,0.005115099949762225,0.005660178996622562,0.014047499978914857,N/A
p3_find_n_smallest_number,prompt_2,57,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        value, i = heapq.heappop(heap)\n        smallest_indexes.append(i)\n    return smallest_indexes']",10000,0.06702820002101362,0.06968230799539014,0.0748583001550287,N/A
p3_find_n_smallest_number,prompt_2,57,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        value, i = heapq.heappop(heap)\n        smallest_indexes.append(i)\n    return smallest_indexes']",100000,0.7685142001137137,0.7849937880039215,0.8385707999113947,N/A
p3_find_n_smallest_number,prompt_2,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg1 and arg2 > 0:\n        smallest_nums = heapq.nsmallest(arg2, ((val, i) for i, val in enumerate(arg1)))\n        return [i for val, i in smallest_nums]\n    else:\n        return []']",1000,0.005953100044280291,0.006146287994924933,0.00684940000064671,N/A
p3_find_n_smallest_number,prompt_2,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg1 and arg2 > 0:\n        smallest_nums = heapq.nsmallest(arg2, ((val, i) for i, val in enumerate(arg1)))\n        return [i for val, i in smallest_nums]\n    else:\n        return []']",10000,0.05497359996661544,0.05745503701036796,0.07326079998165369,N/A
p3_find_n_smallest_number,prompt_2,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg1 and arg2 > 0:\n        smallest_nums = heapq.nsmallest(arg2, ((val, i) for i, val in enumerate(arg1)))\n        return [i for val, i in smallest_nums]\n    else:\n        return []']",100000,0.5578401000238955,0.5691441339976154,0.6209656000137329,N/A
p3_find_n_smallest_number,prompt_2,59,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not 0 < arg2 <= len(arg1):\n        raise ValueError('arg2 must be greater than 0 and less than or equal to the size of arg1')\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]""]",1000,0.00714890006929636,0.007785147002432495,0.009680799907073379,N/A
p3_find_n_smallest_number,prompt_2,59,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not 0 < arg2 <= len(arg1):\n        raise ValueError('arg2 must be greater than 0 and less than or equal to the size of arg1')\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]""]",10000,0.11066050012595952,0.115670604002662,0.1251654999796301,N/A
p3_find_n_smallest_number,prompt_2,59,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not 0 < arg2 <= len(arg1):\n        raise ValueError('arg2 must be greater than 0 and less than or equal to the size of arg1')\n    sorted_indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indexes[:arg2]""]",100000,1.6251298999413848,1.6554390539950692,1.7351140999235213,N/A
p3_find_n_smallest_number,prompt_2,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the array""\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return result']",1000,0.005175800062716007,0.005500851992983371,0.008073000004515052,N/A
p3_find_n_smallest_number,prompt_2,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the array""\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return result']",10000,0.06782780005596578,0.07030538599938155,0.0740444001276046,N/A
p3_find_n_smallest_number,prompt_2,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the array""\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return result']",100000,0.7782734001521021,0.8023909119935706,0.8494476999621838,N/A
p3_find_n_smallest_number,prompt_2,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted((idx for _, idx in max_heap))']",1000,0.0028339000418782234,0.003271521991118789,0.00645240000449121,N/A
p3_find_n_smallest_number,prompt_2,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted((idx for _, idx in max_heap))']",10000,0.02630280004814267,0.027961036006454377,0.0336177998688072,N/A
p3_find_n_smallest_number,prompt_2,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted((idx for _, idx in max_heap))']",100000,0.2651359001174569,0.2731478009955026,0.37134059984236956,N/A
p3_find_n_smallest_number,prompt_2,62,"['{\'code\': <code object <module> at 0x0000022544405C30, file ""<string>"", line 1>, \'raw\': \'Here\\\'s a Python solution using \\\'heapq\\\' library, which provides an implementation of heap queue algorithm (also known as priority queue algorithm). This library allows us to convert a regular list to a heap. The property of this data structure in Python is that each time the smallest heap element is popped(min-heap).\\n\\n```Python\\nimport heapq\\nfrom typing import List\\n\\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\\n    if arg2 > len(arg1):    # Checks if k is more than the number of elements in the list.\\n        return print(""The value of \\\'k\\\' exceeds the number of elements."")\\n    else:\\n        return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x:x[1])]\\n```\\n\\nHere is how this function works:\\n\\n- `enumerate(arg1)` is used to create tuples of the form (index, element) for each element in the array. \\n- The `heapq.nsmallest()` function is used to get the `k` smallest elements from these tuples. Note that we provide a key function `key=lambda x:x[1]` to ensure that the tuples are compared based on their second element (i.e., the actual number, not the index).\\n- Finally, we use a list comprehension (`[i[0] for i in ...]`) to extract the index (i.e., the first element of each tuple) from the `k` smallest tuples.\\n\\nThe complexity of this function is O(n log k), where n is the length of the array. This is because the time complexity of inserting an element in a heap of size k is O(log K) and we do this n times.\', \'success\': True, \'error\': None}']",1000,0,0,0,"function_index: prompt_2, code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_2,62,"['{\'code\': <code object <module> at 0x0000022544405C30, file ""<string>"", line 1>, \'raw\': \'Here\\\'s a Python solution using \\\'heapq\\\' library, which provides an implementation of heap queue algorithm (also known as priority queue algorithm). This library allows us to convert a regular list to a heap. The property of this data structure in Python is that each time the smallest heap element is popped(min-heap).\\n\\n```Python\\nimport heapq\\nfrom typing import List\\n\\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\\n    if arg2 > len(arg1):    # Checks if k is more than the number of elements in the list.\\n        return print(""The value of \\\'k\\\' exceeds the number of elements."")\\n    else:\\n        return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x:x[1])]\\n```\\n\\nHere is how this function works:\\n\\n- `enumerate(arg1)` is used to create tuples of the form (index, element) for each element in the array. \\n- The `heapq.nsmallest()` function is used to get the `k` smallest elements from these tuples. Note that we provide a key function `key=lambda x:x[1]` to ensure that the tuples are compared based on their second element (i.e., the actual number, not the index).\\n- Finally, we use a list comprehension (`[i[0] for i in ...]`) to extract the index (i.e., the first element of each tuple) from the `k` smallest tuples.\\n\\nThe complexity of this function is O(n log k), where n is the length of the array. This is because the time complexity of inserting an element in a heap of size k is O(log K) and we do this n times.\', \'success\': True, \'error\': None}']",10000,0,0,0,"function_index: prompt_2, code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_2,62,"['{\'code\': <code object <module> at 0x0000022544405C30, file ""<string>"", line 1>, \'raw\': \'Here\\\'s a Python solution using \\\'heapq\\\' library, which provides an implementation of heap queue algorithm (also known as priority queue algorithm). This library allows us to convert a regular list to a heap. The property of this data structure in Python is that each time the smallest heap element is popped(min-heap).\\n\\n```Python\\nimport heapq\\nfrom typing import List\\n\\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\\n    if arg2 > len(arg1):    # Checks if k is more than the number of elements in the list.\\n        return print(""The value of \\\'k\\\' exceeds the number of elements."")\\n    else:\\n        return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x:x[1])]\\n```\\n\\nHere is how this function works:\\n\\n- `enumerate(arg1)` is used to create tuples of the form (index, element) for each element in the array. \\n- The `heapq.nsmallest()` function is used to get the `k` smallest elements from these tuples. Note that we provide a key function `key=lambda x:x[1]` to ensure that the tuples are compared based on their second element (i.e., the actual number, not the index).\\n- Finally, we use a list comprehension (`[i[0] for i in ...]`) to extract the index (i.e., the first element of each tuple) from the `k` smallest tuples.\\n\\nThe complexity of this function is O(n log k), where n is the length of the array. This is because the time complexity of inserting an element in a heap of size k is O(log K) and we do this n times.\', \'success\': True, \'error\': None}']",100000,0,0,0,"function_index: prompt_2, code_start_index: -1, No Python code available"
p3_find_n_smallest_number,prompt_2,63,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 cannot be greater than the length of arg1'\n    arg1_tuples = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, arg1_tuples)\n    return [t[1] for t in smallest_k]""]",1000,0.005288999993354082,0.005531691000796855,0.006975000025704503,N/A
p3_find_n_smallest_number,prompt_2,63,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 cannot be greater than the length of arg1'\n    arg1_tuples = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, arg1_tuples)\n    return [t[1] for t in smallest_k]""]",10000,0.05270949983969331,0.05572411899454892,0.10730249993503094,N/A
p3_find_n_smallest_number,prompt_2,63,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 cannot be greater than the length of arg1'\n    arg1_tuples = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, arg1_tuples)\n    return [t[1] for t in smallest_k]""]",100000,0.685378700029105,0.7142342500085942,0.7853709000628442,N/A
p3_find_n_smallest_number,prompt_2,64,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    li = list(zip(arg1, range(len(arg1))))\n    smallest_values_with_indices = heapq.nsmallest(arg2, li)\n    return [index for value, index in smallest_values_with_indices]']",1000,0.004064799984917045,0.004483614000491798,0.007612799992784858,N/A
p3_find_n_smallest_number,prompt_2,64,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    li = list(zip(arg1, range(len(arg1))))\n    smallest_values_with_indices = heapq.nsmallest(arg2, li)\n    return [index for value, index in smallest_values_with_indices]']",10000,0.041573100024834275,0.043611851003952325,0.0650340998545289,N/A
p3_find_n_smallest_number,prompt_2,64,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    li = list(zip(arg1, range(len(arg1))))\n    smallest_values_with_indices = heapq.nsmallest(arg2, li)\n    return [index for value, index in smallest_values_with_indices]']",100000,0.5649447999894619,0.6015175429964438,0.6497641000896692,N/A
p3_find_n_smallest_number,prompt_2,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arg1 = [[num, i] for i, num in enumerate(arg1)]\n    smallest_k_values = heapq.nsmallest(arg2, indexed_arg1)\n    indexes = [value[1] for value in smallest_k_values]\n    return indexes']",1000,0.005934400018304586,0.006291485005058348,0.007943199947476387,N/A
p3_find_n_smallest_number,prompt_2,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arg1 = [[num, i] for i, num in enumerate(arg1)]\n    smallest_k_values = heapq.nsmallest(arg2, indexed_arg1)\n    indexes = [value[1] for value in smallest_k_values]\n    return indexes']",10000,0.05755560006946325,0.05964736900525167,0.10759179992601275,N/A
p3_find_n_smallest_number,prompt_2,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arg1 = [[num, i] for i, num in enumerate(arg1)]\n    smallest_k_values = heapq.nsmallest(arg2, indexed_arg1)\n    indexes = [value[1] for value in smallest_k_values]\n    return indexes']",100000,0.833658300107345,0.8602147169830278,0.9808416999876499,N/A
p3_find_n_smallest_number,prompt_2,66,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in heap]\n    return indexes']",1000,0.0022535999305546284,0.0024068410065956414,0.003000800032168627,N/A
p3_find_n_smallest_number,prompt_2,66,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in heap]\n    return indexes']",10000,0.022895700065419078,0.024201934006996453,0.0330522998701781,N/A
p3_find_n_smallest_number,prompt_2,66,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in heap]\n    return indexes']",100000,0.23087169998325408,0.23913780498318374,0.2947052998933941,N/A
p3_find_n_smallest_number,prompt_2,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    pairs = [(num, index) for index, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, pairs)\n    return [index for num, index in smallest_pairs]']",1000,0.00547429989092052,0.0058596149855293335,0.012889999896287918,N/A
p3_find_n_smallest_number,prompt_2,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    pairs = [(num, index) for index, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, pairs)\n    return [index for num, index in smallest_pairs]']",10000,0.05316290003247559,0.05535242201061919,0.06664780015125871,N/A
p3_find_n_smallest_number,prompt_2,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    pairs = [(num, index) for index, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, pairs)\n    return [index for num, index in smallest_pairs]']",100000,0.6872300000395626,0.7094474440068006,0.785512100206688,N/A
p3_find_n_smallest_number,prompt_2,68,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k_indexes = [i[0] for i in smallest_k]\n    return smallest_k_indexes']",1000,0.004612000193446875,0.005276203001849353,0.011705700075253844,N/A
p3_find_n_smallest_number,prompt_2,68,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k_indexes = [i[0] for i in smallest_k]\n    return smallest_k_indexes']",10000,0.04367210017517209,0.04525781302014366,0.05060459999367595,N/A
p3_find_n_smallest_number,prompt_2,68,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k_indexes = [i[0] for i in smallest_k]\n    return smallest_k_indexes']",100000,0.42456439998932183,0.43135302198352293,0.48222529981285334,N/A
p3_find_n_smallest_number,prompt_2,69,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.0044611000921577215,0.004772367998957634,0.006565700052306056,N/A
p3_find_n_smallest_number,prompt_2,69,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.04269919986836612,0.04543436499545351,0.11222460004501045,N/A
p3_find_n_smallest_number,prompt_2,69,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.43428870011121035,0.44572610900271686,0.5178469000384212,N/A
p3_find_n_smallest_number,prompt_2,70,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    nums = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, nums)\n    smallest_idx = [idx for num, idx in smallest_nums]\n    return smallest_idx']",1000,0.005125199910253286,0.005578828013967723,0.00803650007583201,N/A
p3_find_n_smallest_number,prompt_2,70,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    nums = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, nums)\n    smallest_idx = [idx for num, idx in smallest_nums]\n    return smallest_idx']",10000,0.05289589986205101,0.05567559900227934,0.1539721000008285,N/A
p3_find_n_smallest_number,prompt_2,70,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    nums = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, nums)\n    smallest_idx = [idx for num, idx in smallest_nums]\n    return smallest_idx']",100000,0.6861354999709874,0.7091165660112165,0.7841985002160072,N/A
p3_find_n_smallest_number,prompt_2,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indexes']",1000,0.005222100066021085,0.005409044015686959,0.0062605999410152435,N/A
p3_find_n_smallest_number,prompt_2,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indexes']",10000,0.06703689997084439,0.06887610801961273,0.07124130008742213,N/A
p3_find_n_smallest_number,prompt_2,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indexes']",100000,0.7900415000040084,0.8020429240097292,0.8410332000348717,N/A
p3_find_n_smallest_number,prompt_2,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_pairs]']",1000,0.007180199958384037,0.00787875299807638,0.013200700050219893,N/A
p3_find_n_smallest_number,prompt_2,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_pairs]']",10000,0.08347880002111197,0.0879290520073846,0.17819030000828207,N/A
p3_find_n_smallest_number,prompt_2,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_pairs = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_pairs]']",100000,1.0536886998452246,1.0776589899905957,1.1290319999679923,N/A
p3_find_n_smallest_number,prompt_2,73,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in smallest]\n    return indices']",1000,0.004705399973317981,0.004882131009362638,0.005553200142458081,N/A
p3_find_n_smallest_number,prompt_2,73,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in smallest]\n    return indices']",10000,0.04345600004307926,0.04576931400224567,0.06375500001013279,N/A
p3_find_n_smallest_number,prompt_2,73,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in smallest]\n    return indices']",100000,0.42119269981049,0.43228901498019695,0.5001162001863122,N/A
p3_find_n_smallest_number,prompt_2,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indices']",1000,0.005183900007978082,0.005562425989191979,0.00974709982983768,N/A
p3_find_n_smallest_number,prompt_2,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indices']",10000,0.06624389998614788,0.06818624200066552,0.07127880002371967,N/A
p3_find_n_smallest_number,prompt_2,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indices']",100000,0.7656721998937428,0.7814625749969855,0.8058120000641793,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.003178599989041686,0.0034308920102193953,0.005513499956578016,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.029418300138786435,0.030995909008197486,0.03600899991579354,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29765540012158453,0.3038466180092655,0.33139030006714165,N/A
p3_find_n_smallest_number,prompt_2,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indices = {v: k for k, v in enumerate(arg1)}\n        smallest_elements = heapq.nsmallest(arg2, arg1)\n        return [indices[i] for i in smallest_elements]']",1000,0.004200000083073974,0.004328585988841951,0.004544300027191639,N/A
p3_find_n_smallest_number,prompt_2,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indices = {v: k for k, v in enumerate(arg1)}\n        smallest_elements = heapq.nsmallest(arg2, arg1)\n        return [indices[i] for i in smallest_elements]']",10000,0.04186460003256798,0.04286982400808483,0.05106969992630184,N/A
p3_find_n_smallest_number,prompt_2,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indices = {v: k for k, v in enumerate(arg1)}\n        smallest_elements = heapq.nsmallest(arg2, arg1)\n        return [indices[i] for i in smallest_elements]']",100000,0.6914010997861624,0.713144171005115,0.7546999999321997,N/A
p3_find_n_smallest_number,prompt_2,77,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'The size of the array is smaller than k'\n    smallest_k_nums = heapq.nsmallest(arg2, arg1)\n    smallest_k_indices = [arg1.index(num) for num in smallest_k_nums]\n    return smallest_k_indices""]",1000,0.002681500045582652,0.0028475609933957457,0.0034740001428872347,N/A
p3_find_n_smallest_number,prompt_2,77,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'The size of the array is smaller than k'\n    smallest_k_nums = heapq.nsmallest(arg2, arg1)\n    smallest_k_indices = [arg1.index(num) for num in smallest_k_nums]\n    return smallest_k_indices""]",10000,0.022176300175487995,0.024121746020391584,0.048876099986955523,N/A
p3_find_n_smallest_number,prompt_2,77,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'The size of the array is smaller than k'\n    smallest_k_nums = heapq.nsmallest(arg2, arg1)\n    smallest_k_indices = [arg1.index(num) for num in smallest_k_nums]\n    return smallest_k_indices""]",100000,0.15709450002759695,0.1614910619915463,0.17540679988451302,N/A
p3_find_n_smallest_number,prompt_2,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0032445001415908337,0.0035061850026249885,0.0063044000416994095,N/A
p3_find_n_smallest_number,prompt_2,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.029655399965122342,0.030771461981348693,0.045654699904844165,N/A
p3_find_n_smallest_number,prompt_2,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.2954607999417931,0.3029998969985172,0.3466306999325752,N/A
p3_find_n_smallest_number,prompt_2,79,"['import random\nfrom typing import List\n\ndef partition(nums, pivot_index):\n    pivot = nums[pivot_index]\n    end = len(nums) - 1\n    nums[pivot_index], nums[end] = (nums[end], nums[pivot_index])\n    swap_index = 0\n    for i in range(len(nums)):\n        if nums[i] < pivot:\n            nums[i], nums[swap_index] = (nums[swap_index], nums[i])\n            swap_index += 1\n    nums[end], nums[swap_index] = (nums[swap_index], nums[end])\n    return swap_index\n\ndef quick_select(nums, k):\n    if len(nums) == 1:\n        return nums[0]\n    pivot_index = random.randint(0, len(nums) - 1)\n    pivot_index = partition(nums, pivot_index)\n    if k == pivot_index:\n        return nums[:k]\n    elif k < pivot_index:\n        return quick_select(nums[:pivot_index], k)\n    else:\n        return quick_select(nums[pivot_index + 1:], k - pivot_index - 1)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_numbers = quick_select(list(enumerate(arg1)), arg2)\n    return [index for index, _ in smallest_numbers]']",1000,0,0,0,	 exception: cannot unpack non-iterable int object
p3_find_n_smallest_number,prompt_2,79,"['import random\nfrom typing import List\n\ndef partition(nums, pivot_index):\n    pivot = nums[pivot_index]\n    end = len(nums) - 1\n    nums[pivot_index], nums[end] = (nums[end], nums[pivot_index])\n    swap_index = 0\n    for i in range(len(nums)):\n        if nums[i] < pivot:\n            nums[i], nums[swap_index] = (nums[swap_index], nums[i])\n            swap_index += 1\n    nums[end], nums[swap_index] = (nums[swap_index], nums[end])\n    return swap_index\n\ndef quick_select(nums, k):\n    if len(nums) == 1:\n        return nums[0]\n    pivot_index = random.randint(0, len(nums) - 1)\n    pivot_index = partition(nums, pivot_index)\n    if k == pivot_index:\n        return nums[:k]\n    elif k < pivot_index:\n        return quick_select(nums[:pivot_index], k)\n    else:\n        return quick_select(nums[pivot_index + 1:], k - pivot_index - 1)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_numbers = quick_select(list(enumerate(arg1)), arg2)\n    return [index for index, _ in smallest_numbers]']",10000,0,0,0,	 exception: cannot unpack non-iterable int object
p3_find_n_smallest_number,prompt_2,79,"['import random\nfrom typing import List\n\ndef partition(nums, pivot_index):\n    pivot = nums[pivot_index]\n    end = len(nums) - 1\n    nums[pivot_index], nums[end] = (nums[end], nums[pivot_index])\n    swap_index = 0\n    for i in range(len(nums)):\n        if nums[i] < pivot:\n            nums[i], nums[swap_index] = (nums[swap_index], nums[i])\n            swap_index += 1\n    nums[end], nums[swap_index] = (nums[swap_index], nums[end])\n    return swap_index\n\ndef quick_select(nums, k):\n    if len(nums) == 1:\n        return nums[0]\n    pivot_index = random.randint(0, len(nums) - 1)\n    pivot_index = partition(nums, pivot_index)\n    if k == pivot_index:\n        return nums[:k]\n    elif k < pivot_index:\n        return quick_select(nums[:pivot_index], k)\n    else:\n        return quick_select(nums[pivot_index + 1:], k - pivot_index - 1)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_numbers = quick_select(list(enumerate(arg1)), arg2)\n    return [index for index, _ in smallest_numbers]']",100000,0,0,0,	 exception: cannot unpack non-iterable int object
p3_find_n_smallest_number,prompt_2,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",1000,0.002792500192299485,0.0030124070099554956,0.0051889000460505486,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",10000,0.02585229999385774,0.02743268200661987,0.03138149995356798,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",100000,0.26520089991390705,0.27323680999921635,0.30972490017302334,N/A
p3_find_n_smallest_number,prompt_2,81,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_arg1 = [(-el, i) for i, el in enumerate(arg1)]\n    heapq.heapify(indexed_arg1)\n    while len(indexed_arg1) > arg2:\n        heapq.heappop(indexed_arg1)\n    return sorted((i for _, i in indexed_arg1))']",1000,0.023054799996316433,0.024071135008707643,0.026458500185981393,N/A
p3_find_n_smallest_number,prompt_2,81,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_arg1 = [(-el, i) for i, el in enumerate(arg1)]\n    heapq.heapify(indexed_arg1)\n    while len(indexed_arg1) > arg2:\n        heapq.heappop(indexed_arg1)\n    return sorted((i for _, i in indexed_arg1))']",10000,0.33293079980649054,0.3386589800077491,0.3723083999939263,N/A
p3_find_n_smallest_number,prompt_2,81,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_arg1 = [(-el, i) for i, el in enumerate(arg1)]\n    heapq.heapify(indexed_arg1)\n    while len(indexed_arg1) > arg2:\n        heapq.heappop(indexed_arg1)\n    return sorted((i for _, i in indexed_arg1))']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_2,82,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004704999970272183,0.005185417009051889,0.008120999904349446,N/A
p3_find_n_smallest_number,prompt_2,82,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.04412879981100559,0.04703161298297345,0.10364659992046654,N/A
p3_find_n_smallest_number,prompt_2,82,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[0] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4228899998124689,0.43300155501114207,0.49841780005954206,N/A
p3_find_n_smallest_number,prompt_2,83,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_k_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest_k_elems]\n    return indexes']",1000,0.0046912000980228186,0.0048880500136874614,0.005728600081056356,N/A
p3_find_n_smallest_number,prompt_2,83,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_k_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest_k_elems]\n    return indexes']",10000,0.04344670008867979,0.04540446598315612,0.0542947999201715,N/A
p3_find_n_smallest_number,prompt_2,83,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_k_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest_k_elems]\n    return indexes']",100000,0.423529600026086,0.4336544510000385,0.5215799999423325,N/A
p3_find_n_smallest_number,prompt_2,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return \'List is empty\'\n    elif arg2 > len(arg1):\n        return ""Number \'k\' is greater than length of list""\n    else:\n        smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n        return [i[0] for i in smallest]']",1000,0.004758799914270639,0.004961407009977848,0.007819900056347251,N/A
p3_find_n_smallest_number,prompt_2,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return \'List is empty\'\n    elif arg2 > len(arg1):\n        return ""Number \'k\' is greater than length of list""\n    else:\n        smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n        return [i[0] for i in smallest]']",10000,0.04403480002656579,0.04556563799502328,0.06980740022845566,N/A
p3_find_n_smallest_number,prompt_2,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return \'List is empty\'\n    elif arg2 > len(arg1):\n        return ""Number \'k\' is greater than length of list""\n    else:\n        smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n        return [i[0] for i in smallest]']",100000,0.42454289994202554,0.43415122298756614,0.490767499897629,N/A
p3_find_n_smallest_number,prompt_2,85,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [elem[0] for elem in smallest_elems]\n    return indexes']",1000,0.004576300038024783,0.004971360999625176,0.007369900122284889,N/A
p3_find_n_smallest_number,prompt_2,85,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [elem[0] for elem in smallest_elems]\n    return indexes']",10000,0.044263700023293495,0.046329425994772466,0.10684029990807176,N/A
p3_find_n_smallest_number,prompt_2,85,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [elem[0] for elem in smallest_elems]\n    return indexes']",100000,0.41578939999453723,0.43088670700322834,0.4730777000077069,N/A
p3_find_n_smallest_number,prompt_2,86,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return [j[1] for j in sorted([(num, i) for i, num in enumerate(arg1)], key=lambda x: x[0])[:arg2]]']",1000,0.009802199900150299,0.011322314999997616,0.04574780003167689,N/A
p3_find_n_smallest_number,prompt_2,86,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return [j[1] for j in sorted([(num, i) for i, num in enumerate(arg1)], key=lambda x: x[0])[:arg2]]']",10000,0.1567722000181675,0.16115177599247546,0.18307520006783307,N/A
p3_find_n_smallest_number,prompt_2,86,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return [j[1] for j in sorted([(num, i) for i, num in enumerate(arg1)], key=lambda x: x[0])[:arg2]]']",100000,2.282034099800512,2.3206690139928834,2.398605100112036,N/A
p3_find_n_smallest_number,prompt_2,87,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    num_index_list = [(num, i) for i, num in enumerate(arg1)]\n    for num_index in num_index_list:\n        heapq.heappush(heap, num_index)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",1000,0.008675999939441681,0.00933967700228095,0.014555499888956547,N/A
p3_find_n_smallest_number,prompt_2,87,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    num_index_list = [(num, i) for i, num in enumerate(arg1)]\n    for num_index in num_index_list:\n        heapq.heappush(heap, num_index)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",10000,0.09580660006031394,0.09907982298871502,0.10570189985446632,N/A
p3_find_n_smallest_number,prompt_2,87,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    num_index_list = [(num, i) for i, num in enumerate(arg1)]\n    for num_index in num_index_list:\n        heapq.heappush(heap, num_index)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",100000,1.1110810998361558,1.1332371190050616,1.202593700028956,N/A
p3_find_n_smallest_number,prompt_2,88,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in min_elems]']",1000,0.00462389993481338,0.004992486026603729,0.008655800018459558,N/A
p3_find_n_smallest_number,prompt_2,88,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in min_elems]']",10000,0.04390150005929172,0.04563818200025707,0.052857200149446726,N/A
p3_find_n_smallest_number,prompt_2,88,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in min_elems]']",100000,0.4207138998899609,0.43473166999872775,0.5086578000336885,N/A
p3_find_n_smallest_number,prompt_2,89,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.0050304001197218895,0.005375461005605757,0.006402599858120084,N/A
p3_find_n_smallest_number,prompt_2,89,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.06557360012084246,0.0675576430093497,0.09526140009984374,N/A
p3_find_n_smallest_number,prompt_2,89,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.7784784999676049,0.790823210994713,0.8722934001125395,N/A
p3_find_n_smallest_number,prompt_2,90,"['def funcImp(arg1, arg2):\n    return [index for num, index in sorted(((num, index) for index, num in enumerate(arg1)))[:arg2]]']",1000,0.01300389994867146,0.013794670002534986,0.020446999929845333,N/A
p3_find_n_smallest_number,prompt_2,90,"['def funcImp(arg1, arg2):\n    return [index for num, index in sorted(((num, index) for index, num in enumerate(arg1)))[:arg2]]']",10000,0.1890265999827534,0.19349495899630711,0.2153040999546647,N/A
p3_find_n_smallest_number,prompt_2,90,"['def funcImp(arg1, arg2):\n    return [index for num, index in sorted(((num, index) for index, num in enumerate(arg1)))[:arg2]]']",100000,3.01598670007661,3.089320573997684,3.1914142000023276,N/A
p3_find_n_smallest_number,prompt_2,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in smallest_nums]\n    return indices']",1000,0.00473059993237257,0.004910661000758409,0.006731499917805195,N/A
p3_find_n_smallest_number,prompt_2,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in smallest_nums]\n    return indices']",10000,0.043909400003030896,0.04607509798370302,0.12015299987979233,N/A
p3_find_n_smallest_number,prompt_2,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in smallest_nums]\n    return indices']",100000,0.4236437000799924,0.4331050079828128,0.49341090000234544,N/A
p3_find_n_smallest_number,prompt_2,92,"['from typing import List\nimport heapq\n\ndef funcImp(arr: List[int], k: int) -> List[int]:\n    if not arr or k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    heap = [(val, idx) for idx, val in enumerate(arr[:k])]\n    heapq.heapify(heap)\n    for idx in range(k, len(arr)):\n        if arr[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arr[idx], idx))\n    return [idx for val, idx in heap]']",1000,0.002253500046208501,0.0024013179913163186,0.0027343002147972584,N/A
p3_find_n_smallest_number,prompt_2,92,"['from typing import List\nimport heapq\n\ndef funcImp(arr: List[int], k: int) -> List[int]:\n    if not arr or k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    heap = [(val, idx) for idx, val in enumerate(arr[:k])]\n    heapq.heapify(heap)\n    for idx in range(k, len(arr)):\n        if arr[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arr[idx], idx))\n    return [idx for val, idx in heap]']",10000,0.022418499924242496,0.023881948008202016,0.036524000111967325,N/A
p3_find_n_smallest_number,prompt_2,92,"['from typing import List\nimport heapq\n\ndef funcImp(arr: List[int], k: int) -> List[int]:\n    if not arr or k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    heap = [(val, idx) for idx, val in enumerate(arr[:k])]\n    heapq.heapify(heap)\n    for idx in range(k, len(arr)):\n        if arr[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arr[idx], idx))\n    return [idx for val, idx in heap]']",100000,0.23368900013156235,0.23965779900550843,0.2588097001425922,N/A
p3_find_n_smallest_number,prompt_2,93,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=arg1.__getitem__)[:arg2]']",1000,0.005672200117260218,0.0060531859938055274,0.010878799948841333,N/A
p3_find_n_smallest_number,prompt_2,93,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=arg1.__getitem__)[:arg2]']",10000,0.09405709989368916,0.09751681400462985,0.13239589985460043,N/A
p3_find_n_smallest_number,prompt_2,93,"['def funcImp(arg1, arg2):\n    return sorted(range(len(arg1)), key=arg1.__getitem__)[:arg2]']",100000,1.441661500139162,1.4710605999990367,1.5506221000105143,N/A
p3_find_n_smallest_number,prompt_2,94,"['from typing import List\nfrom heapq import nsmallest\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated_list = list(enumerate(arg1))\n    smallest_nums_indices = [i for _, i in sorted(((n, i) for i, n in enumerated_list))[:arg2]]\n    return smallest_nums_indices']",1000,0.014001700095832348,0.015056728003546595,0.03568730014376342,N/A
p3_find_n_smallest_number,prompt_2,94,"['from typing import List\nfrom heapq import nsmallest\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated_list = list(enumerate(arg1))\n    smallest_nums_indices = [i for _, i in sorted(((n, i) for i, n in enumerated_list))[:arg2]]\n    return smallest_nums_indices']",10000,0.21230540005490184,0.2200145130022429,0.2274241999257356,N/A
p3_find_n_smallest_number,prompt_2,94,"['from typing import List\nfrom heapq import nsmallest\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated_list = list(enumerate(arg1))\n    smallest_nums_indices = [i for _, i in sorted(((n, i) for i, n in enumerated_list))[:arg2]]\n    return smallest_nums_indices']",100000,3.2725333000998944,3.368108453990426,3.541183599969372,N/A
p3_find_n_smallest_number,prompt_2,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated = list(enumerate(arg1))\n    heapq.heapify(enumerated)\n    smallest_elements = heapq.nsmallest(arg2, enumerated)\n    indices = [index for element, index in smallest_elements]\n    return indices']",1000,0.005864100065082312,0.006322304019704461,0.009066400118172169,N/A
p3_find_n_smallest_number,prompt_2,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated = list(enumerate(arg1))\n    heapq.heapify(enumerated)\n    smallest_elements = heapq.nsmallest(arg2, enumerated)\n    indices = [index for element, index in smallest_elements]\n    return indices']",10000,0.0627248000819236,0.06580922599881887,0.07223170017823577,N/A
p3_find_n_smallest_number,prompt_2,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated = list(enumerate(arg1))\n    heapq.heapify(enumerated)\n    smallest_elements = heapq.nsmallest(arg2, enumerated)\n    indices = [index for element, index in smallest_elements]\n    return indices']",100000,0.8042270999867469,0.8501128330104984,0.9626130999531597,N/A
p3_find_n_smallest_number,prompt_2,96,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indices = [arg1.index(num) for num in smallest_nums]\n    return indices']",1000,0.0026618000119924545,0.0029254779987968505,0.004143700003623962,N/A
p3_find_n_smallest_number,prompt_2,96,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indices = [arg1.index(num) for num in smallest_nums]\n    return indices']",10000,0.02178440010175109,0.023384284004569055,0.03614989994093776,N/A
p3_find_n_smallest_number,prompt_2,96,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indices = [arg1.index(num) for num in smallest_nums]\n    return indices']",100000,0.1567702000029385,0.16216127400286495,0.21084409998729825,N/A
p3_find_n_smallest_number,prompt_2,97,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if len(arg1) == 0 or len(arg1) <= arg2:\n        return [i for i in range(len(arg1))]\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    return [x[1] for x in max_heap]']",1000,0.002724400022998452,0.0029068970028311015,0.004502299940213561,N/A
p3_find_n_smallest_number,prompt_2,97,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if len(arg1) == 0 or len(arg1) <= arg2:\n        return [i for i in range(len(arg1))]\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    return [x[1] for x in max_heap]']",10000,0.025276799919083714,0.026584333011414857,0.034436400048434734,N/A
p3_find_n_smallest_number,prompt_2,97,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if len(arg1) == 0 or len(arg1) <= arg2:\n        return [i for i in range(len(arg1))]\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    return [x[1] for x in max_heap]']",100000,0.25840719998814166,0.265052354009822,0.3186351000331342,N/A
p3_find_n_smallest_number,prompt_2,98,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than the list length.""\n    else:\n        temp = sorted([(value, index) for index, value in enumerate(arg1)])[:arg2]\n        return [index for value, index in temp]']",1000,0.011834099888801575,0.012647392987273633,0.017984400037676096,N/A
p3_find_n_smallest_number,prompt_2,98,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than the list length.""\n    else:\n        temp = sorted([(value, index) for index, value in enumerate(arg1)])[:arg2]\n        return [index for value, index in temp]']",10000,0.18124069995246828,0.18539214399876072,0.19495050003752112,N/A
p3_find_n_smallest_number,prompt_2,98,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than the list length.""\n    else:\n        temp = sorted([(value, index) for index, value in enumerate(arg1)])[:arg2]\n        return [index for value, index in temp]']",100000,2.950724499998614,3.021703033992089,3.128032600041479,N/A
p3_find_n_smallest_number,prompt_2,99,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 < 1:\n        raise ValueError('arg2 must be a positive integer.')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should not be greater than the length of arg1.')\n    index_list = [(arg1[i], i) for i in range(len(arg1))]\n    smallest_indexes = [index for _, index in heapq.nsmallest(arg2, index_list)]\n    return smallest_indexes""]",1000,0.007782999891787767,0.008248898996971548,0.01143690012395382,N/A
p3_find_n_smallest_number,prompt_2,99,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 < 1:\n        raise ValueError('arg2 must be a positive integer.')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should not be greater than the length of arg1.')\n    index_list = [(arg1[i], i) for i in range(len(arg1))]\n    smallest_indexes = [index for _, index in heapq.nsmallest(arg2, index_list)]\n    return smallest_indexes""]",10000,0.07748159999027848,0.08100024500396102,0.1124318998772651,N/A
p3_find_n_smallest_number,prompt_2,99,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 < 1:\n        raise ValueError('arg2 must be a positive integer.')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should not be greater than the length of arg1.')\n    index_list = [(arg1[i], i) for i in range(len(arg1))]\n    smallest_indexes = [index for _, index in heapq.nsmallest(arg2, index_list)]\n    return smallest_indexes""]",100000,0.9629354001954198,0.9882149970065802,1.055341900093481,N/A
p3_find_n_smallest_number,prompt_2,100,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.004326399881392717,0.004672398997936398,0.006001699948683381,N/A
p3_find_n_smallest_number,prompt_2,100,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.04273559991270304,0.04527140100952238,0.057470800122246146,N/A
p3_find_n_smallest_number,prompt_2,100,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.436750799883157,0.44795763499569147,0.5059623001143336,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0032550999894738197,0.0033563890052028,0.0038942000828683376,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.029582899995148182,0.031053765001706778,0.06497260020114481,N/A
p3_find_n_smallest_number,prompt_3,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.2952117999084294,0.3028775490145199,0.3255295001436025,N/A
p3_find_n_smallest_number,prompt_3,2,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, num_index_pairs)\n    smallest_indexes = [index for num, index in smallest_pairs]\n    return smallest_indexes']",1000,0.0051454000640660524,0.005603251000866294,0.00781390001066029,N/A
p3_find_n_smallest_number,prompt_3,2,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, num_index_pairs)\n    smallest_indexes = [index for num, index in smallest_pairs]\n    return smallest_indexes']",10000,0.05383780016563833,0.05640584700508043,0.0744581997860223,N/A
p3_find_n_smallest_number,prompt_3,2,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index_pairs = [(num, index) for index, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, num_index_pairs)\n    smallest_indexes = [index for num, index in smallest_pairs]\n    return smallest_indexes']",100000,0.6858041998930275,0.7139835299947299,0.7949322999920696,N/A
p3_find_n_smallest_number,prompt_3,3,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_k_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in min_k_elements]']",1000,0.0047732999082654715,0.005061777983792126,0.007403000025078654,N/A
p3_find_n_smallest_number,prompt_3,3,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_k_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in min_k_elements]']",10000,0.043275800067931414,0.04684728101827204,0.15132639999501407,N/A
p3_find_n_smallest_number,prompt_3,3,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_k_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in min_k_elements]']",100000,0.42593679996207356,0.4379786960128695,0.5580413001589477,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    k_smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest_pairs]']",1000,0.004657299956306815,0.004922795996535569,0.006994500057771802,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    k_smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest_pairs]']",10000,0.0432631999719888,0.045795204024761914,0.05607130005955696,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    k_smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest_pairs]']",100000,0.4247027998790145,0.4366710739955306,0.5174269999843091,N/A
p3_find_n_smallest_number,prompt_3,5,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",1000,0.004722000099718571,0.005470625010784716,0.012764400104060769,N/A
p3_find_n_smallest_number,prompt_3,5,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",10000,0.04341279994696379,0.04572386099258438,0.06016170000657439,N/A
p3_find_n_smallest_number,prompt_3,5,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return None\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",100000,0.4261259001214057,0.43702632299857214,0.5037066000513732,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    return [idx for val, idx in heap]']",1000,0.0028196999337524176,0.0030429820087738337,0.005824399879202247,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    return [idx for val, idx in heap]']",10000,0.02635759999975562,0.027860777003224937,0.03822710015811026,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    return [idx for val, idx in heap]']",100000,0.2654403999913484,0.2731295730080456,0.33831109991297126,N/A
p3_find_n_smallest_number,prompt_3,7,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in sorted(result, key=lambda x: x[1])]\n    return indices']",1000,0.004561400040984154,0.004941280025523156,0.007108899997547269,N/A
p3_find_n_smallest_number,prompt_3,7,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in sorted(result, key=lambda x: x[1])]\n    return indices']",10000,0.044152399990707636,0.04582149799214676,0.04916439997032285,N/A
p3_find_n_smallest_number,prompt_3,7,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, v in sorted(result, key=lambda x: x[1])]\n    return indices']",100000,0.42752190004102886,0.43957209299085664,0.5237250998616219,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list size""\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i[0] for i in smallest_nums]\n    return indices']",1000,0.004571900004521012,0.004998871001880616,0.0071588000282645226,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list size""\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i[0] for i in smallest_nums]\n    return indices']",10000,0.04385369992814958,0.04621228299569338,0.05981100001372397,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list size""\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i[0] for i in smallest_nums]\n    return indices']",100000,0.42467940016649663,0.43678115798393263,0.48005570005625486,N/A
p3_find_n_smallest_number,prompt_3,9,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_tuples = [(value, index) for index, value in enumerate(arg1)]\n    smallest_tuples = heapq.nsmallest(arg2, index_tuples)\n    smallest_indexes = [t[1] for t in smallest_tuples]\n    return smallest_indexes']",1000,0.005291499895974994,0.005669420012272894,0.011305300053209066,N/A
p3_find_n_smallest_number,prompt_3,9,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_tuples = [(value, index) for index, value in enumerate(arg1)]\n    smallest_tuples = heapq.nsmallest(arg2, index_tuples)\n    smallest_indexes = [t[1] for t in smallest_tuples]\n    return smallest_indexes']",10000,0.0527175001334399,0.0565297060017474,0.07164389989338815,N/A
p3_find_n_smallest_number,prompt_3,9,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_tuples = [(value, index) for index, value in enumerate(arg1)]\n    smallest_tuples = heapq.nsmallest(arg2, index_tuples)\n    smallest_indexes = [t[1] for t in smallest_tuples]\n    return smallest_indexes']",100000,0.6870548999868333,0.7182196529931388,0.8167369000148028,N/A
p3_find_n_smallest_number,prompt_3,10,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.007336699869483709,0.007852662994991988,0.0101865001488477,N/A
p3_find_n_smallest_number,prompt_3,10,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.1100781001150608,0.11530572899850085,0.1315995000768453,N/A
p3_find_n_smallest_number,prompt_3,10,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.631527999881655,1.6664397600037046,1.7812737000640482,N/A
p3_find_n_smallest_number,prompt_3,11,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Argument \'k\' is greater than the size of the list!""\n    arg1_with_indexes = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, arg1_with_indexes)\n    return [index for value, index in k_smallest]']",1000,0.005272800102829933,0.005769560991320759,0.008667899994179606,N/A
p3_find_n_smallest_number,prompt_3,11,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Argument \'k\' is greater than the size of the list!""\n    arg1_with_indexes = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, arg1_with_indexes)\n    return [index for value, index in k_smallest]']",10000,0.05369480000808835,0.0566925929998979,0.11486099986359477,N/A
p3_find_n_smallest_number,prompt_3,11,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Argument \'k\' is greater than the size of the list!""\n    arg1_with_indexes = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, arg1_with_indexes)\n    return [index for value, index in k_smallest]']",100000,0.6877325000241399,0.7104312829999253,0.7778243001084775,N/A
p3_find_n_smallest_number,prompt_3,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    arg2 = min(arg2, len(arg1))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in smallest_elements]']",1000,0.0045733998995274305,0.005598979003261775,0.017780200112611055,N/A
p3_find_n_smallest_number,prompt_3,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    arg2 = min(arg2, len(arg1))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in smallest_elements]']",10000,0.043635700130835176,0.04563971101073548,0.05370009993202984,N/A
p3_find_n_smallest_number,prompt_3,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    arg2 = min(arg2, len(arg1))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [x[0] for x in smallest_elements]']",100000,0.4248387000989169,0.435637577008456,0.5171531999949366,N/A
p3_find_n_smallest_number,prompt_3,13,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indexes = [index for _, index in heapq.nlargest(arg2, heap)]\n    return indexes']",1000,0.01243970007635653,0.012875112004112453,0.01621210016310215,N/A
p3_find_n_smallest_number,prompt_3,13,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indexes = [index for _, index in heapq.nlargest(arg2, heap)]\n    return indexes']",10000,0.12060520006343722,0.125202212005388,0.16070140013471246,N/A
p3_find_n_smallest_number,prompt_3,13,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indexes = [index for _, index in heapq.nlargest(arg2, heap)]\n    return indexes']",100000,1.234825300052762,1.260611883008387,1.341228700010106,N/A
p3_find_n_smallest_number,prompt_3,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1) or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_elements]']",1000,0.00454539991915226,0.004955202001146972,0.008172099944204092,N/A
p3_find_n_smallest_number,prompt_3,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1) or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_elements]']",10000,0.04313999996520579,0.045456906980834905,0.06890229997225106,N/A
p3_find_n_smallest_number,prompt_3,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1) or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_elements]']",100000,0.4201414999552071,0.4325738660153002,0.4921383000910282,N/A
p3_find_n_smallest_number,prompt_3,15,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k cannot be greater than n'\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_elements_indexes = [i[0] for i in smallest_elements]\n    return smallest_elements_indexes""]",1000,0.004713099915534258,0.0056672060070559385,0.016999500105157495,N/A
p3_find_n_smallest_number,prompt_3,15,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k cannot be greater than n'\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_elements_indexes = [i[0] for i in smallest_elements]\n    return smallest_elements_indexes""]",10000,0.04403070011176169,0.04613201199797914,0.06276199989952147,N/A
p3_find_n_smallest_number,prompt_3,15,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k cannot be greater than n'\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_elements_indexes = [i[0] for i in smallest_elements]\n    return smallest_elements_indexes""]",100000,0.42246119980700314,0.4367074860073626,0.5032261000014842,N/A
p3_find_n_smallest_number,prompt_3,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004701999947428703,0.004969707992859185,0.006863099988549948,N/A
p3_find_n_smallest_number,prompt_3,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.043609100161120296,0.04641655999468639,0.06953309988602996,N/A
p3_find_n_smallest_number,prompt_3,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.42128359992057085,0.43363267299486324,0.5044455998577178,N/A
p3_find_n_smallest_number,prompt_3,17,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""arg2 can\'t be greater than the length of arg1""\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, set(arg1))]']",1000,0.0031795999966561794,0.003308399012312293,0.0039004001300781965,N/A
p3_find_n_smallest_number,prompt_3,17,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""arg2 can\'t be greater than the length of arg1""\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, set(arg1))]']",10000,0.031526099890470505,0.03337559500243515,0.05985029996372759,N/A
p3_find_n_smallest_number,prompt_3,17,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""arg2 can\'t be greater than the length of arg1""\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, set(arg1))]']",100000,0.48649160005152225,0.515225536993239,0.5523606999777257,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest]\n    return indexes']",1000,0.004559299908578396,0.00495734500233084,0.007292400114238262,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest]\n    return indexes']",10000,0.04377219988964498,0.04592556100571528,0.05540790013037622,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest]\n    return indexes']",100000,0.42221440002322197,0.43508602600777524,0.5420244000852108,N/A
p3_find_n_smallest_number,prompt_3,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.00446290010586381,0.004888392009306699,0.012374399928376079,N/A
p3_find_n_smallest_number,prompt_3,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.04226429993286729,0.04534686499973759,0.06019680015742779,N/A
p3_find_n_smallest_number,prompt_3,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.4360047001391649,0.4497497129929252,0.5146480998955667,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    sorted_list = sorted([(value, i) for i, value in enumerate(arg1)])\n    k_smallest = sorted_list[:arg2]\n    indices = [x[1] for x in k_smallest]\n    return sorted(indices)']",1000,0.01172549999319017,0.013183009983040393,0.029001799877732992,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    sorted_list = sorted([(value, i) for i, value in enumerate(arg1)])\n    k_smallest = sorted_list[:arg2]\n    indices = [x[1] for x in k_smallest]\n    return sorted(indices)']",10000,0.1855355000589043,0.19056192700518296,0.2384899000171572,N/A
p3_find_n_smallest_number,prompt_3,20,"['def funcImp(arg1, arg2):\n    sorted_list = sorted([(value, i) for i, value in enumerate(arg1)])\n    k_smallest = sorted_list[:arg2]\n    indices = [x[1] for x in k_smallest]\n    return sorted(indices)']",100000,2.9548487002030015,3.0201580060226845,3.1365408001001924,N/A
p3_find_n_smallest_number,prompt_3,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or len(arg1) < arg2:\n        return []\n    heap = arg1.copy()\n    heapq.heapify(heap)\n    smallest_nums = heapq.nsmallest(arg2, heap)\n    positions = [i for num in smallest_nums for i, j in enumerate(arg1) if j == num]\n    return positions']",1000,0.010186400031670928,0.010762356997001916,0.013143799966201186,N/A
p3_find_n_smallest_number,prompt_3,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or len(arg1) < arg2:\n        return []\n    heap = arg1.copy()\n    heapq.heapify(heap)\n    smallest_nums = heapq.nsmallest(arg2, heap)\n    positions = [i for num in smallest_nums for i, j in enumerate(arg1) if j == num]\n    return positions']",10000,0.11283370014280081,0.11905913101509213,0.2319074000697583,N/A
p3_find_n_smallest_number,prompt_3,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or len(arg1) < arg2:\n        return []\n    heap = arg1.copy()\n    heapq.heapify(heap)\n    smallest_nums = heapq.nsmallest(arg2, heap)\n    positions = [i for num in smallest_nums for i, j in enumerate(arg1) if j == num]\n    return positions']",100000,1.212877199985087,1.230126106995158,1.28214929997921,N/A
p3_find_n_smallest_number,prompt_3,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",1000,0.005223199957981706,0.005757177008781582,0.012024400057271123,N/A
p3_find_n_smallest_number,prompt_3,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",10000,0.06440670019946992,0.06710684799822048,0.11526079988107085,N/A
p3_find_n_smallest_number,prompt_3,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",100000,0.7546665000263602,0.7692683420120738,0.8172021999489516,N/A
p3_find_n_smallest_number,prompt_3,23,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return ""Error: The value of \'k\' is greater than the length of the list""\n    indexedArg1 = list(enumerate(arg1))\n    heapq.heapify(indexedArg1)\n    return [heapq.heappop(indexedArg1)[0] for _ in range(arg2)]']",1000,0.004127199994400144,0.004281127003487199,0.00496029993519187,N/A
p3_find_n_smallest_number,prompt_3,23,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return ""Error: The value of \'k\' is greater than the length of the list""\n    indexedArg1 = list(enumerate(arg1))\n    heapq.heapify(indexedArg1)\n    return [heapq.heappop(indexedArg1)[0] for _ in range(arg2)]']",10000,0.044948199996724725,0.04732600999996066,0.06802199990488589,N/A
p3_find_n_smallest_number,prompt_3,23,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return ""Error: The value of \'k\' is greater than the length of the list""\n    indexedArg1 = list(enumerate(arg1))\n    heapq.heapify(indexedArg1)\n    return [heapq.heappop(indexedArg1)[0] for _ in range(arg2)]']",100000,0.5842238001059741,0.6173049690038898,0.7008873999584466,N/A
p3_find_n_smallest_number,prompt_3,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    num_index = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, num_index)\n    index_list = [idx for num, idx in smallest_elements]\n    return index_list']",1000,0.005316699855029583,0.005510623010341078,0.006231999956071377,N/A
p3_find_n_smallest_number,prompt_3,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    num_index = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, num_index)\n    index_list = [idx for num, idx in smallest_elements]\n    return index_list']",10000,0.054007300175726414,0.05695595199242234,0.11512900004163384,N/A
p3_find_n_smallest_number,prompt_3,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    num_index = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, num_index)\n    index_list = [idx for num, idx in smallest_elements]\n    return index_list']",100000,0.6860050999093801,0.7126533280033618,0.8198049000930041,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.0038749000523239374,0.0042552200052887205,0.0072079000528901815,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.036159500014036894,0.038632185000460596,0.07014279998838902,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.3690895000472665,0.37954433100530877,0.45515980012714863,N/A
p3_find_n_smallest_number,prompt_3,26,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k is greater than the length of the list'\n    smallest_nums = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return [idx for val, idx in smallest_nums]""]",1000,0.005887600127607584,0.006298374994657934,0.010134899988770485,N/A
p3_find_n_smallest_number,prompt_3,26,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k is greater than the length of the list'\n    smallest_nums = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return [idx for val, idx in smallest_nums]""]",10000,0.05574009986594319,0.05729262498905882,0.06335239997133613,N/A
p3_find_n_smallest_number,prompt_3,26,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k is greater than the length of the list'\n    smallest_nums = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return [idx for val, idx in smallest_nums]""]",100000,0.5619634999893606,0.5752463599992916,0.7006716001778841,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the number of elements in the list""\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    return [idx for idx in range(len(arg1)) if arg1[idx] in smallest_nums]']",1000,0.0043091000989079475,0.00469452298944816,0.006372799864038825,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the number of elements in the list""\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    return [idx for idx in range(len(arg1)) if arg1[idx] in smallest_nums]']",10000,0.04218260012567043,0.044450779005419466,0.07110800012014806,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the number of elements in the list""\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    return [idx for idx in range(len(arg1)) if arg1[idx] in smallest_nums]']",100000,0.4266174000222236,0.43845725500024857,0.5237845999654382,N/A
p3_find_n_smallest_number,prompt_3,28,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexed_arg1 = [(num, i) for i, num in enumerate(arg1)]\n        smallest_pairs = heapq.nsmallest(arg2, indexed_arg1)\n        return [idx for num, idx in smallest_pairs]']",1000,0.005080399801954627,0.005982600993011147,0.013522899942472577,N/A
p3_find_n_smallest_number,prompt_3,28,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexed_arg1 = [(num, i) for i, num in enumerate(arg1)]\n        smallest_pairs = heapq.nsmallest(arg2, indexed_arg1)\n        return [idx for num, idx in smallest_pairs]']",10000,0.054279600037261844,0.057292719008401036,0.10771470004692674,N/A
p3_find_n_smallest_number,prompt_3,28,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    elif arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    else:\n        indexed_arg1 = [(num, i) for i, num in enumerate(arg1)]\n        smallest_pairs = heapq.nsmallest(arg2, indexed_arg1)\n        return [idx for num, idx in smallest_pairs]']",100000,0.6870319999288768,0.7144679140043445,0.7943056998774409,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    import heapq\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in result]']",1000,0.004557800013571978,0.004951468997169286,0.00795279978774488,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    import heapq\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in result]']",10000,0.04334459989331663,0.04551952799549326,0.05284909997135401,N/A
p3_find_n_smallest_number,prompt_3,29,"['def funcImp(arg1, arg2):\n    import heapq\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in result]']",100000,0.4339709999039769,0.4433775809989311,0.4854966001585126,N/A
p3_find_n_smallest_number,prompt_3,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_elements]']",1000,0.004718600073829293,0.005025820005685091,0.006427900167182088,N/A
p3_find_n_smallest_number,prompt_3,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_elements]']",10000,0.04302400001324713,0.04620855899527669,0.061926000053063035,N/A
p3_find_n_smallest_number,prompt_3,30,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_elements]']",100000,0.4179062999319285,0.4343044560076669,0.5027882000431418,N/A
p3_find_n_smallest_number,prompt_3,31,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers')\n    if not isinstance(arg2, int) or arg2 < 0:\n        raise ValueError('arg2 must be a non-negative integer')\n    if arg2 > len(arg1):\n        return []\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, num_index)\n    indexes = [index for num, index in smallest_k]\n    return indexes""]",1000,0.008034399943426251,0.008454291999805718,0.011250500101596117,N/A
p3_find_n_smallest_number,prompt_3,31,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers')\n    if not isinstance(arg2, int) or arg2 < 0:\n        raise ValueError('arg2 must be a non-negative integer')\n    if arg2 > len(arg1):\n        return []\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, num_index)\n    indexes = [index for num, index in smallest_k]\n    return indexes""]",10000,0.07938000001013279,0.08257699200883507,0.12404999998398125,N/A
p3_find_n_smallest_number,prompt_3,31,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers')\n    if not isinstance(arg2, int) or arg2 < 0:\n        raise ValueError('arg2 must be a non-negative integer')\n    if arg2 > len(arg1):\n        return []\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, num_index)\n    indexes = [index for num, index in smallest_k]\n    return indexes""]",100000,0.9602373999077827,0.9865237669949419,1.0920816001016647,N/A
p3_find_n_smallest_number,prompt_3,32,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    indexes = [i for val, i in heap]\n    return indexes']",1000,0.002252900041639805,0.0024009620025753973,0.005592399975284934,N/A
p3_find_n_smallest_number,prompt_3,32,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    indexes = [i for val, i in heap]\n    return indexes']",10000,0.02298829983919859,0.024302157000638546,0.032828900031745434,N/A
p3_find_n_smallest_number,prompt_3,32,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    indexes = [i for val, i in heap]\n    return indexes']",100000,0.231744599994272,0.23991252300562338,0.318229999858886,N/A
p3_find_n_smallest_number,prompt_3,33,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_numbers]']",1000,0.0045668999664485455,0.004897432995494455,0.006511799991130829,N/A
p3_find_n_smallest_number,prompt_3,33,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_numbers]']",10000,0.04368110001087189,0.04671945498324931,0.08997550001367927,N/A
p3_find_n_smallest_number,prompt_3,33,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_numbers]']",100000,0.42690619989298284,0.44322566298767924,0.5235439999960363,N/A
p3_find_n_smallest_number,prompt_3,34,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(heap)\n        indices.append(idx)\n    return indices']",1000,0.005203099921345711,0.005703399013727903,0.012245899997651577,N/A
p3_find_n_smallest_number,prompt_3,34,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(heap)\n        indices.append(idx)\n    return indices']",10000,0.06605160003527999,0.06790030099451543,0.07039250014349818,N/A
p3_find_n_smallest_number,prompt_3,34,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(heap)\n        indices.append(idx)\n    return indices']",100000,0.7416990001220256,0.7599235220113769,0.8092757998965681,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_k_nums = heapq.nsmallest(arg2, num_index)\n    return [index for num, index in smallest_k_nums]']",1000,0.005280700046569109,0.005609598006121814,0.009543499909341335,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_k_nums = heapq.nsmallest(arg2, num_index)\n    return [index for num, index in smallest_k_nums]']",10000,0.0527602001093328,0.054830179994460194,0.06670950003899634,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_k_nums = heapq.nsmallest(arg2, num_index)\n    return [index for num, index in smallest_k_nums]']",100000,0.6915871000383049,0.7156520870048553,0.8086901002097875,N/A
p3_find_n_smallest_number,prompt_3,36,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    assert arg2 <= len(arg1), 'arg2 cannot be greater than length of arg1'\n    indexed_numbers = list(enumerate(arg1))\n    smallest_numbers = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    smallest_numbers_indices = [x[0] for x in smallest_numbers]\n    return smallest_numbers_indices""]",1000,0.005346100078895688,0.0056663689878769215,0.006578000029549003,N/A
p3_find_n_smallest_number,prompt_3,36,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    assert arg2 <= len(arg1), 'arg2 cannot be greater than length of arg1'\n    indexed_numbers = list(enumerate(arg1))\n    smallest_numbers = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    smallest_numbers_indices = [x[0] for x in smallest_numbers]\n    return smallest_numbers_indices""]",10000,0.05384950013831258,0.05771079299040139,0.06787379994057119,N/A
p3_find_n_smallest_number,prompt_3,36,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    assert arg2 <= len(arg1), 'arg2 cannot be greater than length of arg1'\n    indexed_numbers = list(enumerate(arg1))\n    smallest_numbers = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    smallest_numbers_indices = [x[0] for x in smallest_numbers]\n    return smallest_numbers_indices""]",100000,0.6878704000264406,0.7248575939773582,0.8163040999788791,N/A
p3_find_n_smallest_number,prompt_3,37,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 1:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_elements]']",1000,0.00467739999294281,0.004923567988444119,0.0070633001159876585,N/A
p3_find_n_smallest_number,prompt_3,37,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 1:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_elements]']",10000,0.04400390014052391,0.0468493629922159,0.10193340014666319,N/A
p3_find_n_smallest_number,prompt_3,37,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1) or arg2 < 1:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_elements]']",100000,0.4221393000334501,0.4357721309945919,0.5032587999012321,N/A
p3_find_n_smallest_number,prompt_3,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_tuples = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    index_list = [i for i, v in sorted_tuples]\n    return index_list']",1000,0.0046993999276310205,0.004890906999353319,0.006778000155463815,N/A
p3_find_n_smallest_number,prompt_3,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_tuples = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    index_list = [i for i, v in sorted_tuples]\n    return index_list']",10000,0.044118800200521946,0.04598102299962193,0.07640230003744364,N/A
p3_find_n_smallest_number,prompt_3,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    sorted_tuples = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    index_list = [i for i, v in sorted_tuples]\n    return index_list']",100000,0.42522070021368563,0.43805724900215864,0.5421073001343757,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if len(arg1) <= arg2:\n        return range(len(arg1))\n    arg1_tuples = [(-value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(arg1_tuples)\n    while len(arg1_tuples) > arg2:\n        heapq.heappop(arg1_tuples)\n    indices = [t[1] for t in arg1_tuples]\n    return indices']",1000,0.023129200097173452,0.024388199001550676,0.028673300053924322,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if len(arg1) <= arg2:\n        return range(len(arg1))\n    arg1_tuples = [(-value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(arg1_tuples)\n    while len(arg1_tuples) > arg2:\n        heapq.heappop(arg1_tuples)\n    indices = [t[1] for t in arg1_tuples]\n    return indices']",10000,0.33160330005921423,0.33765955398324876,0.3473799000494182,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if len(arg1) <= arg2:\n        return range(len(arg1))\n    arg1_tuples = [(-value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(arg1_tuples)\n    while len(arg1_tuples) > arg2:\n        heapq.heappop(arg1_tuples)\n    indices = [t[1] for t in arg1_tuples]\n    return indices']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_3,40,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.004494599997997284,0.0046746950200758875,0.006892499979585409,N/A
p3_find_n_smallest_number,prompt_3,40,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.043049999978393316,0.045070200010668485,0.05737659987062216,N/A
p3_find_n_smallest_number,prompt_3,40,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.435004600090906,0.4493679920071736,0.5565231000073254,N/A
p3_find_n_smallest_number,prompt_3,41,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for _, idx in heap]']",1000,0.0028484000358730555,0.003080395988654345,0.0036059999838471413,N/A
p3_find_n_smallest_number,prompt_3,41,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for _, idx in heap]']",10000,0.022451800061389804,0.02448670200072229,0.04348889994435012,N/A
p3_find_n_smallest_number,prompt_3,41,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for _, idx in heap]']",100000,0.2311412999406457,0.24050615900428965,0.3197028001304716,N/A
p3_find_n_smallest_number,prompt_3,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indexes = [i for num, i in heap]\n    indexes.sort()\n    return indexes']",1000,0.004197300178930163,0.004734322004951537,0.013468600111082196,N/A
p3_find_n_smallest_number,prompt_3,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indexes = [i for num, i in heap]\n    indexes.sort()\n    return indexes']",10000,0.038817299995571375,0.04144450399791822,0.04908920009620488,N/A
p3_find_n_smallest_number,prompt_3,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indexes = [i for num, i in heap]\n    indexes.sort()\n    return indexes']",100000,0.39796780003234744,0.41092835598858074,0.4771298000123352,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the list""\n    temp_list = [-i for i in arg1]\n    heapq.heapify(temp_list)\n    return [arg1.index(-i) for i in heapq.nlargest(arg2, temp_list)]']",1000,0.005879899952560663,0.006416765996254981,0.011754099978134036,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the list""\n    temp_list = [-i for i in arg1]\n    heapq.heapify(temp_list)\n    return [arg1.index(-i) for i in heapq.nlargest(arg2, temp_list)]']",10000,0.05389209999702871,0.057919527993071825,0.1116486000828445,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the list""\n    temp_list = [-i for i in arg1]\n    heapq.heapify(temp_list)\n    return [arg1.index(-i) for i in heapq.nlargest(arg2, temp_list)]']",100000,0.5569076000247151,0.5712856640038081,0.6556486000772566,N/A
p3_find_n_smallest_number,prompt_3,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [i for i, v in smallest_elements]\n    smallest_indexes.sort(key=lambda x: arg1[x])\n    return smallest_indexes']",1000,0.004753099987283349,0.004971146997995675,0.005910599837079644,N/A
p3_find_n_smallest_number,prompt_3,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [i for i, v in smallest_elements]\n    smallest_indexes.sort(key=lambda x: arg1[x])\n    return smallest_indexes']",10000,0.04348749993368983,0.04601715800585225,0.09580020001158118,N/A
p3_find_n_smallest_number,prompt_3,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [i for i, v in smallest_elements]\n    smallest_indexes.sort(key=lambda x: arg1[x])\n    return smallest_indexes']",100000,0.4271935001015663,0.4376893369923346,0.5209406998474151,N/A
p3_find_n_smallest_number,prompt_3,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",1000,0.005202700151130557,0.005513556012883783,0.007984000025317073,N/A
p3_find_n_smallest_number,prompt_3,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",10000,0.06653070007450879,0.06798367900773883,0.07098020007833838,N/A
p3_find_n_smallest_number,prompt_3,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",100000,0.7834536000154912,0.8034633660013788,0.8542162999510765,N/A
p3_find_n_smallest_number,prompt_3,46,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    else:\n        pq = [(-num, idx) for idx, num in enumerate(arg1)]\n        heapq.heapify(pq)\n        return [idx for num, idx in heapq.nsmallest(arg2, pq)]']",1000,0.008489199914038181,0.008775477001909166,0.009461099980399013,N/A
p3_find_n_smallest_number,prompt_3,46,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    else:\n        pq = [(-num, idx) for idx, num in enumerate(arg1)]\n        heapq.heapify(pq)\n        return [idx for num, idx in heapq.nsmallest(arg2, pq)]']",10000,0.09744829987175763,0.10247436600504443,0.11636639991775155,N/A
p3_find_n_smallest_number,prompt_3,46,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    else:\n        pq = [(-num, idx) for idx, num in enumerate(arg1)]\n        heapq.heapify(pq)\n        return [idx for num, idx in heapq.nsmallest(arg2, pq)]']",100000,1.2489157000090927,1.2948058459977618,1.3710784001741558,N/A
p3_find_n_smallest_number,prompt_3,47,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, num in smallest_nums]\n    return smallest_indexes']",1000,0.00457400013692677,0.004870039005763829,0.005515099968761206,N/A
p3_find_n_smallest_number,prompt_3,47,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, num in smallest_nums]\n    return smallest_indexes']",10000,0.04373259982094169,0.04610934301046655,0.0687855000142008,N/A
p3_find_n_smallest_number,prompt_3,47,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, num in smallest_nums]\n    return smallest_indexes']",100000,0.42586749978363514,0.4356440300075337,0.49405770003795624,N/A
p3_find_n_smallest_number,prompt_3,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [index for index, value in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004724800121039152,0.00486952800070867,0.005788400070741773,N/A
p3_find_n_smallest_number,prompt_3,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [index for index, value in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.04332729987800121,0.045599010991863906,0.05553889996372163,N/A
p3_find_n_smallest_number,prompt_3,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [index for index, value in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4241526999976486,0.4341078339959495,0.4981845999136567,N/A
p3_find_n_smallest_number,prompt_3,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_k']",1000,0.0032337000593543053,0.003400122995954007,0.004593899939209223,N/A
p3_find_n_smallest_number,prompt_3,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_k']",10000,0.029114800039678812,0.030917586006689816,0.041293400106951594,N/A
p3_find_n_smallest_number,prompt_3,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_k']",100000,0.29553040000610054,0.305491393012926,0.41436320007778704,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated_arg1 = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k_values = heapq.nsmallest(arg2, enumerated_arg1)\n    smallest_k_indices = [index for value, index in smallest_k_values]\n    return smallest_k_indices']",1000,0.005320299882441759,0.005597074003890157,0.007844300009310246,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated_arg1 = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k_values = heapq.nsmallest(arg2, enumerated_arg1)\n    smallest_k_indices = [index for value, index in smallest_k_values]\n    return smallest_k_indices']",10000,0.05245509999804199,0.05635862299706787,0.11129639996215701,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    enumerated_arg1 = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k_values = heapq.nsmallest(arg2, enumerated_arg1)\n    smallest_k_indices = [index for value, index in smallest_k_values]\n    return smallest_k_indices']",100000,0.689235300058499,0.7124749679910019,0.8179885998833925,N/A
p3_find_n_smallest_number,prompt_3,51,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    nums_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_elems_with_indexes = heapq.nsmallest(arg2, nums_with_indexes)\n    return [index for num, index in smallest_elems_with_indexes]']",1000,0.005286799976602197,0.005583124004770071,0.007343300152570009,N/A
p3_find_n_smallest_number,prompt_3,51,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    nums_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_elems_with_indexes = heapq.nsmallest(arg2, nums_with_indexes)\n    return [index for num, index in smallest_elems_with_indexes]']",10000,0.05337640014477074,0.05543452499201521,0.06699929991737008,N/A
p3_find_n_smallest_number,prompt_3,51,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    nums_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_elems_with_indexes = heapq.nsmallest(arg2, nums_with_indexes)\n    return [index for num, index in smallest_elems_with_indexes]']",100000,0.6857835000846535,0.7120988920028322,0.8073652999009937,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        indexes.append(arg1.index(element))\n    return sorted(indexes)']",1000,0.0027560999151319265,0.00295002699829638,0.004203699994832277,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        indexes.append(arg1.index(element))\n    return sorted(indexes)']",10000,0.022356299916282296,0.02324783200165257,0.02778620016761124,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        indexes.append(arg1.index(element))\n    return sorted(indexes)']",100000,0.15803140006028116,0.16397651500068605,0.21757579990662634,N/A
p3_find_n_smallest_number,prompt_3,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    MaxHeap = []\n    for i in range(arg2):\n        MaxHeap.append((-arg1[i], i))\n    heapq.heapify(MaxHeap)\n    for i in range(arg2, len(arg1)):\n        if -MaxHeap[0][0] > arg1[i]:\n            heapq.heapreplace(MaxHeap, (-arg1[i], i))\n    indexes = sorted([i for _, i in MaxHeap], key=lambda x: arg1[x])\n    return indexes']",1000,0.002898500068113208,0.003135224999859929,0.0057200000155717134,N/A
p3_find_n_smallest_number,prompt_3,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    MaxHeap = []\n    for i in range(arg2):\n        MaxHeap.append((-arg1[i], i))\n    heapq.heapify(MaxHeap)\n    for i in range(arg2, len(arg1)):\n        if -MaxHeap[0][0] > arg1[i]:\n            heapq.heapreplace(MaxHeap, (-arg1[i], i))\n    indexes = sorted([i for _, i in MaxHeap], key=lambda x: arg1[x])\n    return indexes']",10000,0.027255100198090076,0.028657782985828818,0.03459109994582832,N/A
p3_find_n_smallest_number,prompt_3,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    MaxHeap = []\n    for i in range(arg2):\n        MaxHeap.append((-arg1[i], i))\n    heapq.heapify(MaxHeap)\n    for i in range(arg2, len(arg1)):\n        if -MaxHeap[0][0] > arg1[i]:\n            heapq.heapreplace(MaxHeap, (-arg1[i], i))\n    indexes = sorted([i for _, i in MaxHeap], key=lambda x: arg1[x])\n    return indexes']",100000,0.2740363001357764,0.28217093999730425,0.3590237000025809,N/A
p3_find_n_smallest_number,prompt_3,54,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should be less than or equal to the length of arg1')\n    indexed_arg1 = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, indexed_arg1)\n    smallest_k_indexes = [index for num, index in smallest_k_tuples]\n    return smallest_k_indexes""]",1000,0.005322299897670746,0.005526987984776497,0.006811700062826276,N/A
p3_find_n_smallest_number,prompt_3,54,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should be less than or equal to the length of arg1')\n    indexed_arg1 = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, indexed_arg1)\n    smallest_k_indexes = [index for num, index in smallest_k_tuples]\n    return smallest_k_indexes""]",10000,0.053251300007104874,0.05511885398533195,0.07111950009129941,N/A
p3_find_n_smallest_number,prompt_3,54,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 should be less than or equal to the length of arg1')\n    indexed_arg1 = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, indexed_arg1)\n    smallest_k_indexes = [index for num, index in smallest_k_tuples]\n    return smallest_k_indexes""]",100000,0.6862790999002755,0.7119998839939945,0.8060581998433918,N/A
p3_find_n_smallest_number,prompt_3,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_nums_indexes']",1000,0.0032621000427752733,0.0034932309994474054,0.005855799885466695,N/A
p3_find_n_smallest_number,prompt_3,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_nums_indexes']",10000,0.028967299964278936,0.0315692110080272,0.08758600009605289,N/A
p3_find_n_smallest_number,prompt_3,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_nums_indexes']",100000,0.2949967000167817,0.30375035900855435,0.3707948001101613,N/A
p3_find_n_smallest_number,prompt_3,56,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, x in smallest_elements]\n    return smallest_indices']",1000,0.004628299968317151,0.004940524010453373,0.006426299922168255,N/A
p3_find_n_smallest_number,prompt_3,56,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, x in smallest_elements]\n    return smallest_indices']",10000,0.0434491999913007,0.04611130600096658,0.06679549999535084,N/A
p3_find_n_smallest_number,prompt_3,56,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, x in smallest_elements]\n    return smallest_indices']",100000,0.42513529979623854,0.4399889559857547,0.5281179999001324,N/A
p3_find_n_smallest_number,prompt_3,57,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: k should be less or equal to the length of the array'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",1000,0.0032265998888760805,0.0034256170014850796,0.00504309986717999,N/A
p3_find_n_smallest_number,prompt_3,57,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: k should be less or equal to the length of the array'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",10000,0.02892359998077154,0.030679493993520737,0.0421681001316756,N/A
p3_find_n_smallest_number,prompt_3,57,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: k should be less or equal to the length of the array'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",100000,0.2944940999150276,0.3045178640051745,0.38996950001455843,N/A
p3_find_n_smallest_number,prompt_3,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.002922399900853634,0.0031189149734564127,0.0048448999878019094,N/A
p3_find_n_smallest_number,prompt_3,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.026553999865427613,0.02814563101157546,0.04528629989363253,N/A
p3_find_n_smallest_number,prompt_3,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.2719305001664907,0.27987995599163695,0.34633839991874993,N/A
p3_find_n_smallest_number,prompt_3,59,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(-value, index) for index, value in enumerate(arg1)]\n    smallest_elems = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_elems]']",1000,0.00584929995238781,0.00633558000670746,0.009473999962210655,N/A
p3_find_n_smallest_number,prompt_3,59,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(-value, index) for index, value in enumerate(arg1)]\n    smallest_elems = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_elems]']",10000,0.06129779992625117,0.0647988870088011,0.10825660009868443,N/A
p3_find_n_smallest_number,prompt_3,59,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(-value, index) for index, value in enumerate(arg1)]\n    smallest_elems = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_elems]']",100000,0.8919777998235077,0.9233795250183903,0.9942410001531243,N/A
p3_find_n_smallest_number,prompt_3,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest]\n    return indexes']",1000,0.004666299792006612,0.004980863996315747,0.007504099979996681,N/A
p3_find_n_smallest_number,prompt_3,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest]\n    return indexes']",10000,0.0437411000020802,0.04613991898717359,0.07646790007129312,N/A
p3_find_n_smallest_number,prompt_3,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest]\n    return indexes']",100000,0.4253162001259625,0.43676099301548676,0.5164255001582205,N/A
p3_find_n_smallest_number,prompt_3,61,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    res_indexes = [arg1.index(value) for value in smallest_nums]\n    return res_indexes']",1000,0.002751499880105257,0.0029463449912145736,0.003951099934056401,N/A
p3_find_n_smallest_number,prompt_3,61,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    res_indexes = [arg1.index(value) for value in smallest_nums]\n    return res_indexes']",10000,0.021800999995321035,0.023483493011444808,0.047899199882522225,N/A
p3_find_n_smallest_number,prompt_3,61,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    res_indexes = [arg1.index(value) for value in smallest_nums]\n    return res_indexes']",100000,0.15592740010470152,0.1631160080130212,0.22983610001392663,N/A
p3_find_n_smallest_number,prompt_3,62,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_nums_indices']",1000,0.0032493998296558857,0.0033722350047901274,0.0041362999472767115,N/A
p3_find_n_smallest_number,prompt_3,62,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_nums_indices']",10000,0.028974700020626187,0.03189196900231764,0.12833909993059933,N/A
p3_find_n_smallest_number,prompt_3,62,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_nums_indices']",100000,0.29594670003280044,0.3045513329934329,0.38977030012756586,N/A
p3_find_n_smallest_number,prompt_3,63,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_nums]']",1000,0.004636000143364072,0.004910500003024936,0.0060576999094337225,N/A
p3_find_n_smallest_number,prompt_3,63,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_nums]']",10000,0.04394669993780553,0.046241454996634276,0.0654847000259906,N/A
p3_find_n_smallest_number,prompt_3,63,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_nums]']",100000,0.42264120001345873,0.43592092199251053,0.4987486000172794,N/A
p3_find_n_smallest_number,prompt_3,64,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return 'Number of elements in list less than k'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, num in smallest_nums]\n    return indexes""]",1000,0.004560899920761585,0.004913071980699897,0.0065599000081419945,N/A
p3_find_n_smallest_number,prompt_3,64,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return 'Number of elements in list less than k'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, num in smallest_nums]\n    return indexes""]",10000,0.0438425000756979,0.0461754069942981,0.07659199996851385,N/A
p3_find_n_smallest_number,prompt_3,64,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return 'Number of elements in list less than k'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, num in smallest_nums]\n    return indexes""]",100000,0.4244210000615567,0.438928904987406,0.504032599972561,N/A
p3_find_n_smallest_number,prompt_3,65,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = [(-val, index) for index, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -arg1[index] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-arg1[index], index))\n    return [index for val, index in max_heap]']",1000,0.003091100137680769,0.003281596996821463,0.003987599862739444,N/A
p3_find_n_smallest_number,prompt_3,65,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = [(-val, index) for index, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -arg1[index] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-arg1[index], index))\n    return [index for val, index in max_heap]']",10000,0.029678700026124716,0.03133397499797866,0.053420200012624264,N/A
p3_find_n_smallest_number,prompt_3,65,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = [(-val, index) for index, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -arg1[index] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-arg1[index], index))\n    return [index for val, index in max_heap]']",100000,0.2956232000142336,0.3050602159812115,0.33651429996825755,N/A
p3_find_n_smallest_number,prompt_3,66,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    return sorted((index for num, index in min_heap))']",1000,0.004228400066494942,0.004558898990508169,0.0068818998988717794,N/A
p3_find_n_smallest_number,prompt_3,66,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    return sorted((index for num, index in min_heap))']",10000,0.03899169992655516,0.04185257699340582,0.0623902000952512,N/A
p3_find_n_smallest_number,prompt_3,66,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    return sorted((index for num, index in min_heap))']",100000,0.4019984998740256,0.4123801749991253,0.5053477000910789,N/A
p3_find_n_smallest_number,prompt_3,67,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004697700031101704,0.004992405993398279,0.007632400142028928,N/A
p3_find_n_smallest_number,prompt_3,67,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.04403190012089908,0.046136774013284594,0.06883229990489781,N/A
p3_find_n_smallest_number,prompt_3,67,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.4269066001288593,0.43998394600581375,0.5368204000405967,N/A
p3_find_n_smallest_number,prompt_3,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = []\n    for num in range(arg2):\n        smallest.append(heapq.heappop(heap)[1])\n    return sorted(smallest)']",1000,0.006129499990493059,0.006527729977387935,0.009228299837559462,N/A
p3_find_n_smallest_number,prompt_3,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = []\n    for num in range(arg2):\n        smallest.append(heapq.heappop(heap)[1])\n    return sorted(smallest)']",10000,0.07557900017127395,0.07825782998697832,0.08251950005069375,N/A
p3_find_n_smallest_number,prompt_3,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = []\n    for num in range(arg2):\n        smallest.append(heapq.heappop(heap)[1])\n    return sorted(smallest)']",100000,0.8884858000092208,0.9290981870051473,0.9902959999162704,N/A
p3_find_n_smallest_number,prompt_3,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1 = [(v, i) for i, v in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, arg1)\n    return [i for v, i in smallest]']",1000,0.005220200167968869,0.005633479002863168,0.008589999983087182,N/A
p3_find_n_smallest_number,prompt_3,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1 = [(v, i) for i, v in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, arg1)\n    return [i for v, i in smallest]']",10000,0.05352599988691509,0.05652039399603382,0.1324120000936091,N/A
p3_find_n_smallest_number,prompt_3,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1 = [(v, i) for i, v in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, arg1)\n    return [i for v, i in smallest]']",100000,0.689839799888432,0.7136235980130732,0.7934212998952717,N/A
p3_find_n_smallest_number,prompt_3,70,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004728000145405531,0.005103730005212128,0.00835909997113049,N/A
p3_find_n_smallest_number,prompt_3,70,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.0436057997867465,0.04600156500702724,0.09875909984111786,N/A
p3_find_n_smallest_number,prompt_3,70,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.420957800000906,0.4325386100029573,0.5330776998307556,N/A
p3_find_n_smallest_number,prompt_3,71,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than list size'\n    else:\n        lst = [(value, index) for index, value in enumerate(arg1)]\n        heapq.heapify(lst)\n        return [heapq.heappop(lst)[1] for _ in range(arg2)]""]",1000,0.005190500058233738,0.005501501990947872,0.0072704998310655355,N/A
p3_find_n_smallest_number,prompt_3,71,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than list size'\n    else:\n        lst = [(value, index) for index, value in enumerate(arg1)]\n        heapq.heapify(lst)\n        return [heapq.heappop(lst)[1] for _ in range(arg2)]""]",10000,0.0628150999546051,0.06571124301059171,0.07276710006408393,N/A
p3_find_n_smallest_number,prompt_3,71,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than list size'\n    else:\n        lst = [(value, index) for index, value in enumerate(arg1)]\n        heapq.heapify(lst)\n        return [heapq.heappop(lst)[1] for _ in range(arg2)]""]",100000,0.774645600002259,0.8067999969935045,0.8975215000100434,N/A
p3_find_n_smallest_number,prompt_3,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    max_heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for idx in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[idx]:\n            heapq.heapreplace(max_heap, (-arg1[idx], idx))\n    return sorted((idx for _, idx in max_heap))']",1000,0.002729400061070919,0.002943364989478141,0.004238100023940206,N/A
p3_find_n_smallest_number,prompt_3,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    max_heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for idx in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[idx]:\n            heapq.heapreplace(max_heap, (-arg1[idx], idx))\n    return sorted((idx for _, idx in max_heap))']",10000,0.025198000017553568,0.027900254004634917,0.06993290013633668,N/A
p3_find_n_smallest_number,prompt_3,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    max_heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for idx in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[idx]:\n            heapq.heapreplace(max_heap, (-arg1[idx], idx))\n    return sorted((idx for _, idx in max_heap))']",100000,0.25650330004282296,0.2728924089996144,0.3425435000099242,N/A
p3_find_n_smallest_number,prompt_3,73,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, [-arg1[i], i])\n    indices = [i[1] for i in heap]\n    return indices']",1000,0.0028621999081224203,0.0033341139857657252,0.008974200114607811,N/A
p3_find_n_smallest_number,prompt_3,73,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, [-arg1[i], i])\n    indices = [i[1] for i in heap]\n    return indices']",10000,0.027178200194612145,0.028487524988595397,0.03767089988104999,N/A
p3_find_n_smallest_number,prompt_3,73,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, [-arg1[i], i])\n    indices = [i[1] for i in heap]\n    return indices']",100000,0.2756150998175144,0.2855114000034519,0.37264069984667003,N/A
p3_find_n_smallest_number,prompt_3,74,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""k can\'t be greater than the length of the list""\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)), key=lambda x: x[0])\n    return [idx for val, idx in smallest_elements]']",1000,0.006979099940508604,0.007594507986214012,0.013094000052660704,N/A
p3_find_n_smallest_number,prompt_3,74,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""k can\'t be greater than the length of the list""\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)), key=lambda x: x[0])\n    return [idx for val, idx in smallest_elements]']",10000,0.0669694000389427,0.07083476000931115,0.11778529989533126,N/A
p3_find_n_smallest_number,prompt_3,74,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""k can\'t be greater than the length of the list""\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)), key=lambda x: x[0])\n    return [idx for val, idx in smallest_elements]']",100000,0.6827721998561174,0.6999495450081303,0.7790040001273155,N/A
p3_find_n_smallest_number,prompt_3,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return [i for _, i in heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))]']",1000,0.005762499989941716,0.0061769259860739115,0.006841900059953332,N/A
p3_find_n_smallest_number,prompt_3,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return [i for _, i in heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))]']",10000,0.05455310014076531,0.05790541900089011,0.1257297000847757,N/A
p3_find_n_smallest_number,prompt_3,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    return [i for _, i in heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))]']",100000,0.5567026000935584,0.5711392039945349,0.6436151000671089,N/A
p3_find_n_smallest_number,prompt_3,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return -1\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return sorted([-val for val, i in heap], key=lambda x: -x)']",1000,0.0031975999008864164,0.0033929180121049286,0.004576000152155757,N/A
p3_find_n_smallest_number,prompt_3,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return -1\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return sorted([-val for val, i in heap], key=lambda x: -x)']",10000,0.029786499915644526,0.03175750199938193,0.08834720007143915,N/A
p3_find_n_smallest_number,prompt_3,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return -1\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return sorted([-val for val, i in heap], key=lambda x: -x)']",100000,0.2970189999323338,0.3065359169943258,0.33414330007508397,N/A
p3_find_n_smallest_number,prompt_3,77,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0031404998153448105,0.0033606620016507806,0.005332699976861477,N/A
p3_find_n_smallest_number,prompt_3,77,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.028774899896234274,0.030658232003916056,0.03724999981932342,N/A
p3_find_n_smallest_number,prompt_3,77,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.2945352999959141,0.30411374600604174,0.37022510007955134,N/A
p3_find_n_smallest_number,prompt_3,78,"['from typing import List, Dict\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> Dict[int, int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return {}\n    result = dict()\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    for _ in range(arg2):\n        min_value, min_idx = heapq.heappop(min_heap)\n        result[min_idx] = min_value\n    return result']",1000,0.005065900040790439,0.005479266000911594,0.007008099928498268,N/A
p3_find_n_smallest_number,prompt_3,78,"['from typing import List, Dict\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> Dict[int, int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return {}\n    result = dict()\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    for _ in range(arg2):\n        min_value, min_idx = heapq.heappop(min_heap)\n        result[min_idx] = min_value\n    return result']",10000,0.06529100006446242,0.0685079220077023,0.08370029996149242,N/A
p3_find_n_smallest_number,prompt_3,78,"['from typing import List, Dict\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> Dict[int, int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return {}\n    result = dict()\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    for _ in range(arg2):\n        min_value, min_idx = heapq.heappop(min_heap)\n        result[min_idx] = min_value\n    return result']",100000,0.7630782001651824,0.7807748999865726,0.820257700048387,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in min_elements]']",1000,0.004610799951478839,0.004964765999466181,0.007274199975654483,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in min_elements]']",10000,0.04308929992839694,0.04563958001788706,0.06268339999951422,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in min_elements]']",100000,0.42516180011443794,0.4378016230161302,0.5160912000574172,N/A
p3_find_n_smallest_number,prompt_3,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",1000,0.004712600028142333,0.005078771985135972,0.008909899974241853,N/A
p3_find_n_smallest_number,prompt_3,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",10000,0.04433829989284277,0.04608518799534068,0.06489900010637939,N/A
p3_find_n_smallest_number,prompt_3,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",100000,0.42761139990761876,0.43772182199405507,0.4990937998518348,N/A
p3_find_n_smallest_number,prompt_3,81,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    neg_arg1 = [(-elem, index) for index, elem in enumerate(arg1)]\n    heapq.heapify(neg_arg1)\n    smallest_k = heapq.nsmallest(arg2, neg_arg1)\n    return [index for _, index in smallest_k]']",1000,0.008218300063163042,0.008641679994761944,0.013417100068181753,N/A
p3_find_n_smallest_number,prompt_3,81,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    neg_arg1 = [(-elem, index) for index, elem in enumerate(arg1)]\n    heapq.heapify(neg_arg1)\n    smallest_k = heapq.nsmallest(arg2, neg_arg1)\n    return [index for _, index in smallest_k]']",10000,0.09906829986721277,0.10273033501347527,0.17664749990217388,N/A
p3_find_n_smallest_number,prompt_3,81,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    neg_arg1 = [(-elem, index) for index, elem in enumerate(arg1)]\n    heapq.heapify(neg_arg1)\n    smallest_k = heapq.nsmallest(arg2, neg_arg1)\n    return [index for _, index in smallest_k]']",100000,1.2620019998867065,1.2914356070035138,1.354671400040388,N/A
p3_find_n_smallest_number,prompt_3,82,"[""import heapq\nfrom typing import List, Union\n\ndef funcImp(arg1: List[int], arg2: int) -> Union[List[int], str]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: arg2 must be between 1 and length of arg1 inclusive.'\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest_numbers]\n    return indexes""]",1000,0.004682699916884303,0.004940567994490266,0.007657399866729975,N/A
p3_find_n_smallest_number,prompt_3,82,"[""import heapq\nfrom typing import List, Union\n\ndef funcImp(arg1: List[int], arg2: int) -> Union[List[int], str]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: arg2 must be between 1 and length of arg1 inclusive.'\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest_numbers]\n    return indexes""]",10000,0.04532860009931028,0.04758359500439838,0.06396759999915957,N/A
p3_find_n_smallest_number,prompt_3,82,"[""import heapq\nfrom typing import List, Union\n\ndef funcImp(arg1: List[int], arg2: int) -> Union[List[int], str]:\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Error: arg2 must be between 1 and length of arg1 inclusive.'\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest_numbers]\n    return indexes""]",100000,0.4242940000258386,0.4361030709859915,0.5085613999981433,N/A
p3_find_n_smallest_number,prompt_3,83,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, idx))\n    return sorted([index for _, index in min_heap])']",1000,0.0042594000697135925,0.004455497998278588,0.0055587999522686005,N/A
p3_find_n_smallest_number,prompt_3,83,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, idx))\n    return sorted([index for _, index in min_heap])']",10000,0.039242600090801716,0.04151064701145515,0.04828389990143478,N/A
p3_find_n_smallest_number,prompt_3,83,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, idx))\n    return sorted([index for _, index in min_heap])']",100000,0.3950755998957902,0.40680248199962077,0.45066950004547834,N/A
p3_find_n_smallest_number,prompt_3,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",1000,0.004729199921712279,0.005260971013922244,0.012365599861368537,N/A
p3_find_n_smallest_number,prompt_3,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",10000,0.043696300126612186,0.045805058998521414,0.05926699982956052,N/A
p3_find_n_smallest_number,prompt_3,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_nums]\n    return indexes']",100000,0.42280309996567667,0.43392178599955517,0.49728229991160333,N/A
p3_find_n_smallest_number,prompt_3,85,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    neg_nums_with_idx = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(neg_nums_with_idx)\n    smallest_nums_with_idx = heapq.nsmallest(arg2, neg_nums_with_idx)\n    smallest_idxs = [idx for num, idx in smallest_nums_with_idx]\n    return smallest_idxs']",1000,0.008002700051292777,0.008681552018970251,0.012659400003030896,N/A
p3_find_n_smallest_number,prompt_3,85,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    neg_nums_with_idx = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(neg_nums_with_idx)\n    smallest_nums_with_idx = heapq.nsmallest(arg2, neg_nums_with_idx)\n    smallest_idxs = [idx for num, idx in smallest_nums_with_idx]\n    return smallest_idxs']",10000,0.09779300005175173,0.10209112700074911,0.11173310014419258,N/A
p3_find_n_smallest_number,prompt_3,85,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    neg_nums_with_idx = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(neg_nums_with_idx)\n    smallest_nums_with_idx = heapq.nsmallest(arg2, neg_nums_with_idx)\n    smallest_idxs = [idx for num, idx in smallest_nums_with_idx]\n    return smallest_idxs']",100000,1.2747088999021798,1.3113251440040767,1.3770250000525266,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    neg_list = [(-num, idx) for idx, num in enumerate(arg1)]\n    heap = neg_list[:arg2]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        num = arg1[idx]\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, idx))\n    indices = [idx for num, idx in heap]\n    indices.sort(key=lambda idx: arg1[idx])\n    return indices']",1000,0.006546299904584885,0.006884628012776375,0.01192730013281107,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    neg_list = [(-num, idx) for idx, num in enumerate(arg1)]\n    heap = neg_list[:arg2]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        num = arg1[idx]\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, idx))\n    indices = [idx for num, idx in heap]\n    indices.sort(key=lambda idx: arg1[idx])\n    return indices']",10000,0.06760590011253953,0.07043411100283264,0.08224430005066097,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    neg_list = [(-num, idx) for idx, num in enumerate(arg1)]\n    heap = neg_list[:arg2]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        num = arg1[idx]\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, idx))\n    indices = [idx for num, idx in heap]\n    indices.sort(key=lambda idx: arg1[idx])\n    return indices']",100000,0.9836701001040637,1.0166809920035302,1.085567600093782,N/A
p3_find_n_smallest_number,prompt_3,87,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Invalid input: k is greater than the length of the list'\n    indexed_values = list(enumerate(arg1))\n    smallest_values = heapq.nsmallest(arg2, indexed_values, key=lambda x: x[1])\n    indexes = [i for i, v in smallest_values]\n    return indexes""]",1000,0.005493300035595894,0.005736901022028178,0.0076459001284092665,N/A
p3_find_n_smallest_number,prompt_3,87,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Invalid input: k is greater than the length of the list'\n    indexed_values = list(enumerate(arg1))\n    smallest_values = heapq.nsmallest(arg2, indexed_values, key=lambda x: x[1])\n    indexes = [i for i, v in smallest_values]\n    return indexes""]",10000,0.054335299879312515,0.05725333998212591,0.0694514000788331,N/A
p3_find_n_smallest_number,prompt_3,87,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Invalid input: k is greater than the length of the list'\n    indexed_values = list(enumerate(arg1))\n    smallest_values = heapq.nsmallest(arg2, indexed_values, key=lambda x: x[1])\n    indexes = [i for i, v in smallest_values]\n    return indexes""]",100000,0.691616099793464,0.7254629340046086,0.7999672000296414,N/A
p3_find_n_smallest_number,prompt_3,88,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than list length""\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest]']",1000,0.004589200019836426,0.0051141899963840845,0.012798800133168697,N/A
p3_find_n_smallest_number,prompt_3,88,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than list length""\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest]']",10000,0.04385880008339882,0.04582249100087211,0.06264760019257665,N/A
p3_find_n_smallest_number,prompt_3,88,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than list length""\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest]']",100000,0.419822100084275,0.432994007000234,0.4887438998557627,N/A
p3_find_n_smallest_number,prompt_3,89,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'The array has fewer items than K'\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes""]",1000,0.005194899858906865,0.00552401298424229,0.010555800050497055,N/A
p3_find_n_smallest_number,prompt_3,89,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'The array has fewer items than K'\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes""]",10000,0.06674739997833967,0.06861277998890727,0.08710649982094765,N/A
p3_find_n_smallest_number,prompt_3,89,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'The array has fewer items than K'\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes""]",100000,0.7702218999620527,0.7842990230047144,0.8363304999656975,N/A
p3_find_n_smallest_number,prompt_3,90,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.003949400037527084,0.004131189994513989,0.004884799942374229,N/A
p3_find_n_smallest_number,prompt_3,90,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.03605469991452992,0.038027197015471755,0.044840400107204914,N/A
p3_find_n_smallest_number,prompt_3,90,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.3690005000680685,0.3788127370039001,0.43472700007259846,N/A
p3_find_n_smallest_number,prompt_3,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, arg1)]']",1000,0.002734699985012412,0.0028528870176523923,0.00308589986525476,N/A
p3_find_n_smallest_number,prompt_3,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, arg1)]']",10000,0.02175440010614693,0.023150871996767818,0.02770139998756349,N/A
p3_find_n_smallest_number,prompt_3,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, arg1)]']",100000,0.15599639993160963,0.1613652230077423,0.19713590014725924,N/A
p3_find_n_smallest_number,prompt_3,92,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    paired = [(value, index) for index, value in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, paired)\n    return [index for value, index in smallest_pairs]']",1000,0.005308799911290407,0.005592141994275153,0.00809809984639287,N/A
p3_find_n_smallest_number,prompt_3,92,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    paired = [(value, index) for index, value in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, paired)\n    return [index for value, index in smallest_pairs]']",10000,0.05264200014062226,0.0555141380103305,0.14192100008949637,N/A
p3_find_n_smallest_number,prompt_3,92,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    paired = [(value, index) for index, value in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, paired)\n    return [index for value, index in smallest_pairs]']",100000,0.6834961997810751,0.7116519509977661,0.8184424999635667,N/A
p3_find_n_smallest_number,prompt_3,93,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    if len(arg1) == 1 or arg2 == len(arg1):\n        return list(range(len(arg1)))\n    if arg2 <= 0:\n        return []\n    h = []\n    for i, n in enumerate(arg1):\n        if len(h) < arg2:\n            heapq.heappush(h, (-n, i))\n        elif n < -h[0][0]:\n            heapq.heappop(h)\n            heapq.heappush(h, (-n, i))\n    return [i for _, i in h]']",1000,0.0041766001377254725,0.00453068800503388,0.0086731999181211,N/A
p3_find_n_smallest_number,prompt_3,93,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    if len(arg1) == 1 or arg2 == len(arg1):\n        return list(range(len(arg1)))\n    if arg2 <= 0:\n        return []\n    h = []\n    for i, n in enumerate(arg1):\n        if len(h) < arg2:\n            heapq.heappush(h, (-n, i))\n        elif n < -h[0][0]:\n            heapq.heappop(h)\n            heapq.heappush(h, (-n, i))\n    return [i for _, i in h]']",10000,0.038629400078207254,0.04112685700180009,0.058891299879178405,N/A
p3_find_n_smallest_number,prompt_3,93,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    if len(arg1) == 1 or arg2 == len(arg1):\n        return list(range(len(arg1)))\n    if arg2 <= 0:\n        return []\n    h = []\n    for i, n in enumerate(arg1):\n        if len(h) < arg2:\n            heapq.heappush(h, (-n, i))\n        elif n < -h[0][0]:\n            heapq.heappop(h)\n            heapq.heappush(h, (-n, i))\n    return [i for _, i in h]']",100000,0.39640159998089075,0.41030664400430394,0.5065079999621958,N/A
p3_find_n_smallest_number,prompt_3,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.004298300016671419,0.004576842985115946,0.004983999999240041,N/A
p3_find_n_smallest_number,prompt_3,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.04300850001163781,0.04522567899897695,0.06924390001222491,N/A
p3_find_n_smallest_number,prompt_3,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.4378347001038492,0.4464771330053918,0.4930634999182075,N/A
p3_find_n_smallest_number,prompt_3,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in sorted(smallest)]']",1000,0.005248999921604991,0.0055614490015432234,0.008397999918088317,N/A
p3_find_n_smallest_number,prompt_3,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in sorted(smallest)]']",10000,0.0532662000041455,0.055455088000744585,0.07622819999232888,N/A
p3_find_n_smallest_number,prompt_3,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in sorted(smallest)]']",100000,0.6859565998893231,0.710221090009436,0.798139400081709,N/A
p3_find_n_smallest_number,prompt_3,96,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, num in smallest_nums]\n    return smallest_indices']",1000,0.004577700048685074,0.0049395889998413624,0.01066360017284751,N/A
p3_find_n_smallest_number,prompt_3,96,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, num in smallest_nums]\n    return smallest_indices']",10000,0.04390139994211495,0.04575534298783168,0.08347219997085631,N/A
p3_find_n_smallest_number,prompt_3,96,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, num in smallest_nums]\n    return smallest_indices']",100000,0.4234891999512911,0.43205354100558907,0.5020358001347631,N/A
p3_find_n_smallest_number,prompt_3,97,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        raise ValueError('K is larger than the size of the given list!')\n    max_heap = []\n    for i, e in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(max_heap, (-e, i))\n        elif e < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-e, i))\n    return sorted([i for e, i in max_heap])""]",1000,0.003535500029101968,0.003708869011607021,0.004449999891221523,N/A
p3_find_n_smallest_number,prompt_3,97,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        raise ValueError('K is larger than the size of the given list!')\n    max_heap = []\n    for i, e in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(max_heap, (-e, i))\n        elif e < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-e, i))\n    return sorted([i for e, i in max_heap])""]",10000,0.03265950013883412,0.034672900985460726,0.048044800059869885,N/A
p3_find_n_smallest_number,prompt_3,97,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        raise ValueError('K is larger than the size of the given list!')\n    max_heap = []\n    for i, e in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(max_heap, (-e, i))\n        elif e < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-e, i))\n    return sorted([i for e, i in max_heap])""]",100000,0.3272130999248475,0.3389422030025162,0.4243275001645088,N/A
p3_find_n_smallest_number,prompt_3,98,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or not arg1:\n        return []\n    num_with_indices = list(enumerate(arg1))\n    smallest_k_nums = heapq.nsmallest(arg2, num_with_indices, key=lambda x: x[1])\n    indices = [index for index, num in smallest_k_nums]\n    return indices']",1000,0.005507800029590726,0.005833519990555942,0.008944599889218807,N/A
p3_find_n_smallest_number,prompt_3,98,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or not arg1:\n        return []\n    num_with_indices = list(enumerate(arg1))\n    smallest_k_nums = heapq.nsmallest(arg2, num_with_indices, key=lambda x: x[1])\n    indices = [index for index, num in smallest_k_nums]\n    return indices']",10000,0.05421179998666048,0.056302139998879286,0.06459670001640916,N/A
p3_find_n_smallest_number,prompt_3,98,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or not arg1:\n        return []\n    num_with_indices = list(enumerate(arg1))\n    smallest_k_nums = heapq.nsmallest(arg2, num_with_indices, key=lambda x: x[1])\n    indices = [index for index, num in smallest_k_nums]\n    return indices']",100000,0.687109800055623,0.7223512090137229,0.7770600998774171,N/A
p3_find_n_smallest_number,prompt_3,99,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indexes = sorted((i for _, i in heap))\n    return indexes']",1000,0.004137800075113773,0.004467125011142343,0.0063530998304486275,N/A
p3_find_n_smallest_number,prompt_3,99,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indexes = sorted((i for _, i in heap))\n    return indexes']",10000,0.03877840004861355,0.04107240799115971,0.04977309983223677,N/A
p3_find_n_smallest_number,prompt_3,99,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    indexes = sorted((i for _, i in heap))\n    return indexes']",100000,0.3921765999402851,0.40651055299909783,0.46880969987250865,N/A
p3_find_n_smallest_number,prompt_3,100,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    k_smallest_values = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [x[0] for x in k_smallest_values]\n    return k_smallest_indexes']",1000,0.004616100108250976,0.004954186019022018,0.008900800021365285,N/A
p3_find_n_smallest_number,prompt_3,100,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    k_smallest_values = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [x[0] for x in k_smallest_values]\n    return k_smallest_indexes']",10000,0.04336860007606447,0.04569195899181068,0.06114790006540716,N/A
p3_find_n_smallest_number,prompt_3,100,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    k_smallest_values = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [x[0] for x in k_smallest_values]\n    return k_smallest_indexes']",100000,0.42183529981411994,0.43342226700624453,0.5086725999135524,N/A
p3_find_n_smallest_number,prompt_4,1,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [elem[0] for elem in smallest_elements]']",1000,0.004722000099718571,0.004862008006311953,0.006297500105574727,N/A
p3_find_n_smallest_number,prompt_4,1,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [elem[0] for elem in smallest_elements]']",10000,0.04368889983743429,0.045331667999271304,0.055425000144168735,N/A
p3_find_n_smallest_number,prompt_4,1,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [elem[0] for elem in smallest_elements]']",100000,0.42108720005489886,0.4316134119941853,0.5092678000219166,N/A
p3_find_n_smallest_number,prompt_4,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, arg1)]']",1000,0.0027396997902542353,0.0029296839982271197,0.004155899863690138,N/A
p3_find_n_smallest_number,prompt_4,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, arg1)]']",10000,0.021781600080430508,0.023249277996364982,0.029980699997395277,N/A
p3_find_n_smallest_number,prompt_4,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [arg1.index(i) for i in heapq.nsmallest(arg2, arg1)]']",100000,0.15694969985634089,0.1630608999915421,0.24174449988640845,N/A
p3_find_n_smallest_number,prompt_4,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    lst = [(value, index) for index, value in enumerate(arg1)]\n    heap = [-i for i in lst[:arg2]]\n    heapq.heapify(heap)\n    for i in lst[arg2:]:\n        if i < -heap[0]:\n            heapq.heapreplace(heap, -i)\n    return [i[1] for i in [-num for num in heap]]']",1000,0,0,0,	 exception: bad operand type for unary -: 'tuple'
p3_find_n_smallest_number,prompt_4,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    lst = [(value, index) for index, value in enumerate(arg1)]\n    heap = [-i for i in lst[:arg2]]\n    heapq.heapify(heap)\n    for i in lst[arg2:]:\n        if i < -heap[0]:\n            heapq.heapreplace(heap, -i)\n    return [i[1] for i in [-num for num in heap]]']",10000,0,0,0,	 exception: bad operand type for unary -: 'tuple'
p3_find_n_smallest_number,prompt_4,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    lst = [(value, index) for index, value in enumerate(arg1)]\n    heap = [-i for i in lst[:arg2]]\n    heapq.heapify(heap)\n    for i in lst[arg2:]:\n        if i < -heap[0]:\n            heapq.heapreplace(heap, -i)\n    return [i[1] for i in [-num for num in heap]]']",100000,0,0,0,	 exception: bad operand type for unary -: 'tuple'
p3_find_n_smallest_number,prompt_4,4,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, v in enumerate(arg1):\n        heapq.heappush(heap, (v, i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.0076477001421153545,0.008169024994131177,0.013658700045198202,N/A
p3_find_n_smallest_number,prompt_4,4,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, v in enumerate(arg1):\n        heapq.heappush(heap, (v, i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.08792499988339841,0.091510735983029,0.1052489997819066,N/A
p3_find_n_smallest_number,prompt_4,4,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, v in enumerate(arg1):\n        heapq.heappush(heap, (v, i))\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.9968425999395549,1.0185076280054637,1.0709720000158995,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= len(arg1):\n        return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]\n    else:\n        return None']",1000,0.004348000045865774,0.004637533992063254,0.005536099895834923,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= len(arg1):\n        return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]\n    else:\n        return None']",10000,0.04279189999215305,0.04524014600785449,0.05961239989846945,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= len(arg1):\n        return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]\n    else:\n        return None']",100000,0.4359172999393195,0.44659220400033517,0.5172365000471473,N/A
p3_find_n_smallest_number,prompt_4,6,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0031394001562148333,0.0033841030043549837,0.004703799961134791,N/A
p3_find_n_smallest_number,prompt_4,6,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.02881880011409521,0.03047361900564283,0.03477609995752573,N/A
p3_find_n_smallest_number,prompt_4,6,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29236680013127625,0.3016570009943098,0.37994090002030134,N/A
p3_find_n_smallest_number,prompt_4,7,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0032321999315172434,0.003320123986341059,0.0036048998590558767,N/A
p3_find_n_smallest_number,prompt_4,7,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.028759100008755922,0.030412544012069703,0.035464700078591704,N/A
p3_find_n_smallest_number,prompt_4,7,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29262649989686906,0.3018960769963451,0.35506799980066717,N/A
p3_find_n_smallest_number,prompt_4,8,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",1000,0.004681499907746911,0.005096400994807482,0.01192509988322854,N/A
p3_find_n_smallest_number,prompt_4,8,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",10000,0.04281580005772412,0.04592923200223595,0.09267030004411936,N/A
p3_find_n_smallest_number,prompt_4,8,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])]']",100000,0.42284630006179214,0.434613710003905,0.47783409990370274,N/A
p3_find_n_smallest_number,prompt_4,9,"['def funcImp(arg1, arg2):\n    import heapq\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in result]']",1000,0.004570499993860722,0.005083960990887136,0.00960189988836646,N/A
p3_find_n_smallest_number,prompt_4,9,"['def funcImp(arg1, arg2):\n    import heapq\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in result]']",10000,0.0437183000613004,0.045702889019157734,0.05302200000733137,N/A
p3_find_n_smallest_number,prompt_4,9,"['def funcImp(arg1, arg2):\n    import heapq\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in result]']",100000,0.42485160008072853,0.4369271750189364,0.49430410005152225,N/A
p3_find_n_smallest_number,prompt_4,10,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""Return the indexes of the k smallest elements.\n    Args:\n    arg1 (List[int]): List of input integers.\n    arg2 (int): Number of smallest elements needed.\n    """"""\n    if not arg1 or arg2 > len(arg1):\n        return []\n    enumerated_nums = list(enumerate(arg1))\n    smallest_nums = heapq.nsmallest(arg2, enumerated_nums, key=lambda x: x[1])\n    return [index for index, num in smallest_nums]']",1000,0.005354799795895815,0.005624722999054938,0.008978900033980608,N/A
p3_find_n_smallest_number,prompt_4,10,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""Return the indexes of the k smallest elements.\n    Args:\n    arg1 (List[int]): List of input integers.\n    arg2 (int): Number of smallest elements needed.\n    """"""\n    if not arg1 or arg2 > len(arg1):\n        return []\n    enumerated_nums = list(enumerate(arg1))\n    smallest_nums = heapq.nsmallest(arg2, enumerated_nums, key=lambda x: x[1])\n    return [index for index, num in smallest_nums]']",10000,0.05543519998900592,0.057655004991684106,0.07821279997006059,N/A
p3_find_n_smallest_number,prompt_4,10,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""Return the indexes of the k smallest elements.\n    Args:\n    arg1 (List[int]): List of input integers.\n    arg2 (int): Number of smallest elements needed.\n    """"""\n    if not arg1 or arg2 > len(arg1):\n        return []\n    enumerated_nums = list(enumerate(arg1))\n    smallest_nums = heapq.nsmallest(arg2, enumerated_nums, key=lambda x: x[1])\n    return [index for index, num in smallest_nums]']",100000,0.7004628998693079,0.733365172999911,0.8409233998972923,N/A
p3_find_n_smallest_number,prompt_4,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return sorted((idx for val, idx in smallest_elements))']",1000,0.00586130004376173,0.0063154870085418225,0.008977599907666445,N/A
p3_find_n_smallest_number,prompt_4,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return sorted((idx for val, idx in smallest_elements))']",10000,0.054282099939882755,0.05705121899722144,0.061209699837490916,N/A
p3_find_n_smallest_number,prompt_4,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return sorted((idx for val, idx in smallest_elements))']",100000,0.5577981001697481,0.571796035009902,0.6373145000543445,N/A
p3_find_n_smallest_number,prompt_4,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    numbers_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_numbers_with_indexes = heapq.nsmallest(arg2, numbers_with_indexes)\n    return [index for num, index in smallest_numbers_with_indexes]']",1000,0.0053477000910788774,0.0056764239934273064,0.0068922999780625105,N/A
p3_find_n_smallest_number,prompt_4,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    numbers_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_numbers_with_indexes = heapq.nsmallest(arg2, numbers_with_indexes)\n    return [index for num, index in smallest_numbers_with_indexes]']",10000,0.05238240002654493,0.05545043998397887,0.1178727000951767,N/A
p3_find_n_smallest_number,prompt_4,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    numbers_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_numbers_with_indexes = heapq.nsmallest(arg2, numbers_with_indexes)\n    return [index for num, index in smallest_numbers_with_indexes]']",100000,0.6967955001164228,0.724701932000462,0.817558899987489,N/A
p3_find_n_smallest_number,prompt_4,13,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be larger than the size of the list arg1')\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indices = sorted([i for num, i in heap], key=lambda x: arg1[x])\n    return indices""]",1000,0.003110900055617094,0.0033018790069036185,0.0037193000316619873,N/A
p3_find_n_smallest_number,prompt_4,13,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be larger than the size of the list arg1')\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indices = sorted([i for num, i in heap], key=lambda x: arg1[x])\n    return indices""]",10000,0.02908400003798306,0.03136324001243338,0.09870170010253787,N/A
p3_find_n_smallest_number,prompt_4,13,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be larger than the size of the list arg1')\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indices = sorted([i for num, i in heap], key=lambda x: arg1[x])\n    return indices""]",100000,0.2934232000261545,0.30368213300127533,0.3928016999270767,N/A
p3_find_n_smallest_number,prompt_4,14,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i in map(arg1.index, heapq.nsmallest(arg2, arg1))]']",1000,0.0027580999303609133,0.0028545980039052666,0.00338079989887774,N/A
p3_find_n_smallest_number,prompt_4,14,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i in map(arg1.index, heapq.nsmallest(arg2, arg1))]']",10000,0.022065400145947933,0.02335335799027234,0.029726500157266855,N/A
p3_find_n_smallest_number,prompt_4,14,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i in map(arg1.index, heapq.nsmallest(arg2, arg1))]']",100000,0.15747779980301857,0.16316739399451763,0.21917049982585013,N/A
p3_find_n_smallest_number,prompt_4,15,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    enumerated_arg1 = list(enumerate(arg1))\n    heapq.heapify(enumerated_arg1)\n    result = [heapq.heappop(enumerated_arg1) for _ in range(arg2)]\n    return [index for index, value in sorted(result, key=lambda x: x[1])]']",1000,0.004105899948626757,0.004339763990137726,0.005854200106114149,N/A
p3_find_n_smallest_number,prompt_4,15,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    enumerated_arg1 = list(enumerate(arg1))\n    heapq.heapify(enumerated_arg1)\n    result = [heapq.heappop(enumerated_arg1) for _ in range(arg2)]\n    return [index for index, value in sorted(result, key=lambda x: x[1])]']",10000,0.04457369982264936,0.04649779801955447,0.05507840006612241,N/A
p3_find_n_smallest_number,prompt_4,15,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    enumerated_arg1 = list(enumerate(arg1))\n    heapq.heapify(enumerated_arg1)\n    result = [heapq.heappop(enumerated_arg1) for _ in range(arg2)]\n    return [index for index, value in sorted(result, key=lambda x: x[1])]']",100000,0.5828030998818576,0.6162294630031101,0.6789121998008341,N/A
p3_find_n_smallest_number,prompt_4,16,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.002904399996623397,0.00306326701072976,0.0037966000381857157,N/A
p3_find_n_smallest_number,prompt_4,16,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.026329200016334653,0.028327518976293504,0.05663640005514026,N/A
p3_find_n_smallest_number,prompt_4,16,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.26463069999590516,0.27264661697903647,0.3411588999442756,N/A
p3_find_n_smallest_number,prompt_4,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0032627000473439693,0.003732229000888765,0.00962579995393753,N/A
p3_find_n_smallest_number,prompt_4,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.029241400072351098,0.031058513009920716,0.039406900061294436,N/A
p3_find_n_smallest_number,prompt_4,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29438089998438954,0.3044023290113546,0.37257459992542863,N/A
p3_find_n_smallest_number,prompt_4,18,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        raise ValueError('`arg2` must be between 1 and the length of `arg1`')\n    arg1_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(arg1_with_indices)\n    smallest_k_nums_indices = [heapq.heappop(arg1_with_indices)[1] for _ in range(arg2)]\n    return smallest_k_nums_indices""]",1000,0.005221599945798516,0.005487314010970294,0.00744650000706315,N/A
p3_find_n_smallest_number,prompt_4,18,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        raise ValueError('`arg2` must be between 1 and the length of `arg1`')\n    arg1_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(arg1_with_indices)\n    smallest_k_nums_indices = [heapq.heappop(arg1_with_indices)[1] for _ in range(arg2)]\n    return smallest_k_nums_indices""]",10000,0.06695040012709796,0.06869985500117765,0.09830700000748038,N/A
p3_find_n_smallest_number,prompt_4,18,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 1 or arg2 > len(arg1):\n        raise ValueError('`arg2` must be between 1 and the length of `arg1`')\n    arg1_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(arg1_with_indices)\n    smallest_k_nums_indices = [heapq.heappop(arg1_with_indices)[1] for _ in range(arg2)]\n    return smallest_k_nums_indices""]",100000,0.7464976001065224,0.7731617010151968,0.827936900081113,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i, val in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-val, i))\n        elif val < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-val, i))\n    return sorted([i for _, i in min_heap])']",1000,0.004219399997964501,0.004662286997772753,0.007818599930033088,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i, val in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-val, i))\n        elif val < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-val, i))\n    return sorted([i for _, i in min_heap])']",10000,0.039392500184476376,0.04180031699128449,0.04664409998804331,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i, val in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-val, i))\n        elif val < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-val, i))\n    return sorted([i for _, i in min_heap])']",100000,0.3978227998595685,0.40828228500671687,0.48191830003634095,N/A
p3_find_n_smallest_number,prompt_4,20,"['import heapq\nfrom typing import List, Union\n\ndef funcImp(arg1: List[int], arg2: int) -> Union[List[int], str]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than the length of the list""\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arg1)\n    result = [heapq.heappop(indexed_arg1)[1] for _ in range(min(len(arg1), arg2))]\n    return result']",1000,0.005276399897411466,0.0055620369920507074,0.007569399895146489,N/A
p3_find_n_smallest_number,prompt_4,20,"['import heapq\nfrom typing import List, Union\n\ndef funcImp(arg1: List[int], arg2: int) -> Union[List[int], str]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than the length of the list""\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arg1)\n    result = [heapq.heappop(indexed_arg1)[1] for _ in range(min(len(arg1), arg2))]\n    return result']",10000,0.06457209982909262,0.06713062199996785,0.10592080000787973,N/A
p3_find_n_smallest_number,prompt_4,20,"['import heapq\nfrom typing import List, Union\n\ndef funcImp(arg1: List[int], arg2: int) -> Union[List[int], str]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than the length of the list""\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arg1)\n    result = [heapq.heappop(indexed_arg1)[1] for _ in range(min(len(arg1), arg2))]\n    return result']",100000,0.7405578999314457,0.7569567489949987,0.7958641999866813,N/A
p3_find_n_smallest_number,prompt_4,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted((i for i in map(arg1.index, heapq.nsmallest(arg2, set(arg1)))))']",1000,0.0031973998993635178,0.003511996997985989,0.00835149991326034,N/A
p3_find_n_smallest_number,prompt_4,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted((i for i in map(arg1.index, heapq.nsmallest(arg2, set(arg1)))))']",10000,0.03158990014344454,0.03314359799725935,0.04531760001555085,N/A
p3_find_n_smallest_number,prompt_4,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return sorted((i for i in map(arg1.index, heapq.nsmallest(arg2, set(arg1)))))']",100000,0.48511760006658733,0.5168809070019051,0.5816712998785079,N/A
p3_find_n_smallest_number,prompt_4,22,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Number of elements to find is greater than array length'\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [x[1] for x in heap]\n    return indexes""]",1000,0.0029290001839399338,0.003120572005864233,0.0034944999497383833,N/A
p3_find_n_smallest_number,prompt_4,22,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Number of elements to find is greater than array length'\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [x[1] for x in heap]\n    return indexes""]",10000,0.026910499902442098,0.028335547987371684,0.031585299875587225,N/A
p3_find_n_smallest_number,prompt_4,22,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Number of elements to find is greater than array length'\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [x[1] for x in heap]\n    return indexes""]",100000,0.28447610000148416,0.2921451029856689,0.3657740999478847,N/A
p3_find_n_smallest_number,prompt_4,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""k can\'t be greater than the length of the input array.""\n    negative_nums_index = [(-num, index) for index, num in enumerate(arg1)]\n    heapq.heapify(negative_nums_index)\n    res = heapq.nsmallest(arg2, negative_nums_index)\n    return [index for num, index in sorted(((-val, idx) for val, idx in res))]']",1000,0.008215400157496333,0.009417467000894249,0.03454380016773939,N/A
p3_find_n_smallest_number,prompt_4,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""k can\'t be greater than the length of the input array.""\n    negative_nums_index = [(-num, index) for index, num in enumerate(arg1)]\n    heapq.heapify(negative_nums_index)\n    res = heapq.nsmallest(arg2, negative_nums_index)\n    return [index for num, index in sorted(((-val, idx) for val, idx in res))]']",10000,0.09825960011221468,0.10180338200414553,0.1151447999291122,N/A
p3_find_n_smallest_number,prompt_4,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""k can\'t be greater than the length of the input array.""\n    negative_nums_index = [(-num, index) for index, num in enumerate(arg1)]\n    heapq.heapify(negative_nums_index)\n    res = heapq.nsmallest(arg2, negative_nums_index)\n    return [index for num, index in sorted(((-val, idx) for val, idx in res))]']",100000,1.1766614001244307,1.238524376009591,1.3453432000242174,N/A
p3_find_n_smallest_number,prompt_4,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    k_smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in k_smallest_nums]\n    return indexes']",1000,0.0027815999928861856,0.0028786340146325527,0.0031758002005517483,N/A
p3_find_n_smallest_number,prompt_4,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    k_smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in k_smallest_nums]\n    return indexes']",10000,0.022253600182011724,0.023951391992159187,0.07748320000246167,N/A
p3_find_n_smallest_number,prompt_4,24,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    k_smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in k_smallest_nums]\n    return indexes']",100000,0.15699829999357462,0.16255980600137263,0.25092090014368296,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted((i for num, i in max_heap))']",1000,0.002864000154659152,0.00299498199718073,0.0035510000307112932,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted((i for num, i in max_heap))']",10000,0.02582310000434518,0.02752715499838814,0.032122100004926324,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted((i for num, i in max_heap))']",100000,0.2634839001111686,0.2721270650089718,0.33249650010839105,N/A
p3_find_n_smallest_number,prompt_4,26,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_numbers = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(indexed_numbers)\n    indices = []\n    for _ in range(min(arg2, len(arg1))):\n        num, idx = heapq.heappop(indexed_numbers)\n        indices.append(idx)\n    return indices']",1000,0.005987199954688549,0.006420066000428051,0.012505999999120831,N/A
p3_find_n_smallest_number,prompt_4,26,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_numbers = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(indexed_numbers)\n    indices = []\n    for _ in range(min(arg2, len(arg1))):\n        num, idx = heapq.heappop(indexed_numbers)\n        indices.append(idx)\n    return indices']",10000,0.07857110002078116,0.08006872301222756,0.08267670008353889,N/A
p3_find_n_smallest_number,prompt_4,26,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_numbers = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(indexed_numbers)\n    indices = []\n    for _ in range(min(arg2, len(arg1))):\n        num, idx = heapq.heappop(indexed_numbers)\n        indices.append(idx)\n    return indices']",100000,0.8740894999355078,0.901237713007722,0.9520975998602808,N/A
p3_find_n_smallest_number,prompt_4,27,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    temp = []\n    for i in range(len(arg1)):\n        temp.append((arg1[i], i))\n    smallest_tuples = heapq.nsmallest(arg2, temp)\n    result = [i for num, i in smallest_tuples]\n    return result']",1000,0.005491400137543678,0.005736894011497498,0.008148399880155921,N/A
p3_find_n_smallest_number,prompt_4,27,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    temp = []\n    for i in range(len(arg1)):\n        temp.append((arg1[i], i))\n    smallest_tuples = heapq.nsmallest(arg2, temp)\n    result = [i for num, i in smallest_tuples]\n    return result']",10000,0.05405599996447563,0.057606876008212564,0.07759090000763535,N/A
p3_find_n_smallest_number,prompt_4,27,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    temp = []\n    for i in range(len(arg1)):\n        temp.append((arg1[i], i))\n    smallest_tuples = heapq.nsmallest(arg2, temp)\n    result = [i for num, i in smallest_tuples]\n    return result']",100000,0.7236524999607354,0.74814847599715,0.8175476000178605,N/A
p3_find_n_smallest_number,prompt_4,28,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 > len(arg1):\n        return 'k cannot be more than the length of list'\n    return [i for i in map(arg1.index, heapq.nsmallest(arg2, arg1))]""]",1000,0.0027399000246077776,0.0029157410142943265,0.00513949990272522,N/A
p3_find_n_smallest_number,prompt_4,28,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 > len(arg1):\n        return 'k cannot be more than the length of list'\n    return [i for i in map(arg1.index, heapq.nsmallest(arg2, arg1))]""]",10000,0.0218535999301821,0.023217650009319187,0.029702200088649988,N/A
p3_find_n_smallest_number,prompt_4,28,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 > len(arg1):\n        return 'k cannot be more than the length of list'\n    return [i for i in map(arg1.index, heapq.nsmallest(arg2, arg1))]""]",100000,0.1569209999870509,0.16287435199599712,0.22090999991632998,N/A
p3_find_n_smallest_number,prompt_4,29,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    num_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_nums = heapq.nsmallest(arg2, num_with_indexes)\n    smallest_k_indexes = [item[1] for item in smallest_k_nums]\n    return smallest_k_indexes']",1000,0.005321500124409795,0.005625958014279604,0.009856400080025196,N/A
p3_find_n_smallest_number,prompt_4,29,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    num_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_nums = heapq.nsmallest(arg2, num_with_indexes)\n    smallest_k_indexes = [item[1] for item in smallest_k_nums]\n    return smallest_k_indexes']",10000,0.05302969994954765,0.05468950499081984,0.060367099940776825,N/A
p3_find_n_smallest_number,prompt_4,29,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    num_with_indexes = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_nums = heapq.nsmallest(arg2, num_with_indexes)\n    smallest_k_indexes = [item[1] for item in smallest_k_nums]\n    return smallest_k_indexes']",100000,0.6859685000963509,0.7057207070034929,0.8084617001004517,N/A
p3_find_n_smallest_number,prompt_4,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    output = [item[0] for item in sorted(smallest_items, key=lambda x: x[1])]\n    return output']",1000,0.004703500075265765,0.004966169004328549,0.009431699989363551,N/A
p3_find_n_smallest_number,prompt_4,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    output = [item[0] for item in sorted(smallest_items, key=lambda x: x[1])]\n    return output']",10000,0.04320969991385937,0.04593834200873971,0.09530310006812215,N/A
p3_find_n_smallest_number,prompt_4,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    output = [item[0] for item in sorted(smallest_items, key=lambda x: x[1])]\n    return output']",100000,0.4196631000377238,0.43254428799264133,0.49109509983099997,N/A
p3_find_n_smallest_number,prompt_4,31,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    index_value_pairs = enumerate(arg1)\n    smallest_pairs = heapq.nsmallest(arg2, index_value_pairs, key=lambda x: x[1])\n    indexes = [pair[0] for pair in smallest_pairs]\n    indexes.sort()\n    return indexes']",1000,0.004749200074002147,0.004974250013474375,0.007432900136336684,N/A
p3_find_n_smallest_number,prompt_4,31,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    index_value_pairs = enumerate(arg1)\n    smallest_pairs = heapq.nsmallest(arg2, index_value_pairs, key=lambda x: x[1])\n    indexes = [pair[0] for pair in smallest_pairs]\n    indexes.sort()\n    return indexes']",10000,0.04399020015262067,0.045923697999678555,0.05762730003334582,N/A
p3_find_n_smallest_number,prompt_4,31,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    index_value_pairs = enumerate(arg1)\n    smallest_pairs = heapq.nsmallest(arg2, index_value_pairs, key=lambda x: x[1])\n    indexes = [pair[0] for pair in smallest_pairs]\n    indexes.sort()\n    return indexes']",100000,0.4235759999137372,0.4318855730094947,0.5023801999632269,N/A
p3_find_n_smallest_number,prompt_4,32,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid Inputs'\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [i[1] for i in heap]""]",1000,0.0040957999881356955,0.004446581995580345,0.008119200123474002,N/A
p3_find_n_smallest_number,prompt_4,32,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid Inputs'\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [i[1] for i in heap]""]",10000,0.03956690011546016,0.04141422400949523,0.05317279999144375,N/A
p3_find_n_smallest_number,prompt_4,32,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Invalid Inputs'\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [i[1] for i in heap]""]",100000,0.398641400039196,0.4096161080035381,0.46324470010586083,N/A
p3_find_n_smallest_number,prompt_4,33,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), lambda x: x[1])]']",1000,0.004722699988633394,0.00491655899444595,0.006751199951395392,N/A
p3_find_n_smallest_number,prompt_4,33,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), lambda x: x[1])]']",10000,0.04329890012741089,0.046034105999860915,0.10259420005604625,N/A
p3_find_n_smallest_number,prompt_4,33,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), lambda x: x[1])]']",100000,0.42069220007397234,0.43225127100013194,0.5293076999951154,N/A
p3_find_n_smallest_number,prompt_4,34,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise Exception('Second argument must be less than or equal to length of the list.')\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(heap)\n        indexes.append(i)\n    indexes.sort()\n    return indexes""]",1000,0.0058831998612731695,0.006417177005205304,0.008640500018373132,N/A
p3_find_n_smallest_number,prompt_4,34,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise Exception('Second argument must be less than or equal to length of the list.')\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(heap)\n        indexes.append(i)\n    indexes.sort()\n    return indexes""]",10000,0.07451250008307397,0.0770941839972511,0.08534609992057085,N/A
p3_find_n_smallest_number,prompt_4,34,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise Exception('Second argument must be less than or equal to length of the list.')\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(heap)\n        indexes.append(i)\n    indexes.sort()\n    return indexes""]",100000,0.8598885000683367,0.8775627920217812,0.9189381001051515,N/A
p3_find_n_smallest_number,prompt_4,35,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_arr = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(indexed_arr)\n    smallest = heapq.nsmallest(arg2, indexed_arr)\n    return [index for num, index in smallest]']",1000,0.005902899894863367,0.006389544990379363,0.00903060007840395,N/A
p3_find_n_smallest_number,prompt_4,35,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_arr = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(indexed_arr)\n    smallest = heapq.nsmallest(arg2, indexed_arr)\n    return [index for num, index in smallest]']",10000,0.07609870005398989,0.0777603440056555,0.0904841001611203,N/A
p3_find_n_smallest_number,prompt_4,35,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_arr = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(indexed_arr)\n    smallest = heapq.nsmallest(arg2, indexed_arr)\n    return [index for num, index in smallest]']",100000,0.8746795000042766,0.8928503109933809,0.9521514000371099,N/A
p3_find_n_smallest_number,prompt_4,36,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [-x for x in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0] > arg1[i]:\n            heapq.heapreplace(heap, -arg1[i])\n    smallest_nums = [-x for x in heap]\n    smallest_indices = [arg1.index(x) for x in smallest_nums]\n    return smallest_indices']",1000,0.003678099950775504,0.003916165020782501,0.005038300063461065,N/A
p3_find_n_smallest_number,prompt_4,36,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [-x for x in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0] > arg1[i]:\n            heapq.heapreplace(heap, -arg1[i])\n    smallest_nums = [-x for x in heap]\n    smallest_indices = [arg1.index(x) for x in smallest_nums]\n    return smallest_indices']",10000,0.03337239986285567,0.035212076001334934,0.04423820017836988,N/A
p3_find_n_smallest_number,prompt_4,36,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = [-x for x in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0] > arg1[i]:\n            heapq.heapreplace(heap, -arg1[i])\n    smallest_nums = [-x for x in heap]\n    smallest_indices = [arg1.index(x) for x in smallest_nums]\n    return smallest_indices']",100000,0.277239799965173,0.28610346001572906,0.3472331000957638,N/A
p3_find_n_smallest_number,prompt_4,37,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_k]']",1000,0.005122800124809146,0.0054716359893791375,0.006700200028717518,N/A
p3_find_n_smallest_number,prompt_4,37,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_k]']",10000,0.05318209994584322,0.055928872989024964,0.1385170000139624,N/A
p3_find_n_smallest_number,prompt_4,37,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_k]']",100000,0.6860537999309599,0.7103494079830125,0.7919914000667632,N/A
p3_find_n_smallest_number,prompt_4,38,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, num_index)\n    return [index for num, index in k_smallest]']",1000,0.005313399946317077,0.005584627995267511,0.006712999893352389,N/A
p3_find_n_smallest_number,prompt_4,38,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, num_index)\n    return [index for num, index in k_smallest]']",10000,0.05349479988217354,0.05567089898511767,0.07935899985022843,N/A
p3_find_n_smallest_number,prompt_4,38,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    num_index = [(num, index) for index, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, num_index)\n    return [index for num, index in k_smallest]']",100000,0.6833599000237882,0.7095345610007644,0.783276200061664,N/A
p3_find_n_smallest_number,prompt_4,39,"['from typing import List\nfrom heapq import nsmallest\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_tuples = nsmallest(arg2, ((val, index) for index, val in enumerate(arg1)), key=lambda x: x[0])\n    return [index for value, index in smallest_tuples]']",1000,0.007230399874970317,0.00765460699563846,0.01200250000692904,N/A
p3_find_n_smallest_number,prompt_4,39,"['from typing import List\nfrom heapq import nsmallest\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_tuples = nsmallest(arg2, ((val, index) for index, val in enumerate(arg1)), key=lambda x: x[0])\n    return [index for value, index in smallest_tuples]']",10000,0.06767689995467663,0.07008411101996899,0.08709849999286234,N/A
p3_find_n_smallest_number,prompt_4,39,"['from typing import List\nfrom heapq import nsmallest\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_tuples = nsmallest(arg2, ((val, index) for index, val in enumerate(arg1)), key=lambda x: x[0])\n    return [index for value, index in smallest_tuples]']",100000,0.6846570000052452,0.6989831109996885,0.7382861999794841,N/A
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\nimport random\n\ndef partition(nums: List[int], low: int, high: int):\n    pivot = nums[high]\n    i = low\n    for j in range(low, high):\n        if nums[j] < pivot:\n            nums[i], nums[j] = (nums[j], nums[i])\n            i += 1\n    nums[i], nums[high] = (nums[high], nums[i])\n    return i\n\ndef quickselect(nums: List[int], k: int):\n    if len(nums) == 1:\n        return nums[0]\n    pivot_index = random.randint(0, len(nums) - 1)\n    nums[-1], nums[pivot_index] = (nums[pivot_index], nums[-1])\n    pivot_index = partition(nums, 0, len(nums) - 1)\n    if pivot_index == k:\n        return nums[:pivot_index]\n    elif pivot_index > k:\n        return quickselect(nums[:pivot_index], k)\n    else:\n        return nums[:pivot_index] + quickselect(nums[pivot_index + 1:], k - pivot_index - 1)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_nums = quickselect(arg1[:], arg2)\n    return [i for i, num in enumerate(arg1) if num in smallest_nums]']",1000,0,0,0,"	 exception: can only concatenate list (not ""int"") to list"
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\nimport random\n\ndef partition(nums: List[int], low: int, high: int):\n    pivot = nums[high]\n    i = low\n    for j in range(low, high):\n        if nums[j] < pivot:\n            nums[i], nums[j] = (nums[j], nums[i])\n            i += 1\n    nums[i], nums[high] = (nums[high], nums[i])\n    return i\n\ndef quickselect(nums: List[int], k: int):\n    if len(nums) == 1:\n        return nums[0]\n    pivot_index = random.randint(0, len(nums) - 1)\n    nums[-1], nums[pivot_index] = (nums[pivot_index], nums[-1])\n    pivot_index = partition(nums, 0, len(nums) - 1)\n    if pivot_index == k:\n        return nums[:pivot_index]\n    elif pivot_index > k:\n        return quickselect(nums[:pivot_index], k)\n    else:\n        return nums[:pivot_index] + quickselect(nums[pivot_index + 1:], k - pivot_index - 1)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_nums = quickselect(arg1[:], arg2)\n    return [i for i, num in enumerate(arg1) if num in smallest_nums]']",10000,0,0,0,"	 exception: can only concatenate list (not ""int"") to list"
p3_find_n_smallest_number,prompt_4,40,"['from typing import List\nimport random\n\ndef partition(nums: List[int], low: int, high: int):\n    pivot = nums[high]\n    i = low\n    for j in range(low, high):\n        if nums[j] < pivot:\n            nums[i], nums[j] = (nums[j], nums[i])\n            i += 1\n    nums[i], nums[high] = (nums[high], nums[i])\n    return i\n\ndef quickselect(nums: List[int], k: int):\n    if len(nums) == 1:\n        return nums[0]\n    pivot_index = random.randint(0, len(nums) - 1)\n    nums[-1], nums[pivot_index] = (nums[pivot_index], nums[-1])\n    pivot_index = partition(nums, 0, len(nums) - 1)\n    if pivot_index == k:\n        return nums[:pivot_index]\n    elif pivot_index > k:\n        return quickselect(nums[:pivot_index], k)\n    else:\n        return nums[:pivot_index] + quickselect(nums[pivot_index + 1:], k - pivot_index - 1)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    smallest_nums = quickselect(arg1[:], arg2)\n    return [i for i, num in enumerate(arg1) if num in smallest_nums]']",100000,0,0,0,"	 exception: can only concatenate list (not ""int"") to list"
p3_find_n_smallest_number,prompt_4,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return sorted([idx for val, idx in heap], key=lambda idx: arg1[idx])']",1000,0.0032336998265236616,0.0034183769789524377,0.00460790004581213,N/A
p3_find_n_smallest_number,prompt_4,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return sorted([idx for val, idx in heap], key=lambda idx: arg1[idx])']",10000,0.029373399913311005,0.03081803600070998,0.04396699997596443,N/A
p3_find_n_smallest_number,prompt_4,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return sorted([idx for val, idx in heap], key=lambda idx: arg1[idx])']",100000,0.29492229991592467,0.30255652900086716,0.342608799925074,N/A
p3_find_n_smallest_number,prompt_4,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return [idx for val, idx in smallest_elems]']",1000,0.00594900012947619,0.006262349996250123,0.009039999917149544,N/A
p3_find_n_smallest_number,prompt_4,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return [idx for val, idx in smallest_elems]']",10000,0.055725800106301904,0.05834531499072909,0.06981180002912879,N/A
p3_find_n_smallest_number,prompt_4,42,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    return [idx for val, idx in smallest_elems]']",100000,0.5550090000033379,0.5679545959993265,0.6372748999856412,N/A
p3_find_n_smallest_number,prompt_4,43,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.0073998000007122755,0.007898655985482037,0.011531699914485216,N/A
p3_find_n_smallest_number,prompt_4,43,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.11535269999876618,0.11960564099950716,0.17038200004026294,N/A
p3_find_n_smallest_number,prompt_4,43,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.6296914999838918,1.6550008169864305,1.7073052998166531,N/A
p3_find_n_smallest_number,prompt_4,44,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [x[1] for x in sorted(heap, key=lambda x: -x[0])]\n    return res']",1000,0.004314200021326542,0.004478535000234842,0.005010999972000718,N/A
p3_find_n_smallest_number,prompt_4,44,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [x[1] for x in sorted(heap, key=lambda x: -x[0])]\n    return res']",10000,0.03994359984062612,0.04165752700529993,0.06040650000795722,N/A
p3_find_n_smallest_number,prompt_4,44,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [x[1] for x in sorted(heap, key=lambda x: -x[0])]\n    return res']",100000,0.3982285999227315,0.4106209700019099,0.47958080004900694,N/A
p3_find_n_smallest_number,prompt_4,45,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [item[0] for item in smallest_items]\n    return indices']",1000,0.0045640000607818365,0.004893231999594718,0.00757280015386641,N/A
p3_find_n_smallest_number,prompt_4,45,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [item[0] for item in smallest_items]\n    return indices']",10000,0.044253099942579865,0.04675452800933272,0.06941049988381565,N/A
p3_find_n_smallest_number,prompt_4,45,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    smallest_items = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [item[0] for item in smallest_items]\n    return indices']",100000,0.4226269999053329,0.4337023609993048,0.5256370999850333,N/A
p3_find_n_smallest_number,prompt_4,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.00324780005030334,0.0034283660165965557,0.005363899981603026,N/A
p3_find_n_smallest_number,prompt_4,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.0292176001239568,0.030803323986474423,0.05306120007298887,N/A
p3_find_n_smallest_number,prompt_4,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29406480002216995,0.3014301779982634,0.3833928001113236,N/A
p3_find_n_smallest_number,prompt_4,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError(""arg2 can\'t be larger than the number of elements in arg1"")\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, num in smallest]']",1000,0.00471000000834465,0.00496458699926734,0.006755900103598833,N/A
p3_find_n_smallest_number,prompt_4,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError(""arg2 can\'t be larger than the number of elements in arg1"")\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, num in smallest]']",10000,0.043955199886113405,0.04582147599197924,0.0844635998364538,N/A
p3_find_n_smallest_number,prompt_4,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError(""arg2 can\'t be larger than the number of elements in arg1"")\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, num in smallest]']",100000,0.42260830011218786,0.43496225799433885,0.53606679989025,N/A
p3_find_n_smallest_number,prompt_4,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    elements_indexes = {v: [] for v in arg1}\n    for i, v in enumerate(arg1):\n        elements_indexes[v].append(i)\n    heap = []\n    for num in arg1:\n        if len(heap) < arg2:\n            heapq.heappush(heap, -1 * num)\n        elif -1 * num > heap[0]:\n            heapq.heapreplace(heap, -1 * num)\n    smallest_nums = [-1 * num for num in heap]\n    indexes = [elements_indexes[num].pop() for num in smallest_nums]\n    return indexes']",1000,0.009117899928241968,0.00995364299742505,0.014772300142794847,N/A
p3_find_n_smallest_number,prompt_4,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    elements_indexes = {v: [] for v in arg1}\n    for i, v in enumerate(arg1):\n        elements_indexes[v].append(i)\n    heap = []\n    for num in arg1:\n        if len(heap) < arg2:\n            heapq.heappush(heap, -1 * num)\n        elif -1 * num > heap[0]:\n            heapq.heapreplace(heap, -1 * num)\n    smallest_nums = [-1 * num for num in heap]\n    indexes = [elements_indexes[num].pop() for num in smallest_nums]\n    return indexes']",10000,0.09653629991225898,0.10225959700066596,0.13948670006357133,N/A
p3_find_n_smallest_number,prompt_4,48,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    elements_indexes = {v: [] for v in arg1}\n    for i, v in enumerate(arg1):\n        elements_indexes[v].append(i)\n    heap = []\n    for num in arg1:\n        if len(heap) < arg2:\n            heapq.heappush(heap, -1 * num)\n        elif -1 * num > heap[0]:\n            heapq.heapreplace(heap, -1 * num)\n    smallest_nums = [-1 * num for num in heap]\n    indexes = [elements_indexes[num].pop() for num in smallest_nums]\n    return indexes']",100000,1.4137684002052993,1.4553714620112441,1.5363119998946786,N/A
p3_find_n_smallest_number,prompt_4,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap])']",1000,0.002779100090265274,0.0033362829918041825,0.006892799865454435,N/A
p3_find_n_smallest_number,prompt_4,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap])']",10000,0.0260026000905782,0.02766320001799613,0.041681200033053756,N/A
p3_find_n_smallest_number,prompt_4,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap])']",100000,0.26554960012435913,0.27242936101043597,0.30661899992264807,N/A
p3_find_n_smallest_number,prompt_4,50,"['def funcImp1(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return indexes[:arg2]']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_4,50,"['def funcImp1(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return indexes[:arg2]']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_4,50,"['def funcImp1(arg1, arg2):\n    indexes = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return indexes[:arg2]']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_4,51,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexed_arg1 = [(arg1[i], i) for i in range(len(arg1))]\n    smallest = heapq.nsmallest(arg2, indexed_arg1)\n    return [x[1] for x in smallest]']",1000,0.005103999981656671,0.005639673010446131,0.011099299881607294,N/A
p3_find_n_smallest_number,prompt_4,51,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexed_arg1 = [(arg1[i], i) for i in range(len(arg1))]\n    smallest = heapq.nsmallest(arg2, indexed_arg1)\n    return [x[1] for x in smallest]']",10000,0.05017780000343919,0.052596475994214416,0.059773199958726764,N/A
p3_find_n_smallest_number,prompt_4,51,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexed_arg1 = [(arg1[i], i) for i in range(len(arg1))]\n    smallest = heapq.nsmallest(arg2, indexed_arg1)\n    return [x[1] for x in smallest]']",100000,0.6771456999704242,0.7092725249915384,0.837240600027144,N/A
p3_find_n_smallest_number,prompt_4,52,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = [(-arg1[i][0], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [i[1] for i in max_heap]']",1000,0,0,0,	 exception: 'int' object is not subscriptable
p3_find_n_smallest_number,prompt_4,52,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = [(-arg1[i][0], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [i[1] for i in max_heap]']",10000,0,0,0,	 exception: 'int' object is not subscriptable
p3_find_n_smallest_number,prompt_4,52,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = [(-arg1[i][0], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [i[1] for i in max_heap]']",100000,0,0,0,	 exception: 'int' object is not subscriptable
p3_find_n_smallest_number,prompt_4,53,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    min_heap = []\n    for i in range(len(arg1)):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-arg1[i], i))\n        elif -min_heap[0][0] > arg1[i]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    return sorted([index for _, index in min_heap])']",1000,0.0038427000399678946,0.004140161001123488,0.005433599930256605,N/A
p3_find_n_smallest_number,prompt_4,53,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    min_heap = []\n    for i in range(len(arg1)):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-arg1[i], i))\n        elif -min_heap[0][0] > arg1[i]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    return sorted([index for _, index in min_heap])']",10000,0.035096999956294894,0.03820631000213325,0.08014919981360435,N/A
p3_find_n_smallest_number,prompt_4,53,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    min_heap = []\n    for i in range(len(arg1)):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-arg1[i], i))\n        elif -min_heap[0][0] > arg1[i]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    return sorted([index for _, index in min_heap])']",100000,0.36335609992966056,0.37299085800070314,0.4328054999932647,N/A
p3_find_n_smallest_number,prompt_4,54,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    q = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(q)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(q, (-arg1[i], i))\n    indices = sorted([i for num, i in q], reverse=False)\n    return indices']",1000,0.004878600127995014,0.005289701991714537,0.00630709994584322,N/A
p3_find_n_smallest_number,prompt_4,54,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    q = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(q)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(q, (-arg1[i], i))\n    indices = sorted([i for num, i in q], reverse=False)\n    return indices']",10000,0.04800529987551272,0.05062664499739185,0.10249749990180135,N/A
p3_find_n_smallest_number,prompt_4,54,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    q = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(q)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(q, (-arg1[i], i))\n    indices = sorted([i for num, i in q], reverse=False)\n    return indices']",100000,0.4910818999633193,0.5054776790062897,0.579454299993813,N/A
p3_find_n_smallest_number,prompt_4,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_nums_indexes = [i for i, v in smallest_nums]\n    return smallest_nums_indexes']",1000,0.004703100072219968,0.005034045004285872,0.0065367999486625195,N/A
p3_find_n_smallest_number,prompt_4,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_nums_indexes = [i for i, v in smallest_nums]\n    return smallest_nums_indexes']",10000,0.043327399995177984,0.04607301899464801,0.07330369995906949,N/A
p3_find_n_smallest_number,prompt_4,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_nums_indexes = [i for i, v in smallest_nums]\n    return smallest_nums_indexes']",100000,0.424881299957633,0.4363270899932832,0.52170249982737,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.0028470000252127647,0.0029902990115806462,0.0033897000830620527,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.02702750009484589,0.028497367990203203,0.0402380998712033,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.26707799988798797,0.2771066499967128,0.34985410002991557,N/A
p3_find_n_smallest_number,prompt_4,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [-1 * i for i in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -1 * arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -1 * arg1[i])\n    smallest_indexes = sorted([arg1.index(-1 * i) for i in max_heap])\n    return smallest_indexes']",1000,0.004251700127497315,0.004433795004151761,0.005741599947214127,N/A
p3_find_n_smallest_number,prompt_4,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [-1 * i for i in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -1 * arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -1 * arg1[i])\n    smallest_indexes = sorted([arg1.index(-1 * i) for i in max_heap])\n    return smallest_indexes']",10000,0.03691479982808232,0.03919191900407895,0.051542599918320775,N/A
p3_find_n_smallest_number,prompt_4,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [-1 * i for i in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -1 * arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -1 * arg1[i])\n    smallest_indexes = sorted([arg1.index(-1 * i) for i in max_heap])\n    return smallest_indexes']",100000,0.3117675001267344,0.3241560140042566,0.42060800013132393,N/A
p3_find_n_smallest_number,prompt_4,58,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for value, index in smallest_pairs]\n    return smallest_indexes']",1000,0.004693299997597933,0.004985331003554166,0.006724399980157614,N/A
p3_find_n_smallest_number,prompt_4,58,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for value, index in smallest_pairs]\n    return smallest_indexes']",10000,0.043662300100550056,0.045989557006396356,0.06892480002716184,N/A
p3_find_n_smallest_number,prompt_4,58,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for value, index in smallest_pairs]\n    return smallest_indexes']",100000,0.4236931998748332,0.43600255899364126,0.53629309986718,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    largest_k_elements = []\n    for i, num in enumerate(arg1):\n        if len(largest_k_elements) < arg2:\n            heapq.heappush(largest_k_elements, (-num, i))\n        elif largest_k_elements[0][0] < -num:\n            continue\n        else:\n            heapq.heappop(largest_k_elements)\n            heapq.heappush(largest_k_elements, (-num, i))\n    smallest_k_indices = [x[1] for x in largest_k_elements]\n    smallest_k_indices.reverse()\n    return smallest_k_indices']",1000,0.004255800042301416,0.004680059985257685,0.008192599983885884,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    largest_k_elements = []\n    for i, num in enumerate(arg1):\n        if len(largest_k_elements) < arg2:\n            heapq.heappush(largest_k_elements, (-num, i))\n        elif largest_k_elements[0][0] < -num:\n            continue\n        else:\n            heapq.heappop(largest_k_elements)\n            heapq.heappush(largest_k_elements, (-num, i))\n    smallest_k_indices = [x[1] for x in largest_k_elements]\n    smallest_k_indices.reverse()\n    return smallest_k_indices']",10000,0.04341199994087219,0.04631429699948057,0.0783975999802351,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    largest_k_elements = []\n    for i, num in enumerate(arg1):\n        if len(largest_k_elements) < arg2:\n            heapq.heappush(largest_k_elements, (-num, i))\n        elif largest_k_elements[0][0] < -num:\n            continue\n        else:\n            heapq.heappop(largest_k_elements)\n            heapq.heappush(largest_k_elements, (-num, i))\n    smallest_k_indices = [x[1] for x in largest_k_elements]\n    smallest_k_indices.reverse()\n    return smallest_k_indices']",100000,0.4464748001191765,0.4565428490075283,0.5136021999642253,N/A
p3_find_n_smallest_number,prompt_4,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, value in result]\n    return indexes']",1000,0.00470969988964498,0.005036694998852909,0.007623899960890412,N/A
p3_find_n_smallest_number,prompt_4,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, value in result]\n    return indexes']",10000,0.043473999947309494,0.04593877299223095,0.06216400000266731,N/A
p3_find_n_smallest_number,prompt_4,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    result = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, value in result]\n    return indexes']",100000,0.4252581000328064,0.43587634500581773,0.492898799944669,N/A
p3_find_n_smallest_number,prompt_4,61,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError(""\'k\' is greater than the number of elements in the list."")\n    if arg2 < 0:\n        raise ValueError(""\'k\' must be a non-negative integer."")\n    if arg2 == 0:\n        return []\n    smallest_pairs = [(x, i) for i, x in enumerate(arg1[:arg2])]\n    heapq.heapify(smallest_pairs)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(smallest_pairs, (arg1[i], i))\n    return [i for x, i in smallest_pairs]']",1000,0.004393899813294411,0.0045684599876403805,0.006290599936619401,N/A
p3_find_n_smallest_number,prompt_4,61,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError(""\'k\' is greater than the number of elements in the list."")\n    if arg2 < 0:\n        raise ValueError(""\'k\' must be a non-negative integer."")\n    if arg2 == 0:\n        return []\n    smallest_pairs = [(x, i) for i, x in enumerate(arg1[:arg2])]\n    heapq.heapify(smallest_pairs)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(smallest_pairs, (arg1[i], i))\n    return [i for x, i in smallest_pairs]']",10000,0.042638099985197186,0.04505432601785287,0.11381740006618202,N/A
p3_find_n_smallest_number,prompt_4,61,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError(""\'k\' is greater than the number of elements in the list."")\n    if arg2 < 0:\n        raise ValueError(""\'k\' must be a non-negative integer."")\n    if arg2 == 0:\n        return []\n    smallest_pairs = [(x, i) for i, x in enumerate(arg1[:arg2])]\n    heapq.heapify(smallest_pairs)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(smallest_pairs, (arg1[i], i))\n    return [i for x, i in smallest_pairs]']",100000,0.4344685999676585,0.44532812599325555,0.5181636000052094,N/A
p3_find_n_smallest_number,prompt_4,62,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: The k value is larger than the number of elements in the list.'\n    indexed_numbers = list(enumerate(arg1))\n    smallest_numbers_heap = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    return [index for index, number in smallest_numbers_heap]""]",1000,0.005451199831441045,0.005692855999805033,0.009009100031107664,N/A
p3_find_n_smallest_number,prompt_4,62,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: The k value is larger than the number of elements in the list.'\n    indexed_numbers = list(enumerate(arg1))\n    smallest_numbers_heap = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    return [index for index, number in smallest_numbers_heap]""]",10000,0.05562109989114106,0.058518467997200785,0.07203159993514419,N/A
p3_find_n_smallest_number,prompt_4,62,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: The k value is larger than the number of elements in the list.'\n    indexed_numbers = list(enumerate(arg1))\n    smallest_numbers_heap = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    return [index for index, number in smallest_numbers_heap]""]",100000,0.6898320000618696,0.7276531910151243,0.8043247999157757,N/A
p3_find_n_smallest_number,prompt_4,63,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i in range(arg2):\n        heap.append((arg1[i], i))\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.0022968000266700983,0.002432537004351616,0.00327470013871789,N/A
p3_find_n_smallest_number,prompt_4,63,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i in range(arg2):\n        heap.append((arg1[i], i))\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.02314290008507669,0.024512253997381776,0.0287816000636667,N/A
p3_find_n_smallest_number,prompt_4,63,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i in range(arg2):\n        heap.append((arg1[i], i))\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.23408180009573698,0.24141312500461937,0.31982209999114275,N/A
p3_find_n_smallest_number,prompt_4,64,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    arg1 = [(arg1[i], i) for i in range(len(arg1))]\n    max_heap = arg1[:arg2]\n    heapq._heapify_max(max_heap)\n    current_max = max_heap[0]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < current_max:\n            heapq._heappop_max(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n            current_max = max_heap[0]\n    return [pair[1] for pair in max_heap]']",1000,0.005233400035649538,0.0054646759969182316,0.006230799946933985,N/A
p3_find_n_smallest_number,prompt_4,64,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    arg1 = [(arg1[i], i) for i in range(len(arg1))]\n    max_heap = arg1[:arg2]\n    heapq._heapify_max(max_heap)\n    current_max = max_heap[0]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < current_max:\n            heapq._heappop_max(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n            current_max = max_heap[0]\n    return [pair[1] for pair in max_heap]']",10000,0.05732200015336275,0.059106067994143814,0.06884680013172328,N/A
p3_find_n_smallest_number,prompt_4,64,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    arg1 = [(arg1[i], i) for i in range(len(arg1))]\n    max_heap = arg1[:arg2]\n    heapq._heapify_max(max_heap)\n    current_max = max_heap[0]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < current_max:\n            heapq._heappop_max(max_heap)\n            heapq.heappush(max_heap, arg1[i])\n            current_max = max_heap[0]\n    return [pair[1] for pair in max_heap]']",100000,0.7486650000791997,0.7760137379984371,0.8638007000554353,N/A
p3_find_n_smallest_number,prompt_4,65,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    numbered = [(number, i) for i, number in enumerate(arg1)]\n    heapq.heapify(numbered)\n    smallest_indexes = [heapq.heappop(numbered)[1] for _ in range(arg2)]\n    return sorted(smallest_indexes)']",1000,0.005081000039353967,0.005545024997554719,0.007951900130137801,N/A
p3_find_n_smallest_number,prompt_4,65,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    numbered = [(number, i) for i, number in enumerate(arg1)]\n    heapq.heapify(numbered)\n    smallest_indexes = [heapq.heappop(numbered)[1] for _ in range(arg2)]\n    return sorted(smallest_indexes)']",10000,0.06569620012305677,0.06784999599913136,0.07139589986763895,N/A
p3_find_n_smallest_number,prompt_4,65,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    numbered = [(number, i) for i, number in enumerate(arg1)]\n    heapq.heapify(numbered)\n    smallest_indexes = [heapq.heappop(numbered)[1] for _ in range(arg2)]\n    return sorted(smallest_indexes)']",100000,0.7464831999968737,0.7614951469982043,0.8307707000058144,N/A
p3_find_n_smallest_number,prompt_4,66,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arr = [(-num, i) for i, num in enumerate(arg1)]\n    return [i for _, i in heapq.nsmallest(arg2, arr)]']",1000,0.006022100104019046,0.006406220998615026,0.00895479996688664,N/A
p3_find_n_smallest_number,prompt_4,66,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arr = [(-num, i) for i, num in enumerate(arg1)]\n    return [i for _, i in heapq.nsmallest(arg2, arr)]']",10000,0.06061979988589883,0.06340179100167007,0.07084840000607073,N/A
p3_find_n_smallest_number,prompt_4,66,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arr = [(-num, i) for i, num in enumerate(arg1)]\n    return [i for _, i in heapq.nsmallest(arg2, arr)]']",100000,0.8758383002132177,0.915842538017314,0.9914927999489009,N/A
p3_find_n_smallest_number,prompt_4,67,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the array'\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = [i for num, i in max_heap]\n    return indices""]",1000,0.0027972999960184097,0.0029728140006773174,0.004184700082987547,N/A
p3_find_n_smallest_number,prompt_4,67,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the array'\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = [i for num, i in max_heap]\n    return indices""]",10000,0.02651190012693405,0.02786098201526329,0.0336366998963058,N/A
p3_find_n_smallest_number,prompt_4,67,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the array'\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = [i for num, i in max_heap]\n    return indices""]",100000,0.2650568999815732,0.2722518850141205,0.32630760013125837,N/A
p3_find_n_smallest_number,prompt_4,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(min(arg2, len(arg1))):\n        result.append(heapq.heappop(heap)[1])\n    return result']",1000,0.004957800032570958,0.005263882002327591,0.007432300131767988,N/A
p3_find_n_smallest_number,prompt_4,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(min(arg2, len(arg1))):\n        result.append(heapq.heappop(heap)[1])\n    return result']",10000,0.06363420002162457,0.06529572499683127,0.06819249992258847,N/A
p3_find_n_smallest_number,prompt_4,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(min(arg2, len(arg1))):\n        result.append(heapq.heappop(heap)[1])\n    return result']",100000,0.7595854001119733,0.7770124530093745,0.8339576998259872,N/A
p3_find_n_smallest_number,prompt_4,69,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1 = [(value, index) for index, value in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    return [num[1] for num in smallest_nums]']",1000,0.0051398000214248896,0.005588697015773505,0.0071311998181045055,N/A
p3_find_n_smallest_number,prompt_4,69,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1 = [(value, index) for index, value in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    return [num[1] for num in smallest_nums]']",10000,0.05243000015616417,0.05606667799409479,0.1209712999407202,N/A
p3_find_n_smallest_number,prompt_4,69,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    arg1 = [(value, index) for index, value in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    return [num[1] for num in smallest_nums]']",100000,0.6887626000680029,0.7171033529867418,0.7872538000810891,N/A
p3_find_n_smallest_number,prompt_4,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 is None or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap])']",1000,0.003979699919000268,0.004207952013239265,0.00677390000782907,N/A
p3_find_n_smallest_number,prompt_4,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 is None or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap])']",10000,0.03642089990898967,0.03827944699442014,0.04611329990439117,N/A
p3_find_n_smallest_number,prompt_4,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 is None or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap])']",100000,0.37068030005320907,0.3801729119871743,0.43861100007779896,N/A
p3_find_n_smallest_number,prompt_4,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_heap = heapq.nsmallest(arg2, indexed_nums)\n    smallest_nums_indexes = sorted((index for num, index in smallest_nums_heap))\n    return smallest_nums_indexes']",1000,0.005251000169664621,0.005641036995220929,0.009568699868395925,N/A
p3_find_n_smallest_number,prompt_4,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_heap = heapq.nsmallest(arg2, indexed_nums)\n    smallest_nums_indexes = sorted((index for num, index in smallest_nums_heap))\n    return smallest_nums_indexes']",10000,0.05288559990003705,0.05587348701898009,0.06975100003182888,N/A
p3_find_n_smallest_number,prompt_4,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_heap = heapq.nsmallest(arg2, indexed_nums)\n    smallest_nums_indexes = sorted((index for num, index in smallest_nums_heap))\n    return smallest_nums_indexes']",100000,0.6923863999545574,0.7248369090049528,0.8355890999082476,N/A
p3_find_n_smallest_number,prompt_4,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest_elems]\n    return indexes']",1000,0.004604700021445751,0.00497806400526315,0.006085400003939867,N/A
p3_find_n_smallest_number,prompt_4,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest_elems]\n    return indexes']",10000,0.04371370002627373,0.04592776300618425,0.05568880005739629,N/A
p3_find_n_smallest_number,prompt_4,72,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elems = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i for i, v in smallest_elems]\n    return indexes']",100000,0.4232672001235187,0.4355805689957924,0.505010699853301,N/A
p3_find_n_smallest_number,prompt_4,73,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, num in smallest_nums]']",1000,0.004693299997597933,0.0049551530159078535,0.007563699968159199,N/A
p3_find_n_smallest_number,prompt_4,73,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, num in smallest_nums]']",10000,0.04302870016545057,0.045907943996135146,0.06265740003436804,N/A
p3_find_n_smallest_number,prompt_4,73,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, num in smallest_nums]']",100000,0.42692839982919395,0.43745276898145674,0.4979522000066936,N/A
p3_find_n_smallest_number,prompt_4,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i for _, i in heap])']",1000,0.002869199961423874,0.0030618060077540576,0.0034076999872922897,N/A
p3_find_n_smallest_number,prompt_4,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i for _, i in heap])']",10000,0.0267813999671489,0.02782769100740552,0.03382860007695854,N/A
p3_find_n_smallest_number,prompt_4,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i for _, i in heap])']",100000,0.2678801000583917,0.2743696470023133,0.35410679993219674,N/A
p3_find_n_smallest_number,prompt_4,75,"['def funcImp(arg1, arg2):\n    indexes_of_k_smallest_numbers = [index for index, _ in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]\n    return indexes_of_k_smallest_numbers']",1000,0.008540800074115396,0.009050368994940073,0.012065300019457936,N/A
p3_find_n_smallest_number,prompt_4,75,"['def funcImp(arg1, arg2):\n    indexes_of_k_smallest_numbers = [index for index, _ in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]\n    return indexes_of_k_smallest_numbers']",10000,0.14023889997042716,0.1453627949953079,0.2005618999246508,N/A
p3_find_n_smallest_number,prompt_4,75,"['def funcImp(arg1, arg2):\n    indexes_of_k_smallest_numbers = [index for index, _ in sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]]\n    return indexes_of_k_smallest_numbers']",100000,2.1310095000080764,2.163423202005215,2.2638298999518156,N/A
p3_find_n_smallest_number,prompt_4,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, v in enumerate(arg1) if v in heapq.nsmallest(arg2, arg1)]']",1000,1.3966519001405686,1.4222597389901057,1.5327987000346184,N/A
p3_find_n_smallest_number,prompt_4,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, v in enumerate(arg1) if v in heapq.nsmallest(arg2, arg1)]']",10000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_4,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for i, v in enumerate(arg1) if v in heapq.nsmallest(arg2, arg1)]']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_4,77,"['import numpy as np\nimport heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    input_array = np.array(arg1)\n    smallest_elements = heapq.nsmallest(arg2, enumerate(input_array), key=lambda x: x[1])\n    smallest_indexes = [element[0] for element in smallest_elements]\n    return smallest_indexes']",1000,0.01022480009123683,0.010651478981599212,0.014016699977219105,N/A
p3_find_n_smallest_number,prompt_4,77,"['import numpy as np\nimport heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    input_array = np.array(arg1)\n    smallest_elements = heapq.nsmallest(arg2, enumerate(input_array), key=lambda x: x[1])\n    smallest_indexes = [element[0] for element in smallest_elements]\n    return smallest_indexes']",10000,0.09524769987910986,0.09931553998729215,0.13945570006035268,N/A
p3_find_n_smallest_number,prompt_4,77,"['import numpy as np\nimport heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    input_array = np.array(arg1)\n    smallest_elements = heapq.nsmallest(arg2, enumerate(input_array), key=lambda x: x[1])\n    smallest_indexes = [element[0] for element in smallest_elements]\n    return smallest_indexes']",100000,0.9212560998275876,0.9365780169982463,0.9775668000802398,N/A
p3_find_n_smallest_number,prompt_4,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in smallest_k_elements]']",1000,0.004724400117993355,0.005188608004245907,0.011209399905055761,N/A
p3_find_n_smallest_number,prompt_4,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in smallest_k_elements]']",10000,0.04313090001232922,0.0455310340016149,0.05119669996201992,N/A
p3_find_n_smallest_number,prompt_4,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_k_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in smallest_k_elements]']",100000,0.424371600151062,0.43757523901527745,0.5450780999381095,N/A
p3_find_n_smallest_number,prompt_4,79,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        value, index = heapq.heappop(min_heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.005051499931141734,0.005402317999396473,0.007218000013381243,N/A
p3_find_n_smallest_number,prompt_4,79,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        value, index = heapq.heappop(min_heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,0.06691200006753206,0.06889268799452111,0.13347100000828505,N/A
p3_find_n_smallest_number,prompt_4,79,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        value, index = heapq.heappop(min_heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,0.7934014999773353,0.8087007159879431,0.8465787000022829,N/A
p3_find_n_smallest_number,prompt_4,80,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_elements]\n    return indices']",1000,0.004718499956652522,0.004953018997330218,0.0061425999738276005,N/A
p3_find_n_smallest_number,prompt_4,80,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_elements]\n    return indices']",10000,0.04421860002912581,0.046842800001613796,0.13344849995337427,N/A
p3_find_n_smallest_number,prompt_4,80,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_elements]\n    return indices']",100000,0.42637350014410913,0.43643602101132273,0.5241358000785112,N/A
p3_find_n_smallest_number,prompt_4,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    queue = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(queue, (-arg1[i], i))\n        elif arg1[i] < -queue[0][0]:\n            heapq.heappop(queue)\n            heapq.heappush(queue, (-arg1[i], i))\n    return [idx for val, idx in queue]']",1000,0.0033388000447303057,0.0035563320037908853,0.004784099990502,N/A
p3_find_n_smallest_number,prompt_4,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    queue = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(queue, (-arg1[i], i))\n        elif arg1[i] < -queue[0][0]:\n            heapq.heappop(queue)\n            heapq.heappush(queue, (-arg1[i], i))\n    return [idx for val, idx in queue]']",10000,0.030665099853649735,0.03234020099276677,0.03651509992778301,N/A
p3_find_n_smallest_number,prompt_4,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    queue = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(queue, (-arg1[i], i))\n        elif arg1[i] < -queue[0][0]:\n            heapq.heappop(queue)\n            heapq.heappush(queue, (-arg1[i], i))\n    return [idx for val, idx in queue]']",100000,0.30730190011672676,0.32043050599051637,0.38078940007835627,N/A
p3_find_n_smallest_number,prompt_4,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    min_heap = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",1000,0.005867199972271919,0.006412576986476779,0.008559700101613998,N/A
p3_find_n_smallest_number,prompt_4,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    min_heap = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",10000,0.07750180014409125,0.08031920900335536,0.10116750001907349,N/A
p3_find_n_smallest_number,prompt_4,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    min_heap = [(-num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",100000,0.859413200058043,0.8875192779977806,0.9256358998827636,N/A
p3_find_n_smallest_number,prompt_4,83,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return 'Invalid input for k'\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    return [i[1] for i in max_heap]""]",1000,0.0028784999158233404,0.003137919008731842,0.005283900070935488,N/A
p3_find_n_smallest_number,prompt_4,83,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return 'Invalid input for k'\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    return [i[1] for i in max_heap]""]",10000,0.026450499892234802,0.02819358500186354,0.03286759997718036,N/A
p3_find_n_smallest_number,prompt_4,83,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return 'Invalid input for k'\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    return [i[1] for i in max_heap]""]",100000,0.2671557997819036,0.2804331459850073,0.3519431999884546,N/A
p3_find_n_smallest_number,prompt_4,84,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for num, i in heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))]']",1000,0.006057200022041798,0.006513426990713924,0.015705900033935905,N/A
p3_find_n_smallest_number,prompt_4,84,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for num, i in heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))]']",10000,0.05541559983976185,0.05772007998544723,0.06432859995402396,N/A
p3_find_n_smallest_number,prompt_4,84,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i for num, i in heapq.nsmallest(arg2, ((num, i) for i, num in enumerate(arg1)))]']",100000,0.5568289998918772,0.574690210998524,0.6640359999146312,N/A
p3_find_n_smallest_number,prompt_4,85,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest]']",1000,0.004712700145319104,0.004976434998679906,0.006456800037994981,N/A
p3_find_n_smallest_number,prompt_4,85,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest]']",10000,0.04290120000950992,0.04622514100046828,0.06603570003062487,N/A
p3_find_n_smallest_number,prompt_4,85,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest]']",100000,0.4237799998372793,0.4384613940119743,0.5432272001635283,N/A
p3_find_n_smallest_number,prompt_4,86,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [i[1] for i in heap]']",1000,0.0034965001977980137,0.003735817994456738,0.0053524000104516745,N/A
p3_find_n_smallest_number,prompt_4,86,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [i[1] for i in heap]']",10000,0.03292270004749298,0.03419808799633756,0.03839729982428253,N/A
p3_find_n_smallest_number,prompt_4,86,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return [i[1] for i in heap]']",100000,0.32959010009653866,0.34121625500964003,0.40910639986395836,N/A
p3_find_n_smallest_number,prompt_4,87,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i[0] for i in smallest_nums]\n    return indices""]",1000,0.00459699984639883,0.004966097001451999,0.006017900072038174,N/A
p3_find_n_smallest_number,prompt_4,87,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i[0] for i in smallest_nums]\n    return indices""]",10000,0.04406860005110502,0.04703954499913379,0.1683058999478817,N/A
p3_find_n_smallest_number,prompt_4,87,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: arg2 is greater than the length of arg1'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i[0] for i in smallest_nums]\n    return indices""]",100000,0.426659099990502,0.4369900030083954,0.48793529998511076,N/A
p3_find_n_smallest_number,prompt_4,88,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the size of arg1.')\n    maxheap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(maxheap)\n    for idx in range(arg2, len(arg1)):\n        if -maxheap[0][0] > arg1[idx]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap, (-arg1[idx], idx))\n    smallest_k_indices = sorted([idx for num, idx in maxheap])\n    return smallest_k_indices""]",1000,0.0029484000988304615,0.003068213991355151,0.0032410998828709126,N/A
p3_find_n_smallest_number,prompt_4,88,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the size of arg1.')\n    maxheap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(maxheap)\n    for idx in range(arg2, len(arg1)):\n        if -maxheap[0][0] > arg1[idx]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap, (-arg1[idx], idx))\n    smallest_k_indices = sorted([idx for num, idx in maxheap])\n    return smallest_k_indices""]",10000,0.025850699981674552,0.027431144029833376,0.03037269995547831,N/A
p3_find_n_smallest_number,prompt_4,88,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the size of arg1.')\n    maxheap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(maxheap)\n    for idx in range(arg2, len(arg1)):\n        if -maxheap[0][0] > arg1[idx]:\n            heapq.heappop(maxheap)\n            heapq.heappush(maxheap, (-arg1[idx], idx))\n    smallest_k_indices = sorted([idx for num, idx in maxheap])\n    return smallest_k_indices""]",100000,0.26356410002335906,0.2712172889872454,0.3662628000602126,N/A
p3_find_n_smallest_number,prompt_4,89,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    h = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(h)\n    return [i for _, i in heapq.nsmallest(arg2, h)]']",1000,0.008089400129392743,0.008524108994752169,0.011569600086659193,N/A
p3_find_n_smallest_number,prompt_4,89,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    h = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(h)\n    return [i for _, i in heapq.nsmallest(arg2, h)]']",10000,0.09554539993405342,0.09912860998185352,0.12796900002285838,N/A
p3_find_n_smallest_number,prompt_4,89,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    h = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(h)\n    return [i for _, i in heapq.nsmallest(arg2, h)]']",100000,1.2246995000168681,1.257964602005668,1.3200344999786466,N/A
p3_find_n_smallest_number,prompt_4,90,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    tuple_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, tuple_list)\n    indexes = [index for value, index in smallest_nums]\n    return indexes']",1000,0.005129599943757057,0.005586440984625369,0.008277200162410736,N/A
p3_find_n_smallest_number,prompt_4,90,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    tuple_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, tuple_list)\n    indexes = [index for value, index in smallest_nums]\n    return indexes']",10000,0.05227089999243617,0.055654817004688086,0.0757151001598686,N/A
p3_find_n_smallest_number,prompt_4,90,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    tuple_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, tuple_list)\n    indexes = [index for value, index in smallest_nums]\n    return indexes']",100000,0.6835153999272734,0.7182645249902271,0.8133022000547498,N/A
p3_find_n_smallest_number,prompt_4,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap_list = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap_list)\n    smallest_elements = heapq.nsmallest(arg2, heap_list)\n    return [i[1] for i in smallest_elements]']",1000,0.007316600065678358,0.007773891990073025,0.010205499827861786,N/A
p3_find_n_smallest_number,prompt_4,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap_list = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap_list)\n    smallest_elements = heapq.nsmallest(arg2, heap_list)\n    return [i[1] for i in smallest_elements]']",10000,0.0865599000826478,0.09036362699698657,0.16931609995663166,N/A
p3_find_n_smallest_number,prompt_4,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap_list = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap_list)\n    smallest_elements = heapq.nsmallest(arg2, heap_list)\n    return [i[1] for i in smallest_elements]']",100000,1.048299300018698,1.0696849190001376,1.1405811998993158,N/A
p3_find_n_smallest_number,prompt_4,92,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",1000,0.00441970000974834,0.004672576999291777,0.007330500055104494,N/A
p3_find_n_smallest_number,prompt_4,92,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",10000,0.04298839997500181,0.04494697200832889,0.05234570009633899,N/A
p3_find_n_smallest_number,prompt_4,92,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    return [i[1] for i in heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[0])]']",100000,0.43797779991291463,0.4509094609785825,0.5540753998793662,N/A
p3_find_n_smallest_number,prompt_4,93,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    array = [(val, i) for i, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, array)\n    return [index for _, index in smallest_elements]']",1000,0.005136100109666586,0.005551000004634261,0.008221999974921346,N/A
p3_find_n_smallest_number,prompt_4,93,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    array = [(val, i) for i, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, array)\n    return [index for _, index in smallest_elements]']",10000,0.05280809989199042,0.05524888299405575,0.07361260009929538,N/A
p3_find_n_smallest_number,prompt_4,93,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    array = [(val, i) for i, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, array)\n    return [index for _, index in smallest_elements]']",100000,0.6902649998664856,0.7142921819956973,0.8149757999926805,N/A
p3_find_n_smallest_number,prompt_4,94,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-arg1[i], i))\n        elif -arg1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    res = [item[1] for item in min_heap]\n    res.sort()\n    return res']",1000,0.004337599966675043,0.004584635996725411,0.006915200036019087,N/A
p3_find_n_smallest_number,prompt_4,94,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-arg1[i], i))\n        elif -arg1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    res = [item[1] for item in min_heap]\n    res.sort()\n    return res']",10000,0.039841199992224574,0.04224382900632918,0.06365150003693998,N/A
p3_find_n_smallest_number,prompt_4,94,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-arg1[i], i))\n        elif -arg1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    res = [item[1] for item in min_heap]\n    res.sort()\n    return res']",100000,0.4055226999334991,0.4153579689958133,0.4879801000934094,N/A
p3_find_n_smallest_number,prompt_4,95,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the number of elements in the list'\n    arg1 = list(enumerate(arg1))\n    smallest_elements = heapq.nsmallest(arg2, arg1, key=lambda x: x[1])\n    indexes = [i for i, num in smallest_elements]\n    return indexes""]",1000,0.0053859001491218805,0.0057629329967312515,0.009963999968022108,N/A
p3_find_n_smallest_number,prompt_4,95,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the number of elements in the list'\n    arg1 = list(enumerate(arg1))\n    smallest_elements = heapq.nsmallest(arg2, arg1, key=lambda x: x[1])\n    indexes = [i for i, num in smallest_elements]\n    return indexes""]",10000,0.05513940006494522,0.05862444702070206,0.14247249998152256,N/A
p3_find_n_smallest_number,prompt_4,95,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the number of elements in the list'\n    arg1 = list(enumerate(arg1))\n    smallest_elements = heapq.nsmallest(arg2, arg1, key=lambda x: x[1])\n    indexes = [i for i, num in smallest_elements]\n    return indexes""]",100000,0.6917383000254631,0.7275853569991887,0.7882449000608176,N/A
p3_find_n_smallest_number,prompt_4,96,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_values = list(enumerate(arg1))\n    smallest_pairs = heapq.nsmallest(arg2, indexed_values, key=lambda x: x[1])\n    return [index for index, value in smallest_pairs]']",1000,0.005247300025075674,0.005559729007072747,0.006585299968719482,N/A
p3_find_n_smallest_number,prompt_4,96,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_values = list(enumerate(arg1))\n    smallest_pairs = heapq.nsmallest(arg2, indexed_values, key=lambda x: x[1])\n    return [index for index, value in smallest_pairs]']",10000,0.05502690002322197,0.057743415022268894,0.06878810003399849,N/A
p3_find_n_smallest_number,prompt_4,96,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_values = list(enumerate(arg1))\n    smallest_pairs = heapq.nsmallest(arg2, indexed_values, key=lambda x: x[1])\n    return [index for index, value in smallest_pairs]']",100000,0.6932303002104163,0.7302222909941338,0.8052846998907626,N/A
p3_find_n_smallest_number,prompt_4,97,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0:\n        raise ValueError('arg2 cannot be negative.')\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_tuples = heapq.nsmallest(arg2, ((val, index) for index, val in enumerate(arg1)))\n    smallest_indices = [index for val, index in smallest_tuples]\n    return smallest_indices""]",1000,0.0058605000376701355,0.0062873990018852055,0.008824999909847975,N/A
p3_find_n_smallest_number,prompt_4,97,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0:\n        raise ValueError('arg2 cannot be negative.')\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_tuples = heapq.nsmallest(arg2, ((val, index) for index, val in enumerate(arg1)))\n    smallest_indices = [index for val, index in smallest_tuples]\n    return smallest_indices""]",10000,0.054341800045222044,0.05718131498899311,0.06888050003908575,N/A
p3_find_n_smallest_number,prompt_4,97,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0:\n        raise ValueError('arg2 cannot be negative.')\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_tuples = heapq.nsmallest(arg2, ((val, index) for index, val in enumerate(arg1)))\n    smallest_indices = [index for val, index in smallest_tuples]\n    return smallest_indices""]",100000,0.5538657000288367,0.569023283009883,0.6330160999204963,N/A
p3_find_n_smallest_number,prompt_4,98,"['import heapq\nfrom typing import List, Iterable\n\ndef funcImp(arg1: List[int], arg2: int) -> Iterable[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",1000,0.0030815000645816326,0.0033230010070838035,0.005000799894332886,N/A
p3_find_n_smallest_number,prompt_4,98,"['import heapq\nfrom typing import List, Iterable\n\ndef funcImp(arg1: List[int], arg2: int) -> Iterable[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",10000,0.028988000005483627,0.030781119999010117,0.03477699984796345,N/A
p3_find_n_smallest_number,prompt_4,98,"['import heapq\nfrom typing import List, Iterable\n\ndef funcImp(arg1: List[int], arg2: int) -> Iterable[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",100000,0.2952971002086997,0.3051303610019386,0.3629146001767367,N/A
p3_find_n_smallest_number,prompt_4,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not 1 <= arg2 <= len(arg1):\n        return []\n    min_heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result_indexes = set()\n    while len(result_indexes) < arg2:\n        num, i = heapq.heappop(min_heap)\n        result_indexes.add(i)\n    return list(result_indexes)']",1000,0.005916800117120147,0.0063826620113104585,0.008732799906283617,N/A
p3_find_n_smallest_number,prompt_4,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not 1 <= arg2 <= len(arg1):\n        return []\n    min_heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result_indexes = set()\n    while len(result_indexes) < arg2:\n        num, i = heapq.heappop(min_heap)\n        result_indexes.add(i)\n    return list(result_indexes)']",10000,0.07883419981226325,0.08143198299920186,0.08896730002015829,N/A
p3_find_n_smallest_number,prompt_4,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not 1 <= arg2 <= len(arg1):\n        return []\n    min_heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result_indexes = set()\n    while len(result_indexes) < arg2:\n        num, i = heapq.heappop(min_heap)\n        result_indexes.add(i)\n    return list(result_indexes)']",100000,0.8667393999639899,0.8826497769914567,0.9435699000023305,N/A
p3_find_n_smallest_number,prompt_4,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    pairs = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(pairs)\n    result = [heapq.heqpop(pairs)[1] for _ in range(arg2)]\n    return result']",1000,0,0,0,	 exception: module 'heapq' has no attribute 'heqpop'
p3_find_n_smallest_number,prompt_4,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    pairs = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(pairs)\n    result = [heapq.heqpop(pairs)[1] for _ in range(arg2)]\n    return result']",10000,0,0,0,	 exception: module 'heapq' has no attribute 'heqpop'
p3_find_n_smallest_number,prompt_4,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    pairs = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(pairs)\n    result = [heapq.heqpop(pairs)[1] for _ in range(arg2)]\n    return result']",100000,0,0,0,	 exception: module 'heapq' has no attribute 'heqpop'
p3_find_n_smallest_number,prompt_5,1,"['def funcImp(arg1, arg2):\n    indexed_list = [(index, number) for index, number in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_tuples = sorted_list[:arg2]\n    indexes = [i[0] for i in k_smallest_tuples]\n    return indexes']",1000,0.009906599996611476,0.01060508301248774,0.013302800012752414,N/A
p3_find_n_smallest_number,prompt_5,1,"['def funcImp(arg1, arg2):\n    indexed_list = [(index, number) for index, number in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_tuples = sorted_list[:arg2]\n    indexes = [i[0] for i in k_smallest_tuples]\n    return indexes']",10000,0.15292260004207492,0.15645708598894997,0.1927241999655962,N/A
p3_find_n_smallest_number,prompt_5,1,"['def funcImp(arg1, arg2):\n    indexed_list = [(index, number) for index, number in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_tuples = sorted_list[:arg2]\n    indexes = [i[0] for i in k_smallest_tuples]\n    return indexes']",100000,2.3282449999824166,2.3700749000068755,2.4700398000422865,N/A
p3_find_n_smallest_number,prompt_5,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indexes']",1000,0.0051531000062823296,0.005430666988249868,0.006615699967369437,N/A
p3_find_n_smallest_number,prompt_5,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indexes']",10000,0.0663234000094235,0.06830689200200141,0.07163379993289709,N/A
p3_find_n_smallest_number,prompt_5,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_k_indexes']",100000,0.7670720999594778,0.7832654459984042,0.8077507999259979,N/A
p3_find_n_smallest_number,prompt_5,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    negatives = [(-num, idx) for idx, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, negatives)\n    return [idx for num, idx in smallest_pairs]']",1000,0.005649900063872337,0.006107212991919369,0.00794610008597374,N/A
p3_find_n_smallest_number,prompt_5,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    negatives = [(-num, idx) for idx, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, negatives)\n    return [idx for num, idx in smallest_pairs]']",10000,0.05999880004674196,0.0630781879951246,0.10622150008566678,N/A
p3_find_n_smallest_number,prompt_5,3,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    negatives = [(-num, idx) for idx, num in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, negatives)\n    return [idx for num, idx in smallest_pairs]']",100000,0.8908840999938548,0.9143693620036356,0.9835371000226587,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        heap = []\n        for idx, num in enumerate(arg1):\n            if len(heap) < arg2:\n                heapq.heappush(heap, (-num, idx))\n            elif num < -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-num, idx))\n        return sorted([idx for _, idx in heap])']",1000,0.004224000032991171,0.0045815270114690065,0.009209900163114071,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        heap = []\n        for idx, num in enumerate(arg1):\n            if len(heap) < arg2:\n                heapq.heappush(heap, (-num, idx))\n            elif num < -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-num, idx))\n        return sorted([idx for _, idx in heap])']",10000,0.03893329994753003,0.041053445003926756,0.0493433999363333,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    else:\n        heap = []\n        for idx, num in enumerate(arg1):\n            if len(heap) < arg2:\n                heapq.heappush(heap, (-num, idx))\n            elif num < -heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-num, idx))\n        return sorted([idx for _, idx in heap])']",100000,0.40118080005049706,0.4109376889886335,0.49756749998778105,N/A
p3_find_n_smallest_number,prompt_5,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_elements_indexes']",1000,0.005190099822357297,0.005725911997724324,0.009694300126284361,N/A
p3_find_n_smallest_number,prompt_5,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_elements_indexes']",10000,0.06688049994409084,0.06826479599578306,0.07390099996700883,N/A
p3_find_n_smallest_number,prompt_5,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_elements_indexes']",100000,0.7771038999781013,0.790842486009933,0.8309367001056671,N/A
p3_find_n_smallest_number,prompt_5,6,"['def funcImp(arg1, arg2):\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    pairs.sort()\n    result = [index for value, index in pairs[:arg2]]\n    return result']",1000,0.011907299980521202,0.0127700729877688,0.016014999942854047,N/A
p3_find_n_smallest_number,prompt_5,6,"['def funcImp(arg1, arg2):\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    pairs.sort()\n    result = [index for value, index in pairs[:arg2]]\n    return result']",10000,0.17774329986423254,0.18357311201049015,0.2451388998888433,N/A
p3_find_n_smallest_number,prompt_5,6,"['def funcImp(arg1, arg2):\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    pairs.sort()\n    result = [index for value, index in pairs[:arg2]]\n    return result']",100000,2.881205099867657,2.936614480011631,3.18830980011262,N/A
p3_find_n_smallest_number,prompt_5,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [abs(i) for num, i in heap]']",1000,0.0029146999586373568,0.003060654019936919,0.0035081999376416206,N/A
p3_find_n_smallest_number,prompt_5,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [abs(i) for num, i in heap]']",10000,0.026517999824136496,0.027647098992019892,0.030916100135073066,N/A
p3_find_n_smallest_number,prompt_5,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [abs(i) for num, i in heap]']",100000,0.2634664000943303,0.2709849000046961,0.3125247999560088,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than number of elements in list""\n    max_heap = [-1 * x for x in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -1 * arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -1 * arg1[i])\n    return [arg1.index(-1 * i) for i in max_heap]']",1000,0.004237100016325712,0.004803473008796573,0.011827200185507536,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than number of elements in list""\n    max_heap = [-1 * x for x in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -1 * arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -1 * arg1[i])\n    return [arg1.index(-1 * i) for i in max_heap]']",10000,0.037266600178554654,0.038975410996936265,0.04299880005419254,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is more than number of elements in list""\n    max_heap = [-1 * x for x in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -1 * arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -1 * arg1[i])\n    return [arg1.index(-1 * i) for i in max_heap]']",100000,0.31729430006816983,0.3255471490090713,0.37207960011437535,N/A
p3_find_n_smallest_number,prompt_5,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(arg2):\n        max_heap.append((-arg1[i], i))\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return [i[1] for i in heapq.nlargest(arg2, max_heap)]']",1000,0.00272749993018806,0.0029439410218037665,0.003162899985909462,N/A
p3_find_n_smallest_number,prompt_5,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(arg2):\n        max_heap.append((-arg1[i], i))\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return [i[1] for i in heapq.nlargest(arg2, max_heap)]']",10000,0.025818000081926584,0.027673031997401266,0.04412789992056787,N/A
p3_find_n_smallest_number,prompt_5,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(arg2):\n        max_heap.append((-arg1[i], i))\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return [i[1] for i in heapq.nlargest(arg2, max_heap)]']",100000,0.2640621999744326,0.2717861660080962,0.31160970008932054,N/A
p3_find_n_smallest_number,prompt_5,10,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    pairs = [[item, i] for i, item in enumerate(arg1)]\n    heapq.heapify(pairs)\n    return [heapq.heappushpop(pairs, [item, i])[1] for i, item in enumerate(arg1, len(pairs))][:arg2]']",1000,0.026776300044730306,0.027864881989080457,0.032004799926653504,N/A
p3_find_n_smallest_number,prompt_5,10,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    pairs = [[item, i] for i, item in enumerate(arg1)]\n    heapq.heapify(pairs)\n    return [heapq.heappushpop(pairs, [item, i])[1] for i, item in enumerate(arg1, len(pairs))][:arg2]']",10000,0.39496869989670813,0.4035848080040887,0.47371549997478724,N/A
p3_find_n_smallest_number,prompt_5,10,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    pairs = [[item, i] for i, item in enumerate(arg1)]\n    heapq.heapify(pairs)\n    return [heapq.heappushpop(pairs, [item, i])[1] for i, item in enumerate(arg1, len(pairs))][:arg2]']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,11,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for num, idx in heap]']",1000,0.002914800075814128,0.003070342994760722,0.0038755000568926334,N/A
p3_find_n_smallest_number,prompt_5,11,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for num, idx in heap]']",10000,0.026566999964416027,0.027707024998962878,0.03898720000870526,N/A
p3_find_n_smallest_number,prompt_5,11,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for num, idx in heap]']",100000,0.26283550006337464,0.27121386900544164,0.3261627999600023,N/A
p3_find_n_smallest_number,prompt_5,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in smallest_elements]\n    return indexes']",1000,0.004698100034147501,0.00513772499980405,0.0070328000001609325,N/A
p3_find_n_smallest_number,prompt_5,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in smallest_elements]\n    return indexes']",10000,0.044795599998906255,0.04712694199290127,0.0978844000492245,N/A
p3_find_n_smallest_number,prompt_5,12,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in smallest_elements]\n    return indexes']",100000,0.45623079990036786,0.46792034500977026,0.5216910000890493,N/A
p3_find_n_smallest_number,prompt_5,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = [heapq.heappop(heap) for _ in range(min(arg2, len(heap)))]\n    return [idx for num, idx in smallest]']",1000,0.005230800015851855,0.005468135010451078,0.007476500002667308,N/A
p3_find_n_smallest_number,prompt_5,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = [heapq.heappop(heap) for _ in range(min(arg2, len(heap)))]\n    return [idx for num, idx in smallest]']",10000,0.0659882000181824,0.069546763994731,0.08122400008141994,N/A
p3_find_n_smallest_number,prompt_5,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = [heapq.heappop(heap) for _ in range(min(arg2, len(heap)))]\n    return [idx for num, idx in smallest]']",100000,0.7965202999766916,0.8149619290116243,0.8658635001629591,N/A
p3_find_n_smallest_number,prompt_5,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    else:\n        max_heap = []\n        for i in range(len(arg1)):\n            if i < arg2:\n                heapq.heappush(max_heap, (-arg1[i], i))\n            elif -max_heap[0][0] > arg1[i]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (-arg1[i], i))\n        result = [i[1] for i in max_heap]\n        return result']",1000,0.0031940999906510115,0.0034684449946507812,0.005337599897757173,N/A
p3_find_n_smallest_number,prompt_5,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    else:\n        max_heap = []\n        for i in range(len(arg1)):\n            if i < arg2:\n                heapq.heappush(max_heap, (-arg1[i], i))\n            elif -max_heap[0][0] > arg1[i]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (-arg1[i], i))\n        result = [i[1] for i in max_heap]\n        return result']",10000,0.029633200028911233,0.03118538899347186,0.034656799864023924,N/A
p3_find_n_smallest_number,prompt_5,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 < 1:\n        return []\n    else:\n        max_heap = []\n        for i in range(len(arg1)):\n            if i < arg2:\n                heapq.heappush(max_heap, (-arg1[i], i))\n            elif -max_heap[0][0] > arg1[i]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, (-arg1[i], i))\n        result = [i[1] for i in max_heap]\n        return result']",100000,0.30262350011616945,0.3124896669993177,0.3654094999656081,N/A
p3_find_n_smallest_number,prompt_5,15,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[Tuple[int, int]]:\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return [(i, num) for i, num in enumerate(arg1)]\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap) for _ in range(arg2)]\n    return sorted(result, key=lambda x: x[0])']",1000,0.005260800011456013,0.005615714008454234,0.008776700124144554,N/A
p3_find_n_smallest_number,prompt_5,15,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[Tuple[int, int]]:\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return [(i, num) for i, num in enumerate(arg1)]\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap) for _ in range(arg2)]\n    return sorted(result, key=lambda x: x[0])']",10000,0.06716209999285638,0.06908185601234436,0.08512940001673996,N/A
p3_find_n_smallest_number,prompt_5,15,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[Tuple[int, int]]:\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return [(i, num) for i, num in enumerate(arg1)]\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap) for _ in range(arg2)]\n    return sorted(result, key=lambda x: x[0])']",100000,0.774108299985528,0.8022436979948543,0.8356065000407398,N/A
p3_find_n_smallest_number,prompt_5,16,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be more than 0 and less or equal to the length of arg1')\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = []\n    for idx, num in enumerate(arg1):\n        if num in sorted_list:\n            indexes.append(idx)\n            sorted_list.remove(num)\n        if not sorted_list:\n            break\n    return indexes""]",1000,0.006156100193038583,0.006593089010566473,0.010658199898898602,N/A
p3_find_n_smallest_number,prompt_5,16,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be more than 0 and less or equal to the length of arg1')\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = []\n    for idx, num in enumerate(arg1):\n        if num in sorted_list:\n            indexes.append(idx)\n            sorted_list.remove(num)\n        if not sorted_list:\n            break\n    return indexes""]",10000,0.10568309994414449,0.10911730999825522,0.1346116999629885,N/A
p3_find_n_smallest_number,prompt_5,16,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be more than 0 and less or equal to the length of arg1')\n    sorted_list = sorted(arg1)[:arg2]\n    indexes = []\n    for idx, num in enumerate(arg1):\n        if num in sorted_list:\n            indexes.append(idx)\n            sorted_list.remove(num)\n        if not sorted_list:\n            break\n    return indexes""]",100000,1.251291299937293,1.2651974299876019,1.3356010001152754,N/A
p3_find_n_smallest_number,prompt_5,17,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n    while len(heap) > arg2:\n        heapq.heappop(heap)\n    result = [index for num, index in heap]\n    return result']",1000,0.023399099940434098,0.024919849003199487,0.031274099834263325,N/A
p3_find_n_smallest_number,prompt_5,17,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n    while len(heap) > arg2:\n        heapq.heappop(heap)\n    result = [index for num, index in heap]\n    return result']",10000,0.3348902000579983,0.3447884640144184,0.4021576000377536,N/A
p3_find_n_smallest_number,prompt_5,17,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n    while len(heap) > arg2:\n        heapq.heappop(heap)\n    result = [index for num, index in heap]\n    return result']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,18,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indices = {num: [] for num in set(arg1)}\n    for idx, num in enumerate(arg1):\n        indices[num].append(idx)\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    smallest = [-num for num in heap]\n    result = []\n    for num in smallest:\n        result.append(indices[num].pop(0))\n    return result']",1000,0.008462700061500072,0.009019047003239394,0.010416399920359254,N/A
p3_find_n_smallest_number,prompt_5,18,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indices = {num: [] for num in set(arg1)}\n    for idx, num in enumerate(arg1):\n        indices[num].append(idx)\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    smallest = [-num for num in heap]\n    result = []\n    for num in smallest:\n        result.append(indices[num].pop(0))\n    return result']",10000,0.11172610009089112,0.11728310301434249,0.14539760001935065,N/A
p3_find_n_smallest_number,prompt_5,18,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indices = {num: [] for num in set(arg1)}\n    for idx, num in enumerate(arg1):\n        indices[num].append(idx)\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if num < -heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    smallest = [-num for num in heap]\n    result = []\n    for num in smallest:\n        result.append(indices[num].pop(0))\n    return result']",100000,2.576035999925807,2.686582871002611,2.939912699861452,N/A
p3_find_n_smallest_number,prompt_5,19,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be a positive integer less than or equal to the length of arg1')\n    num_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_with_indices = heapq.nsmallest(arg2, num_with_indices)\n    smallest_indices = [index for num, index in smallest_nums_with_indices]\n    return smallest_indices""]",1000,0.0051663999911397696,0.00550592100713402,0.006319700041785836,N/A
p3_find_n_smallest_number,prompt_5,19,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be a positive integer less than or equal to the length of arg1')\n    num_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_with_indices = heapq.nsmallest(arg2, num_with_indices)\n    smallest_indices = [index for num, index in smallest_nums_with_indices]\n    return smallest_indices""]",10000,0.0522040999494493,0.05500173099106178,0.06545049999840558,N/A
p3_find_n_smallest_number,prompt_5,19,"[""from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be a positive integer less than or equal to the length of arg1')\n    num_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    smallest_nums_with_indices = heapq.nsmallest(arg2, num_with_indices)\n    smallest_indices = [index for num, index in smallest_nums_with_indices]\n    return smallest_indices""]",100000,0.6879877001047134,0.7236693279934115,0.7994677999522537,N/A
p3_find_n_smallest_number,prompt_5,20,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.005216800142079592,0.005514495992101729,0.011431599967181683,N/A
p3_find_n_smallest_number,prompt_5,20,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.06709160003811121,0.06835289699723944,0.0700714997947216,N/A
p3_find_n_smallest_number,prompt_5,20,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.7667325001675636,0.7823053209972568,0.8177755998913199,N/A
p3_find_n_smallest_number,prompt_5,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    list_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    smallest_numbers_with_indices = heapq.nsmallest(arg2, list_with_indices)\n    indices = sorted([i for num, i in smallest_numbers_with_indices])\n    return indices']",1000,0.00530440011061728,0.0056276859948411586,0.00796369998715818,N/A
p3_find_n_smallest_number,prompt_5,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    list_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    smallest_numbers_with_indices = heapq.nsmallest(arg2, list_with_indices)\n    indices = sorted([i for num, i in smallest_numbers_with_indices])\n    return indices']",10000,0.05322019988670945,0.05498753500636667,0.05768209998495877,N/A
p3_find_n_smallest_number,prompt_5,21,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    list_with_indices = [(num, i) for i, num in enumerate(arg1)]\n    smallest_numbers_with_indices = heapq.nsmallest(arg2, list_with_indices)\n    indices = sorted([i for num, i in smallest_numbers_with_indices])\n    return indices']",100000,0.6844835001975298,0.704350403000135,0.7645215000957251,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    tuple_list = [(num, index) for index, num in enumerate(arg1)]\n    tuple_list.sort()\n    smallest_tuples = tuple_list[:arg2]\n    index_list = [t[1] for t in smallest_tuples]\n    return index_list']",1000,0.011814000084996223,0.012868086001835763,0.024956299923360348,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    tuple_list = [(num, index) for index, num in enumerate(arg1)]\n    tuple_list.sort()\n    smallest_tuples = tuple_list[:arg2]\n    index_list = [t[1] for t in smallest_tuples]\n    return index_list']",10000,0.1815041999798268,0.18729463801020757,0.248704900033772,N/A
p3_find_n_smallest_number,prompt_5,22,"['def funcImp(arg1, arg2):\n    tuple_list = [(num, index) for index, num in enumerate(arg1)]\n    tuple_list.sort()\n    smallest_tuples = tuple_list[:arg2]\n    index_list = [t[1] for t in smallest_tuples]\n    return index_list']",100000,2.8942740000784397,2.9534224280086345,3.0789549998007715,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (-arg1[i], i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    smallest_indexes = [pair[1] for pair in min_heap]\n    return smallest_indexes']",1000,0.012296899920329452,0.012772885004524141,0.015258800005540252,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (-arg1[i], i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    smallest_indexes = [pair[1] for pair in min_heap]\n    return smallest_indexes']",10000,0.12026089988648891,0.12637584798969329,0.1895099999383092,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (-arg1[i], i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    smallest_indexes = [pair[1] for pair in min_heap]\n    return smallest_indexes']",100000,1.237458199961111,1.2608705949899741,1.347255100030452,N/A
p3_find_n_smallest_number,prompt_5,24,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_arg1 = sorted(enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, _ in sorted_arg1[:arg2]]\n    return indices']",1000,0.008620599983260036,0.009494747973512858,0.01709340000525117,N/A
p3_find_n_smallest_number,prompt_5,24,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_arg1 = sorted(enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, _ in sorted_arg1[:arg2]]\n    return indices']",10000,0.14172219997271895,0.14691598898731173,0.22393239988014102,N/A
p3_find_n_smallest_number,prompt_5,24,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_arg1 = sorted(enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, _ in sorted_arg1[:arg2]]\n    return indices']",100000,2.1224823999218643,2.164118452009279,2.2536114000249654,N/A
p3_find_n_smallest_number,prompt_5,25,"[""def funcImp(arg1, arg2):\n    import sys\n    if not all((isinstance(elem, int) for elem in arg1)):\n        return 'Error: arg1 is not a list of integers!'\n    if not isinstance(arg2, int):\n        return 'Error: arg2 is not an integer!'\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: Invalid input!'\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [idx for idx, val in sorted_list[:arg2]]""]",1000,0.011020299978554249,0.011957948000635953,0.015975099988281727,N/A
p3_find_n_smallest_number,prompt_5,25,"[""def funcImp(arg1, arg2):\n    import sys\n    if not all((isinstance(elem, int) for elem in arg1)):\n        return 'Error: arg1 is not a list of integers!'\n    if not isinstance(arg2, int):\n        return 'Error: arg2 is not an integer!'\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: Invalid input!'\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [idx for idx, val in sorted_list[:arg2]]""]",10000,0.16475989995524287,0.17090584399877115,0.19486430007964373,N/A
p3_find_n_smallest_number,prompt_5,25,"[""def funcImp(arg1, arg2):\n    import sys\n    if not all((isinstance(elem, int) for elem in arg1)):\n        return 'Error: arg1 is not a list of integers!'\n    if not isinstance(arg2, int):\n        return 'Error: arg2 is not an integer!'\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return 'Error: Invalid input!'\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    return [idx for idx, val in sorted_list[:arg2]]""]",100000,2.4160337999928743,2.459664890987333,2.540529499994591,N/A
p3_find_n_smallest_number,prompt_5,26,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",1000,0.007342600030824542,0.007927372003905475,0.009886299958452582,N/A
p3_find_n_smallest_number,prompt_5,26,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",10000,0.11230939999222755,0.1168999349954538,0.13815060001797974,N/A
p3_find_n_smallest_number,prompt_5,26,"['def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    sorted_indexes = sorted(range(len(arg1)), key=lambda k: arg1[k])\n    return sorted_indexes[:arg2]']",100000,1.6115359999239445,1.6405183020047844,1.7322278001811355,N/A
p3_find_n_smallest_number,prompt_5,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(int(arg2)):\n        val, idx = heapq.heappop(heap)\n        result.append(idx)\n    return result']",1000,0.0047871998976916075,0.005224885994102806,0.006273800041526556,N/A
p3_find_n_smallest_number,prompt_5,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(int(arg2)):\n        val, idx = heapq.heappop(heap)\n        result.append(idx)\n    return result']",10000,0.06520579988136888,0.06862304300768302,0.13201029994525015,N/A
p3_find_n_smallest_number,prompt_5,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(int(arg2)):\n        val, idx = heapq.heappop(heap)\n        result.append(idx)\n    return result']",100000,0.7526519999373704,0.7665298509853892,0.8156361000146717,N/A
p3_find_n_smallest_number,prompt_5,28,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid inputs')\n    enum_list = list(enumerate(arg1))\n    sorted_list = sorted(enum_list, key=lambda x: x[1])\n    smallest_k_elements = sorted_list[:arg2]\n    smallest_k_indexes = [index for index, value in smallest_k_elements]\n    return smallest_k_indexes""]",1000,0.008723000064492226,0.00951837900094688,0.026962900068610907,N/A
p3_find_n_smallest_number,prompt_5,28,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid inputs')\n    enum_list = list(enumerate(arg1))\n    sorted_list = sorted(enum_list, key=lambda x: x[1])\n    smallest_k_elements = sorted_list[:arg2]\n    smallest_k_indexes = [index for index, value in smallest_k_elements]\n    return smallest_k_indexes""]",10000,0.14234489994123578,0.1459227729868144,0.16882949997670949,N/A
p3_find_n_smallest_number,prompt_5,28,"[""def funcImp(arg1, arg2):\n    if not arg1 or arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid inputs')\n    enum_list = list(enumerate(arg1))\n    sorted_list = sorted(enum_list, key=lambda x: x[1])\n    smallest_k_elements = sorted_list[:arg2]\n    smallest_k_indexes = [index for index, value in smallest_k_elements]\n    return smallest_k_indexes""]",100000,2.180840600049123,2.2212601770064793,2.288439800031483,N/A
p3_find_n_smallest_number,prompt_5,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-num, i))\n    return sorted([index for num, index in max_heap])']",1000,0.004250299884006381,0.0044685900071635845,0.006600000197067857,N/A
p3_find_n_smallest_number,prompt_5,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-num, i))\n    return sorted([index for num, index in max_heap])']",10000,0.03916530008427799,0.040737702988553795,0.046689300099387765,N/A
p3_find_n_smallest_number,prompt_5,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-num, i))\n    return sorted([index for num, index in max_heap])']",100000,0.3967597000300884,0.4088865249790251,0.49843790009617805,N/A
p3_find_n_smallest_number,prompt_5,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    pairs = [(-value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(pairs)\n    pairs = pairs[:arg2]\n    for index, value in enumerate(arg1[arg2:], start=arg2):\n        heapq.heappushpop(pairs, (-value, index))\n    indices = [index for value, index in pairs]\n    return indices']",1000,0.011708100093528628,0.012231568996794522,0.016317799920216203,N/A
p3_find_n_smallest_number,prompt_5,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    pairs = [(-value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(pairs)\n    pairs = pairs[:arg2]\n    for index, value in enumerate(arg1[arg2:], start=arg2):\n        heapq.heappushpop(pairs, (-value, index))\n    indices = [index for value, index in pairs]\n    return indices']",10000,0.13517149980179965,0.14149029700551183,0.20157879986800253,N/A
p3_find_n_smallest_number,prompt_5,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    pairs = [(-value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(pairs)\n    pairs = pairs[:arg2]\n    for index, value in enumerate(arg1[arg2:], start=arg2):\n        heapq.heappushpop(pairs, (-value, index))\n    indices = [index for value, index in pairs]\n    return indices']",100000,1.5587065001018345,1.587333184001036,1.6712483000010252,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise TypeError(""Input types are not correct. \'arg1\' should be a list and \'arg2\' should be an integer."")\n    if len(arg1) < arg2:\n        raise ValueError(""\'arg2\' must be less than or equal to the length of \'arg1\'."")\n    queue = [(-val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(queue)\n    return [idx for val, idx in heapq.nsmallest(arg2, queue)]']",1000,0.007940399926155806,0.008531690989620984,0.011060499818995595,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise TypeError(""Input types are not correct. \'arg1\' should be a list and \'arg2\' should be an integer."")\n    if len(arg1) < arg2:\n        raise ValueError(""\'arg2\' must be less than or equal to the length of \'arg1\'."")\n    queue = [(-val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(queue)\n    return [idx for val, idx in heapq.nsmallest(arg2, queue)]']",10000,0.09980840003117919,0.10296228100545704,0.10611900012008846,N/A
p3_find_n_smallest_number,prompt_5,31,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise TypeError(""Input types are not correct. \'arg1\' should be a list and \'arg2\' should be an integer."")\n    if len(arg1) < arg2:\n        raise ValueError(""\'arg2\' must be less than or equal to the length of \'arg1\'."")\n    queue = [(-val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(queue)\n    return [idx for val, idx in heapq.nsmallest(arg2, queue)]']",100000,1.197726899990812,1.236804099008441,1.3345441001001745,N/A
p3_find_n_smallest_number,prompt_5,32,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]']",1000,0.004673599964007735,0.0049176910053938625,0.007511799922212958,N/A
p3_find_n_smallest_number,prompt_5,32,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]']",10000,0.04347609984688461,0.0463283409900032,0.05874740006402135,N/A
p3_find_n_smallest_number,prompt_5,32,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]']",100000,0.4255351999308914,0.43840172099182384,0.5310716999229044,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    enumerated_arg1 = list(enumerate(arg1))\n    sorted_pairs = sorted(enumerated_arg1, key=lambda x: x[1])\n    smallest_k_pairs = sorted_pairs[:arg2]\n    return [i[0] for i in smallest_k_pairs]']",1000,0.008475099923089147,0.009298468988854438,0.014626199845224619,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    enumerated_arg1 = list(enumerate(arg1))\n    sorted_pairs = sorted(enumerated_arg1, key=lambda x: x[1])\n    smallest_k_pairs = sorted_pairs[:arg2]\n    return [i[0] for i in smallest_k_pairs]']",10000,0.1417879001237452,0.14645047000842168,0.18097729980945587,N/A
p3_find_n_smallest_number,prompt_5,33,"['def funcImp(arg1, arg2):\n    enumerated_arg1 = list(enumerate(arg1))\n    sorted_pairs = sorted(enumerated_arg1, key=lambda x: x[1])\n    smallest_k_pairs = sorted_pairs[:arg2]\n    return [i[0] for i in smallest_k_pairs]']",100000,2.1693146999459714,2.2170878500002438,2.3036844001617283,N/A
p3_find_n_smallest_number,prompt_5,34,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indexes = [i for _, i in heap]\n    return indexes']",1000,0.012520800111815333,0.013305198985617607,0.015116099966689944,N/A
p3_find_n_smallest_number,prompt_5,34,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indexes = [i for _, i in heap]\n    return indexes']",10000,0.12634290009737015,0.12955489198444411,0.13886020006611943,N/A
p3_find_n_smallest_number,prompt_5,34,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indexes = [i for _, i in heap]\n    return indexes']",100000,1.2865573999006301,1.3034325380017981,1.3489129999652505,N/A
p3_find_n_smallest_number,prompt_5,35,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' exceeds the length of the list""\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, _ in sorted_list[:arg2]]\n    return indexes']",1000,0.008402999956160784,0.009103233995847403,0.01139350002631545,N/A
p3_find_n_smallest_number,prompt_5,35,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' exceeds the length of the list""\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, _ in sorted_list[:arg2]]\n    return indexes']",10000,0.14275800017639995,0.1478688140073791,0.19980009994469583,N/A
p3_find_n_smallest_number,prompt_5,35,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' exceeds the length of the list""\n    sorted_list = sorted(enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, _ in sorted_list[:arg2]]\n    return indexes']",100000,2.1096550000365824,2.1500076379976236,2.238092599902302,N/A
p3_find_n_smallest_number,prompt_5,36,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid Input: k cannot be greater than the number of elements in the array'\n    index_array = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(index_array)\n    return [heapq.heappop(index_array)[1] for _ in range(len(index_array))][:arg2]""]",1000,0.021010200027376413,0.02243521799566224,0.030875599943101406,N/A
p3_find_n_smallest_number,prompt_5,36,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid Input: k cannot be greater than the number of elements in the array'\n    index_array = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(index_array)\n    return [heapq.heappop(index_array)[1] for _ in range(len(index_array))][:arg2]""]",10000,0.3110201999079436,0.32378453200683,0.41634849994443357,N/A
p3_find_n_smallest_number,prompt_5,36,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid Input: k cannot be greater than the number of elements in the array'\n    index_array = list(zip(arg1, range(len(arg1))))\n    heapq.heapify(index_array)\n    return [heapq.heappop(index_array)[1] for _ in range(len(index_array))][:arg2]""]",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heap.append((num, i))\n    heapq.heapify(heap)\n    res = []\n    for _ in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return res']",1000,0.0056833999697119,0.006003110008314252,0.0078044000547379255,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heap.append((num, i))\n    heapq.heapify(heap)\n    res = []\n    for _ in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return res']",10000,0.06942329998128116,0.07243719098856673,0.07643959997221828,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heap.append((num, i))\n    heapq.heapify(heap)\n    res = []\n    for _ in range(arg2):\n        res.append(heapq.heappop(heap)[1])\n    return res']",100000,0.7912944999989122,0.8077874969807454,0.8456164000090212,N/A
p3_find_n_smallest_number,prompt_5,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2 or num < -heap[0][0]:\n            if len(heap) == arg2:\n                heapq.heappop(heap)\n            heapq.heappush(heap, (-num, index))\n    indices = [i[1] for i in heap]\n    indices.sort()\n    return indices']",1000,0.004310299875214696,0.004520181005354971,0.005976999877020717,N/A
p3_find_n_smallest_number,prompt_5,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2 or num < -heap[0][0]:\n            if len(heap) == arg2:\n                heapq.heappop(heap)\n            heapq.heappush(heap, (-num, index))\n    indices = [i[1] for i in heap]\n    indices.sort()\n    return indices']",10000,0.03942779987119138,0.041930784010328355,0.05555159994401038,N/A
p3_find_n_smallest_number,prompt_5,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2 or num < -heap[0][0]:\n            if len(heap) == arg2:\n                heapq.heappop(heap)\n            heapq.heappush(heap, (-num, index))\n    indices = [i[1] for i in heap]\n    indices.sort()\n    return indices']",100000,0.3968523000366986,0.41213404400739817,0.5038560000248253,N/A
p3_find_n_smallest_number,prompt_5,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    max_heap = []\n    for index, number in indexed_numbers:\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-number, index))\n        elif number < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-number, index))\n    k_smallest_indexes = [heap_item[1] for heap_item in max_heap]\n    return k_smallest_indexes']",1000,0.0060368000995367765,0.006555073990020901,0.007836199831217527,N/A
p3_find_n_smallest_number,prompt_5,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    max_heap = []\n    for index, number in indexed_numbers:\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-number, index))\n        elif number < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-number, index))\n    k_smallest_indexes = [heap_item[1] for heap_item in max_heap]\n    return k_smallest_indexes']",10000,0.06597329978831112,0.0704954760055989,0.14717759983614087,N/A
p3_find_n_smallest_number,prompt_5,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_numbers = [(number, index) for index, number in enumerate(arg1)]\n    max_heap = []\n    for index, number in indexed_numbers:\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-number, index))\n        elif number < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-number, index))\n    k_smallest_indexes = [heap_item[1] for heap_item in max_heap]\n    return k_smallest_indexes']",100000,0.85762959998101,0.8808337670052424,0.9428340999875218,N/A
p3_find_n_smallest_number,prompt_5,40,"['def funcImp(arg1, arg2):\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    value_index_pairs.sort()\n    smallest_indexes = [index for value, index in value_index_pairs[:arg2]]\n    return smallest_indexes']",1000,0.01196089992299676,0.012689297001343221,0.02053950005210936,N/A
p3_find_n_smallest_number,prompt_5,40,"['def funcImp(arg1, arg2):\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    value_index_pairs.sort()\n    smallest_indexes = [index for value, index in value_index_pairs[:arg2]]\n    return smallest_indexes']",10000,0.17903889995068312,0.1847596830013208,0.22428089985623956,N/A
p3_find_n_smallest_number,prompt_5,40,"['def funcImp(arg1, arg2):\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    value_index_pairs.sort()\n    smallest_indexes = [index for value, index in value_index_pairs[:arg2]]\n    return smallest_indexes']",100000,2.9002749999053776,2.9606868549995125,3.079270499991253,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuples = [(value, idx) for idx, value in enumerate(arg1)]\n    heapList = tuples[:arg2]\n    heapq.heapify(heapList)\n    for idx in range(arg2, len(tuples)):\n        if tuples[idx][0] < heapList[0][0]:\n            heapq.heappushpop(heapList, tuples[idx])\n    indices = [idx for value, idx in heapList]\n    return indices']",1000,0.006632099859416485,0.007189523000270128,0.012643499998375773,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuples = [(value, idx) for idx, value in enumerate(arg1)]\n    heapList = tuples[:arg2]\n    heapq.heapify(heapList)\n    for idx in range(arg2, len(tuples)):\n        if tuples[idx][0] < heapList[0][0]:\n            heapq.heappushpop(heapList, tuples[idx])\n    indices = [idx for value, idx in heapList]\n    return indices']",10000,0.06436560000292957,0.06698898599715904,0.08557610004208982,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuples = [(value, idx) for idx, value in enumerate(arg1)]\n    heapList = tuples[:arg2]\n    heapq.heapify(heapList)\n    for idx in range(arg2, len(tuples)):\n        if tuples[idx][0] < heapList[0][0]:\n            heapq.heappushpop(heapList, tuples[idx])\n    indices = [idx for value, idx in heapList]\n    return indices']",100000,0.9228434998076409,0.9452106350054964,0.992791699944064,N/A
p3_find_n_smallest_number,prompt_5,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",1000,0.005196199985221028,0.0055096039944328365,0.0077738999389112,N/A
p3_find_n_smallest_number,prompt_5,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",10000,0.06621169997379184,0.0680203730193898,0.08107840013690293,N/A
p3_find_n_smallest_number,prompt_5,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",100000,0.7496801998931915,0.7704481790028512,0.8132223000284284,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx, num in enumerate(arg1[arg2:]):\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, idx + arg2))\n    indices = [idx for num, idx in heap]\n    return indices']",1000,0.00307460012845695,0.0032878900016658007,0.004109000088647008,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx, num in enumerate(arg1[arg2:]):\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, idx + arg2))\n    indices = [idx for num, idx in heap]\n    return indices']",10000,0.03007080010138452,0.03165170199703425,0.0583893998991698,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx, num in enumerate(arg1[arg2:]):\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, idx + arg2))\n    indices = [idx for num, idx in heap]\n    return indices']",100000,0.31718880007974803,0.32607784900115805,0.368455900112167,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -max_heap[0][0] > value:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-value, index))\n    indexes = [j[1] for j in max_heap]\n    indexes.reverse()\n    return indexes']",1000,0.004247599979862571,0.0046962519944645465,0.009940699907019734,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -max_heap[0][0] > value:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-value, index))\n    indexes = [j[1] for j in max_heap]\n    indexes.reverse()\n    return indexes']",10000,0.039699500193819404,0.04169312800047919,0.052470399998128414,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -max_heap[0][0] > value:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-value, index))\n    indexes = [j[1] for j in max_heap]\n    indexes.reverse()\n    return indexes']",100000,0.4017317998223007,0.4129918200103566,0.5085204998031259,N/A
p3_find_n_smallest_number,prompt_5,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    dictIndexes = {}\n    for index, value in enumerate(arg1):\n        if value in dictIndexes:\n            dictIndexes[value].append(index)\n        else:\n            dictIndexes[value] = [index]\n    minHeap = []\n    for val in arg1:\n        heapq.heappush(minHeap, val)\n    indexes = []\n    while len(indexes) < arg2:\n        smallestVal = heapq.heappop(minHeap)\n        indexes.append(dictIndexes[smallestVal].pop())\n        if not dictIndexes[smallestVal]:\n            del dictIndexes[smallestVal]\n    return indexes']",1000,0.009287799941375852,0.00992728901328519,0.01478220010176301,N/A
p3_find_n_smallest_number,prompt_5,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    dictIndexes = {}\n    for index, value in enumerate(arg1):\n        if value in dictIndexes:\n            dictIndexes[value].append(index)\n        else:\n            dictIndexes[value] = [index]\n    minHeap = []\n    for val in arg1:\n        heapq.heappush(minHeap, val)\n    indexes = []\n    while len(indexes) < arg2:\n        smallestVal = heapq.heappop(minHeap)\n        indexes.append(dictIndexes[smallestVal].pop())\n        if not dictIndexes[smallestVal]:\n            del dictIndexes[smallestVal]\n    return indexes']",10000,0.10171720013022423,0.10428924801759422,0.11066240002401173,N/A
p3_find_n_smallest_number,prompt_5,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    dictIndexes = {}\n    for index, value in enumerate(arg1):\n        if value in dictIndexes:\n            dictIndexes[value].append(index)\n        else:\n            dictIndexes[value] = [index]\n    minHeap = []\n    for val in arg1:\n        heapq.heappush(minHeap, val)\n    indexes = []\n    while len(indexes) < arg2:\n        smallestVal = heapq.heappop(minHeap)\n        indexes.append(dictIndexes[smallestVal].pop())\n        if not dictIndexes[smallestVal]:\n            del dictIndexes[smallestVal]\n    return indexes']",100000,1.4395149999763817,1.4865252789924852,1.5850494001060724,N/A
p3_find_n_smallest_number,prompt_5,46,"['def funcImp(arg1, arg2):\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    pairs.sort()\n    smallest_pairs = pairs[:arg2]\n    indices = [index for value, index in smallest_pairs]\n    return indices']",1000,0.012040599947795272,0.012650039992295206,0.019253799924626946,N/A
p3_find_n_smallest_number,prompt_5,46,"['def funcImp(arg1, arg2):\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    pairs.sort()\n    smallest_pairs = pairs[:arg2]\n    indices = [index for value, index in smallest_pairs]\n    return indices']",10000,0.18008239986374974,0.18605236701434477,0.27830199990421534,N/A
p3_find_n_smallest_number,prompt_5,46,"['def funcImp(arg1, arg2):\n    pairs = [(value, index) for index, value in enumerate(arg1)]\n    pairs.sort()\n    smallest_pairs = pairs[:arg2]\n    indices = [index for value, index in smallest_pairs]\n    return indices']",100000,2.88168379990384,2.923942363006063,3.04953970015049,N/A
p3_find_n_smallest_number,prompt_5,47,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return 'The list has fewer elements than requested'\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result[::-1]""]",1000,0.0023630999494343996,0.0025683730025775732,0.003776900004595518,N/A
p3_find_n_smallest_number,prompt_5,47,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return 'The list has fewer elements than requested'\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result[::-1]""]",10000,0.023365800036117435,0.02490478699328378,0.028965899953618646,N/A
p3_find_n_smallest_number,prompt_5,47,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return 'The list has fewer elements than requested'\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result[::-1]""]",100000,0.23923479998484254,0.24822988398373128,0.3025317001156509,N/A
p3_find_n_smallest_number,prompt_5,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[index], index))\n    indexes = [item[1] for item in heap]\n    return indexes']",1000,0.0022623001132160425,0.0024163939943537115,0.00315869995392859,N/A
p3_find_n_smallest_number,prompt_5,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[index], index))\n    indexes = [item[1] for item in heap]\n    return indexes']",10000,0.022993699880316854,0.02420374399982393,0.03971889987587929,N/A
p3_find_n_smallest_number,prompt_5,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[index], index))\n    indexes = [item[1] for item in heap]\n    return indexes']",100000,0.23176880017854273,0.23793149900622665,0.3165881000459194,N/A
p3_find_n_smallest_number,prompt_5,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise ValueError(""Invalid input. \'arg1\' should be a list and \'arg2\' should be an integer."")\n    if len(arg1) < arg2:\n        raise ValueError(""Invalid input. \'arg2\' should be less than the length of \'arg1\'."")\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in smallest_nums]\n    return indexes']",1000,0.0027199999894946814,0.0028814059868454934,0.005180099979043007,N/A
p3_find_n_smallest_number,prompt_5,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise ValueError(""Invalid input. \'arg1\' should be a list and \'arg2\' should be an integer."")\n    if len(arg1) < arg2:\n        raise ValueError(""Invalid input. \'arg2\' should be less than the length of \'arg1\'."")\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in smallest_nums]\n    return indexes']",10000,0.021890199976041913,0.022895294995978473,0.029498599935323,N/A
p3_find_n_smallest_number,prompt_5,49,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise ValueError(""Invalid input. \'arg1\' should be a list and \'arg2\' should be an integer."")\n    if len(arg1) < arg2:\n        raise ValueError(""Invalid input. \'arg2\' should be less than the length of \'arg1\'."")\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in smallest_nums]\n    return indexes']",100000,0.15579800005070865,0.1600621479540132,0.17428559996187687,N/A
p3_find_n_smallest_number,prompt_5,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    copyOfArg1 = list(arg1)\n    heapq.heapify(arg1)\n    smallestElement = [heapq.heappop(arg1) for _ in range(arg2)]\n    indices = [index for index in range(len(copyOfArg1)) if copyOfArg1[index] in smallestElement]\n    return indices']",1000,0,0,0,	 exception: index out of range
p3_find_n_smallest_number,prompt_5,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    copyOfArg1 = list(arg1)\n    heapq.heapify(arg1)\n    smallestElement = [heapq.heappop(arg1) for _ in range(arg2)]\n    indices = [index for index in range(len(copyOfArg1)) if copyOfArg1[index] in smallestElement]\n    return indices']",10000,0,0,0,	 exception: index out of range
p3_find_n_smallest_number,prompt_5,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    copyOfArg1 = list(arg1)\n    heapq.heapify(arg1)\n    smallestElement = [heapq.heappop(arg1) for _ in range(arg2)]\n    indices = [index for index in range(len(copyOfArg1)) if copyOfArg1[index] in smallestElement]\n    return indices']",100000,0,0,0,	 exception: index out of range
p3_find_n_smallest_number,prompt_5,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(nums)\n    result = [heapq.heappop(nums)[1] for _ in range(arg2)]\n    return result']",1000,0.005021299934014678,0.0055038140108808874,0.007650999817997217,N/A
p3_find_n_smallest_number,prompt_5,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(nums)\n    result = [heapq.heappop(nums)[1] for _ in range(arg2)]\n    return result']",10000,0.06412200001068413,0.06664588200394064,0.07370420009829104,N/A
p3_find_n_smallest_number,prompt_5,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(nums)\n    result = [heapq.heappop(nums)[1] for _ in range(arg2)]\n    return result']",100000,0.7701481999829412,0.7842333630146459,0.8611538000404835,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    arg1 = [(num, i) for i, num in enumerate(arg1)]\n    min_heap = arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i][0] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    indices = [item[1] for item in min_heap]\n    return indices']",1000,0.005424499977380037,0.006328594998922199,0.0200080000795424,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    arg1 = [(num, i) for i, num in enumerate(arg1)]\n    min_heap = arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i][0] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    indices = [item[1] for item in min_heap]\n    return indices']",10000,0.059471599990502,0.06243060999782756,0.09152200003154576,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    arg1 = [(num, i) for i, num in enumerate(arg1)]\n    min_heap = arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i][0] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, arg1[i])\n    indices = [item[1] for item in min_heap]\n    return indices']",100000,0.7699814001098275,0.7884588070004247,0.8502059001475573,N/A
p3_find_n_smallest_number,prompt_5,53,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        pass\n        return list(range(len(arg1)))\n    tuple_list = list(enumerate(arg1))\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    selected_tuples = sorted_list[:arg2]\n    index_list = [i[0] for i in selected_tuples]\n    return index_list\npass']",1000,0.008702200138941407,0.009308527982793748,0.011163600021973252,N/A
p3_find_n_smallest_number,prompt_5,53,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        pass\n        return list(range(len(arg1)))\n    tuple_list = list(enumerate(arg1))\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    selected_tuples = sorted_list[:arg2]\n    index_list = [i[0] for i in selected_tuples]\n    return index_list\npass']",10000,0.1417107000015676,0.14552318300819025,0.1787264000158757,N/A
p3_find_n_smallest_number,prompt_5,53,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        pass\n        return list(range(len(arg1)))\n    tuple_list = list(enumerate(arg1))\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    selected_tuples = sorted_list[:arg2]\n    index_list = [i[0] for i in selected_tuples]\n    return index_list\npass']",100000,2.1801388999447227,2.2115157770039513,2.2648340999148786,N/A
p3_find_n_smallest_number,prompt_5,54,"['from queue import PriorityQueue\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    queue = PriorityQueue()\n    for i in range(len(arg1)):\n        queue.put((-arg1[i], i))\n        if queue.qsize() > arg2:\n            queue.get()\n    indexes = []\n    while not queue.empty():\n        indexes.append(queue.get()[1])\n    indexes = indexes[::-1]\n    return indexes']",1000,0.11212749988771975,0.11692856000037864,0.12461620010435581,N/A
p3_find_n_smallest_number,prompt_5,54,"['from queue import PriorityQueue\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    queue = PriorityQueue()\n    for i in range(len(arg1)):\n        queue.put((-arg1[i], i))\n        if queue.qsize() > arg2:\n            queue.get()\n    indexes = []\n    while not queue.empty():\n        indexes.append(queue.get()[1])\n    indexes = indexes[::-1]\n    return indexes']",10000,1.1433264999650419,1.1663265409995802,1.2335834000259638,N/A
p3_find_n_smallest_number,prompt_5,54,"['from queue import PriorityQueue\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    queue = PriorityQueue()\n    for i in range(len(arg1)):\n        queue.put((-arg1[i], i))\n        if queue.qsize() > arg2:\n            queue.get()\n    indexes = []\n    while not queue.empty():\n        indexes.append(queue.get()[1])\n    indexes = indexes[::-1]\n    return indexes']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [item[1] for item in heap]\n    return result']",1000,0.002990699838846922,0.0031251229951158167,0.003509699832648039,N/A
p3_find_n_smallest_number,prompt_5,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [item[1] for item in heap]\n    return result']",10000,0.027093200013041496,0.02846335800597444,0.03460079990327358,N/A
p3_find_n_smallest_number,prompt_5,55,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [item[1] for item in heap]\n    return result']",100000,0.2696378000546247,0.2760580410039984,0.31693230010569096,N/A
p3_find_n_smallest_number,prompt_5,56,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0 or arg2 > len(arg1):\n        return []\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    paired_list.sort()\n    smallest_k_pairs = paired_list[:arg2]\n    indexes = [index for value, index in smallest_k_pairs]\n    return indexes']",1000,0.011986600002273917,0.012873914986848832,0.027302199974656105,N/A
p3_find_n_smallest_number,prompt_5,56,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0 or arg2 > len(arg1):\n        return []\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    paired_list.sort()\n    smallest_k_pairs = paired_list[:arg2]\n    indexes = [index for value, index in smallest_k_pairs]\n    return indexes']",10000,0.17810710007324815,0.1833584169880487,0.215144099900499,N/A
p3_find_n_smallest_number,prompt_5,56,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0 or arg2 > len(arg1):\n        return []\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    paired_list.sort()\n    smallest_k_pairs = paired_list[:arg2]\n    indexes = [index for value, index in smallest_k_pairs]\n    return indexes']",100000,2.8876018000300974,2.9355195210059173,3.0595672999043018,N/A
p3_find_n_smallest_number,prompt_5,57,"['def funcImp(arg1, arg2):\n    index_num_list = [(index, num) for index, num in enumerate(arg1)]\n    sorted_list = sorted(index_num_list, key=lambda x: x[1])\n    sliced_sorted_list = sorted_list[:arg2]\n    result_index_list = [index for index, num in sliced_sorted_list]\n    return result_index_list']",1000,0.010150799993425608,0.01069838399766013,0.01288260007277131,N/A
p3_find_n_smallest_number,prompt_5,57,"['def funcImp(arg1, arg2):\n    index_num_list = [(index, num) for index, num in enumerate(arg1)]\n    sorted_list = sorted(index_num_list, key=lambda x: x[1])\n    sliced_sorted_list = sorted_list[:arg2]\n    result_index_list = [index for index, num in sliced_sorted_list]\n    return result_index_list']",10000,0.15718619991093874,0.1601780480076559,0.18644489999860525,N/A
p3_find_n_smallest_number,prompt_5,57,"['def funcImp(arg1, arg2):\n    index_num_list = [(index, num) for index, num in enumerate(arg1)]\n    sorted_list = sorted(index_num_list, key=lambda x: x[1])\n    sliced_sorted_list = sorted_list[:arg2]\n    result_index_list = [index for index, num in sliced_sorted_list]\n    return result_index_list']",100000,2.307020300067961,2.3379709129827098,2.418197799939662,N/A
p3_find_n_smallest_number,prompt_5,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        pass\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",1000,0.005337500013411045,0.005650109006091952,0.00890330015681684,N/A
p3_find_n_smallest_number,prompt_5,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        pass\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",10000,0.06969879986718297,0.07100214697886259,0.07408599997870624,N/A
p3_find_n_smallest_number,prompt_5,58,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        pass\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",100000,0.7753367000259459,0.7895286829955875,0.8240651001688093,N/A
p3_find_n_smallest_number,prompt_5,59,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(len(heap))]\n    result = result[::-1]\n    return result']",1000,0.011761000147089362,0.012259519998915494,0.013006499968469143,N/A
p3_find_n_smallest_number,prompt_5,59,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(len(heap))]\n    result = result[::-1]\n    return result']",10000,0.11741319997236133,0.12190478800795973,0.14243979984894395,N/A
p3_find_n_smallest_number,prompt_5,59,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(len(heap))]\n    result = result[::-1]\n    return result']",100000,1.1877224000636488,1.2077143740118481,1.258329200092703,N/A
p3_find_n_smallest_number,prompt_5,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_nums)\n    smallest_tuples = heapq.nsmallest(arg2, indexed_nums)\n    smallest_indices = [t[1] for t in smallest_tuples]\n    return smallest_indices']",1000,0.007225099951028824,0.007722156003583222,0.016510199988260865,N/A
p3_find_n_smallest_number,prompt_5,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_nums)\n    smallest_tuples = heapq.nsmallest(arg2, indexed_nums)\n    smallest_indices = [t[1] for t in smallest_tuples]\n    return smallest_indices']",10000,0.08474890002980828,0.08771228700177744,0.09975789999589324,N/A
p3_find_n_smallest_number,prompt_5,60,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(indexed_nums)\n    smallest_tuples = heapq.nsmallest(arg2, indexed_nums)\n    smallest_indices = [t[1] for t in smallest_tuples]\n    return smallest_indices']",100000,1.0384819000028074,1.0580766060063616,1.0966072999872267,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.005287399981170893,0.005579188000410795,0.009046399965882301,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.06594050000421703,0.06704948300030082,0.06850839988328516,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.7747132999356836,0.7886723590036854,0.8134961000178009,N/A
p3_find_n_smallest_number,prompt_5,62,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    h = []\n    for val in arg1:\n        heapq.heappush(h, val)\n    smallest_nums = []\n    for i in range(arg2):\n        smallest_nums.append(heapq.heappop(h))\n    indices = []\n    for num in smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num:\n                indices.append(i)\n                break\n    return indices']",1000,0.009283799910917878,0.009898767995182425,0.013999699847772717,N/A
p3_find_n_smallest_number,prompt_5,62,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    h = []\n    for val in arg1:\n        heapq.heappush(h, val)\n    smallest_nums = []\n    for i in range(arg2):\n        smallest_nums.append(heapq.heappop(h))\n    indices = []\n    for num in smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num:\n                indices.append(i)\n                break\n    return indices']",10000,0.08823590003885329,0.09215138100553304,0.15744570014066994,N/A
p3_find_n_smallest_number,prompt_5,62,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    h = []\n    for val in arg1:\n        heapq.heappush(h, val)\n    smallest_nums = []\n    for i in range(arg2):\n        smallest_nums.append(heapq.heappop(h))\n    indices = []\n    for num in smallest_nums:\n        for i in range(len(arg1)):\n            if arg1[i] == num:\n                indices.append(i)\n                break\n    return indices']",100000,0.6575726000592113,0.66548400899861,0.7216171999461949,N/A
p3_find_n_smallest_number,prompt_5,63,"['def funcImp(arg1, arg2):\n    arg1 = list(enumerate(arg1))\n    arg1.sort(key=lambda x: x[1])\n    return [i[0] for i in arg1[:arg2]]']",1000,0.008519400143995881,0.009041995008010418,0.012424400076270103,N/A
p3_find_n_smallest_number,prompt_5,63,"['def funcImp(arg1, arg2):\n    arg1 = list(enumerate(arg1))\n    arg1.sort(key=lambda x: x[1])\n    return [i[0] for i in arg1[:arg2]]']",10000,0.14074210007674992,0.14392012500436976,0.1726043000817299,N/A
p3_find_n_smallest_number,prompt_5,63,"['def funcImp(arg1, arg2):\n    arg1 = list(enumerate(arg1))\n    arg1.sort(key=lambda x: x[1])\n    return [i[0] for i in arg1[:arg2]]']",100000,2.123575100209564,2.1558673090068625,2.2475843001157045,N/A
p3_find_n_smallest_number,prompt_5,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[idx], idx))\n    result = [idx for val, idx in max_heap]\n    return result']",1000,0.0028039999306201935,0.002956827003508806,0.003225299995392561,N/A
p3_find_n_smallest_number,prompt_5,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[idx], idx))\n    result = [idx for val, idx in max_heap]\n    return result']",10000,0.026104699820280075,0.028054667990654706,0.041002599988132715,N/A
p3_find_n_smallest_number,prompt_5,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[idx], idx))\n    result = [idx for val, idx in max_heap]\n    return result']",100000,0.2632009000517428,0.27116131798131393,0.31274859979748726,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 0 or arg2 > len(arg1):\n        return ""Invalid \'k\' value""\n    smallest_k_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k_indexes = [i[0] for i in smallest_k_pairs]\n    return smallest_k_indexes']",1000,0.004712800029665232,0.00534015599405393,0.016562400152906775,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 0 or arg2 > len(arg1):\n        return ""Invalid \'k\' value""\n    smallest_k_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k_indexes = [i[0] for i in smallest_k_pairs]\n    return smallest_k_indexes']",10000,0.04336290014907718,0.04563027399824932,0.05803389986976981,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 < 0 or arg2 > len(arg1):\n        return ""Invalid \'k\' value""\n    smallest_k_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_k_indexes = [i[0] for i in smallest_k_pairs]\n    return smallest_k_indexes']",100000,0.42420989996753633,0.43475955098401753,0.5189155999105424,N/A
p3_find_n_smallest_number,prompt_5,66,"[""def funcImp(arg1: list, arg2: int) -> list:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid Input'\n    min_index_list = []\n    for i in range(len(arg1)):\n        if len(min_index_list) < arg2:\n            min_index_list.append(i)\n        else:\n            max_val_index = max(min_index_list, key=lambda index: arg1[index])\n            if arg1[i] < arg1[max_val_index]:\n                min_index_list.remove(max_val_index)\n                min_index_list.append(i)\n    return min_index_list""]",1000,0.03321159980259836,0.03493023299379274,0.04420190001837909,N/A
p3_find_n_smallest_number,prompt_5,66,"[""def funcImp(arg1: list, arg2: int) -> list:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid Input'\n    min_index_list = []\n    for i in range(len(arg1)):\n        if len(min_index_list) < arg2:\n            min_index_list.append(i)\n        else:\n            max_val_index = max(min_index_list, key=lambda index: arg1[index])\n            if arg1[i] < arg1[max_val_index]:\n                min_index_list.remove(max_val_index)\n                min_index_list.append(i)\n    return min_index_list""]",10000,0.3365371997933835,0.34792815099004654,0.4120330000296235,N/A
p3_find_n_smallest_number,prompt_5,66,"[""def funcImp(arg1: list, arg2: int) -> list:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid Input'\n    min_index_list = []\n    for i in range(len(arg1)):\n        if len(min_index_list) < arg2:\n            min_index_list.append(i)\n        else:\n            max_val_index = max(min_index_list, key=lambda index: arg1[index])\n            if arg1[i] < arg1[max_val_index]:\n                min_index_list.remove(max_val_index)\n                min_index_list.append(i)\n    return min_index_list""]",100000,3.4069014000706375,3.5078994199982843,3.7013929998502135,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' must be less or equal to the number of elements in the array.""\n    h = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(h)\n    smallest_k_nums_indexes = [heapq.heappop(h)[1] for _ in range(arg2)]\n    return smallest_k_nums_indexes']",1000,0.0052448001224547625,0.005537165014538914,0.006977499928325415,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' must be less or equal to the number of elements in the array.""\n    h = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(h)\n    smallest_k_nums_indexes = [heapq.heappop(h)[1] for _ in range(arg2)]\n    return smallest_k_nums_indexes']",10000,0.06670679990202188,0.06919006900163367,0.0745554999448359,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' must be less or equal to the number of elements in the array.""\n    h = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(h)\n    smallest_k_nums_indexes = [heapq.heappop(h)[1] for _ in range(arg2)]\n    return smallest_k_nums_indexes']",100000,0.8074344999622554,0.8275122159998864,0.9412823000457138,N/A
p3_find_n_smallest_number,prompt_5,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(number, index) for index, number in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = [index for _, index in heapq.nsmallest(arg2, heap)]\n    return indices']",1000,0.007253000047057867,0.007738362008240074,0.01033590012229979,N/A
p3_find_n_smallest_number,prompt_5,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(number, index) for index, number in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = [index for _, index in heapq.nsmallest(arg2, heap)]\n    return indices']",10000,0.08633089996874332,0.0888458349974826,0.09503309987485409,N/A
p3_find_n_smallest_number,prompt_5,68,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(number, index) for index, number in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = [index for _, index in heapq.nsmallest(arg2, heap)]\n    return indices']",100000,1.0568823001813143,1.0863176899962128,1.1478971999604255,N/A
p3_find_n_smallest_number,prompt_5,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heap.append((num, i))\n    smallest_nums_with_indices = heapq.nsmallest(arg2, heap)\n    indices = [item[1] for item in smallest_nums_with_indices]\n    return indices']",1000,0.005620499840006232,0.0060110679850913585,0.006915800040587783,N/A
p3_find_n_smallest_number,prompt_5,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heap.append((num, i))\n    smallest_nums_with_indices = heapq.nsmallest(arg2, heap)\n    indices = [item[1] for item in smallest_nums_with_indices]\n    return indices']",10000,0.05770649993792176,0.06069756900426,0.07588659995235503,N/A
p3_find_n_smallest_number,prompt_5,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for i, num in enumerate(arg1):\n        heap.append((num, i))\n    smallest_nums_with_indices = heapq.nsmallest(arg2, heap)\n    indices = [item[1] for item in smallest_nums_with_indices]\n    return indices']",100000,0.7378901999909431,0.759354403000325,0.8053105000872165,N/A
p3_find_n_smallest_number,prompt_5,70,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = []\n    for index, num in enumerate(arg1):\n        heapq.heappush(max_heap, (-num, index))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    indexes = [item[1] for item in max_heap]\n    return indexes']",1000,0.012688900111243129,0.01355408601462841,0.02380820014514029,N/A
p3_find_n_smallest_number,prompt_5,70,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = []\n    for index, num in enumerate(arg1):\n        heapq.heappush(max_heap, (-num, index))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    indexes = [item[1] for item in max_heap]\n    return indexes']",10000,0.12560740020126104,0.12999360400717705,0.15307620004750788,N/A
p3_find_n_smallest_number,prompt_5,70,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = []\n    for index, num in enumerate(arg1):\n        heapq.heappush(max_heap, (-num, index))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    indexes = [item[1] for item in max_heap]\n    return indexes']",100000,1.2804946000687778,1.3045054770004936,1.398894299985841,N/A
p3_find_n_smallest_number,prompt_5,71,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = sorted([-val for val in heap], key=lambda x: x[1])\n    return [i for _, i in result]']",1000,0,0,0,	 exception: bad operand type for unary -: 'tuple'
p3_find_n_smallest_number,prompt_5,71,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = sorted([-val for val in heap], key=lambda x: x[1])\n    return [i for _, i in result]']",10000,0,0,0,	 exception: bad operand type for unary -: 'tuple'
p3_find_n_smallest_number,prompt_5,71,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = sorted([-val for val in heap], key=lambda x: x[1])\n    return [i for _, i in result]']",100000,0,0,0,	 exception: bad operand type for unary -: 'tuple'
p3_find_n_smallest_number,prompt_5,72,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    smallest_numbers = sorted_list[:arg2]\n    smallest_values = [value for value, _ in smallest_numbers]\n    index_list = []\n    for index, value in enumerate(arg1):\n        if value in smallest_values:\n            index_list.append(index)\n    return index_list']",1000,0.015229200012981892,0.017480370989069342,0.07919170008972287,N/A
p3_find_n_smallest_number,prompt_5,72,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    smallest_numbers = sorted_list[:arg2]\n    smallest_values = [value for value, _ in smallest_numbers]\n    index_list = []\n    for index, value in enumerate(arg1):\n        if value in smallest_values:\n            index_list.append(index)\n    return index_list']",10000,0.21844620001502335,0.22379657299024985,0.24121869984082878,N/A
p3_find_n_smallest_number,prompt_5,72,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    smallest_numbers = sorted_list[:arg2]\n    smallest_values = [value for value, _ in smallest_numbers]\n    index_list = []\n    for index, value in enumerate(arg1):\n        if value in smallest_values:\n            index_list.append(index)\n    return index_list']",100000,3.3002504999749362,3.396957657004241,3.5513691001106054,N/A
p3_find_n_smallest_number,prompt_5,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not 1 <= arg2 <= len(arg1):\n        return []\n    max_heap = [(-val, ind) for ind, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for ind in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[ind]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[ind], ind))\n    indices = [ind for val, ind in max_heap]\n    return indices']",1000,0.002924199914559722,0.0030744599946774544,0.0037714000791311264,N/A
p3_find_n_smallest_number,prompt_5,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not 1 <= arg2 <= len(arg1):\n        return []\n    max_heap = [(-val, ind) for ind, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for ind in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[ind]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[ind], ind))\n    indices = [ind for val, ind in max_heap]\n    return indices']",10000,0.025916200131177902,0.027644718994852154,0.04344729986041784,N/A
p3_find_n_smallest_number,prompt_5,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not 1 <= arg2 <= len(arg1):\n        return []\n    max_heap = [(-val, ind) for ind, val in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for ind in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[ind]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[ind], ind))\n    indices = [ind for val, ind in max_heap]\n    return indices']",100000,0.26233380008488894,0.27116519400617106,0.3277060000691563,N/A
p3_find_n_smallest_number,prompt_5,74,"['from typing import List\nimport random\n\ndef partition(nums: List[int], low: int, high: int):\n    pivot = nums[low]\n    i = low + 1\n    j = high\n    while True:\n        while i <= j and nums[i] < pivot:\n            i = i + 1\n        while i <= j and nums[j] >= pivot:\n            j = j - 1\n        if i <= j:\n            nums[i], nums[j] = (nums[j], nums[i])\n        else:\n            nums[low], nums[j] = (nums[j], nums[low])\n            return j\n\ndef quick_select(nums: List[int], k: int, low: int, high: int):\n    if low == high:\n        return nums[low]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(nums, low, high)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quick_select(nums, k, low, pivot_index - 1)\n    else:\n        return quick_select(nums, k, pivot_index + 1, high)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_map = {v: i for i, v in enumerate(arg1)}\n    smallest_values = []\n    for i in range(arg2):\n        smallest_val = quick_select(arg1, i, 0, len(arg1) - 1)\n        smallest_values.append(index_map[smallest_val])\n    return smallest_values']",1000,0.034086900064721704,0.036729694004170595,0.056921100011095405,N/A
p3_find_n_smallest_number,prompt_5,74,"['from typing import List\nimport random\n\ndef partition(nums: List[int], low: int, high: int):\n    pivot = nums[low]\n    i = low + 1\n    j = high\n    while True:\n        while i <= j and nums[i] < pivot:\n            i = i + 1\n        while i <= j and nums[j] >= pivot:\n            j = j - 1\n        if i <= j:\n            nums[i], nums[j] = (nums[j], nums[i])\n        else:\n            nums[low], nums[j] = (nums[j], nums[low])\n            return j\n\ndef quick_select(nums: List[int], k: int, low: int, high: int):\n    if low == high:\n        return nums[low]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(nums, low, high)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quick_select(nums, k, low, pivot_index - 1)\n    else:\n        return quick_select(nums, k, pivot_index + 1, high)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_map = {v: i for i, v in enumerate(arg1)}\n    smallest_values = []\n    for i in range(arg2):\n        smallest_val = quick_select(arg1, i, 0, len(arg1) - 1)\n        smallest_values.append(index_map[smallest_val])\n    return smallest_values']",10000,0.34761560009792447,0.3652394670061767,0.4538927001412958,N/A
p3_find_n_smallest_number,prompt_5,74,"['from typing import List\nimport random\n\ndef partition(nums: List[int], low: int, high: int):\n    pivot = nums[low]\n    i = low + 1\n    j = high\n    while True:\n        while i <= j and nums[i] < pivot:\n            i = i + 1\n        while i <= j and nums[j] >= pivot:\n            j = j - 1\n        if i <= j:\n            nums[i], nums[j] = (nums[j], nums[i])\n        else:\n            nums[low], nums[j] = (nums[j], nums[low])\n            return j\n\ndef quick_select(nums: List[int], k: int, low: int, high: int):\n    if low == high:\n        return nums[low]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(nums, low, high)\n    if k == pivot_index:\n        return nums[k]\n    elif k < pivot_index:\n        return quick_select(nums, k, low, pivot_index - 1)\n    else:\n        return quick_select(nums, k, pivot_index + 1, high)\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_map = {v: i for i, v in enumerate(arg1)}\n    smallest_values = []\n    for i in range(arg2):\n        smallest_val = quick_select(arg1, i, 0, len(arg1) - 1)\n        smallest_values.append(index_map[smallest_val])\n    return smallest_values']",100000,3.948761299951002,4.020464765001089,4.149538400117308,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (-value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = sorted([-value for value, index in heap])\n    return result']",1000,0.012549399863928556,0.01303109199507162,0.01402350002899766,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (-value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = sorted([-value for value, index in heap])\n    return result']",10000,0.12627959996461868,0.12927471701055765,0.13450570008717477,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (-value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = sorted([-value for value, index in heap])\n    return result']",100000,1.286866300040856,1.3033612440014257,1.3717016000300646,N/A
p3_find_n_smallest_number,prompt_5,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    numbered_arg1 = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(numbered_arg1)\n    indexes = [heapq.heappop(numbered_arg1)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",1000,0.005296600051224232,0.005541057020891458,0.007876000134274364,N/A
p3_find_n_smallest_number,prompt_5,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    numbered_arg1 = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(numbered_arg1)\n    indexes = [heapq.heappop(numbered_arg1)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",10000,0.06509229983203113,0.06695856699952855,0.07103779981844127,N/A
p3_find_n_smallest_number,prompt_5,76,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    numbered_arg1 = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(numbered_arg1)\n    indexes = [heapq.heappop(numbered_arg1)[1] for _ in range(arg2)]\n    indexes.sort()\n    return indexes']",100000,0.8022473000455648,0.8212650380190462,0.9351302001159638,N/A
p3_find_n_smallest_number,prompt_5,77,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = [i[1] for i in max_heap]\n    return indices']",1000,0.0028174000326544046,0.0029923700145445763,0.0034627998247742653,N/A
p3_find_n_smallest_number,prompt_5,77,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = [i[1] for i in max_heap]\n    return indices']",10000,0.02662010001949966,0.028430217998102306,0.03581469994969666,N/A
p3_find_n_smallest_number,prompt_5,77,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    indices = [i[1] for i in max_heap]\n    return indices']",100000,0.2687085000798106,0.2788315299875103,0.34736720006912947,N/A
p3_find_n_smallest_number,prompt_5,78,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif arg2 > len(arg1):\n        return ""Input error: \'arg2\' cannot be greater than the length of the list.""\n    pairs = [(num, i) for i, num in enumerate(arg1)]\n    pairs.sort()\n    smallest_pairs = pairs[:arg2]\n    indexes = [i for num, i in smallest_pairs]\n    return indexes']",1000,0.011973800137639046,0.01352720899041742,0.05033230013214052,N/A
p3_find_n_smallest_number,prompt_5,78,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif arg2 > len(arg1):\n        return ""Input error: \'arg2\' cannot be greater than the length of the list.""\n    pairs = [(num, i) for i, num in enumerate(arg1)]\n    pairs.sort()\n    smallest_pairs = pairs[:arg2]\n    indexes = [i for num, i in smallest_pairs]\n    return indexes']",10000,0.17677140003070235,0.18242519000312313,0.19298819988034666,N/A
p3_find_n_smallest_number,prompt_5,78,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif arg2 > len(arg1):\n        return ""Input error: \'arg2\' cannot be greater than the length of the list.""\n    pairs = [(num, i) for i, num in enumerate(arg1)]\n    pairs.sort()\n    smallest_pairs = pairs[:arg2]\n    indexes = [i for num, i in smallest_pairs]\n    return indexes']",100000,2.9042726999614388,2.9662688130070456,3.0960315000265837,N/A
p3_find_n_smallest_number,prompt_5,79,"['def funcImp(arg1, arg2):\n    temp = arg1[:]\n    temp.sort()\n    k_smallest_numbers = temp[:arg2]\n    result = []\n    for number in k_smallest_numbers:\n        result.append(arg1.index(number))\n    return result']",1000,0.0041698000859469175,0.004804427004419267,0.008318200008943677,N/A
p3_find_n_smallest_number,prompt_5,79,"['def funcImp(arg1, arg2):\n    temp = arg1[:]\n    temp.sort()\n    k_smallest_numbers = temp[:arg2]\n    result = []\n    for number in k_smallest_numbers:\n        result.append(arg1.index(number))\n    return result']",10000,0.08790899999439716,0.09141335000982508,0.09941069991327822,N/A
p3_find_n_smallest_number,prompt_5,79,"['def funcImp(arg1, arg2):\n    temp = arg1[:]\n    temp.sort()\n    k_smallest_numbers = temp[:arg2]\n    result = []\n    for number in k_smallest_numbers:\n        result.append(arg1.index(number))\n    return result']",100000,1.1143159000203013,1.1379646600130946,1.3008302999660373,N/A
p3_find_n_smallest_number,prompt_5,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_k]']",1000,0.005184700014069676,0.005847440992947667,0.014824099838733673,N/A
p3_find_n_smallest_number,prompt_5,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_k]']",10000,0.052859499817714095,0.05587968300562352,0.08839570009149611,N/A
p3_find_n_smallest_number,prompt_5,80,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    index_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, index_list)\n    return [index for value, index in smallest_k]']",100000,0.6911104000173509,0.7112268320121803,0.7733738999813795,N/A
p3_find_n_smallest_number,prompt_5,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap], key=lambda x: arg1[x])']",1000,0.0033418999519199133,0.0036846939916722475,0.006373399868607521,N/A
p3_find_n_smallest_number,prompt_5,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap], key=lambda x: arg1[x])']",10000,0.031068800017237663,0.0329685990116559,0.037272300105541945,N/A
p3_find_n_smallest_number,prompt_5,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap], key=lambda x: arg1[x])']",100000,0.3159696999937296,0.3258441269956529,0.3980718001257628,N/A
p3_find_n_smallest_number,prompt_5,82,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    elif arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        enumerated_list = list(enumerate(arg1))\n        enumerated_list.sort(key=lambda x: x[1])\n        return [i for i, _ in enumerated_list[:arg2]]']",1000,0.008391000097617507,0.009073613998480142,0.011714000022038817,N/A
p3_find_n_smallest_number,prompt_5,82,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    elif arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        enumerated_list = list(enumerate(arg1))\n        enumerated_list.sort(key=lambda x: x[1])\n        return [i for i, _ in enumerated_list[:arg2]]']",10000,0.14282379997894168,0.14679451801581309,0.16451539983972907,N/A
p3_find_n_smallest_number,prompt_5,82,"['def funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    elif arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    else:\n        enumerated_list = list(enumerate(arg1))\n        enumerated_list.sort(key=lambda x: x[1])\n        return [i for i, _ in enumerated_list[:arg2]]']",100000,2.1242754999548197,2.1702771490020676,2.2601283001713455,N/A
p3_find_n_smallest_number,prompt_5,83,"['def funcImp(arg1, arg2):\n    enumeratedList = list(enumerate(arg1))\n    sortedList = sorted(enumeratedList, key=lambda x: x[1])\n    smallestK = sortedList[:arg2]\n    indexes = [index for index, value in smallestK]\n    return indexes']",1000,0.008627500152215362,0.009601640026085078,0.01302479999139905,N/A
p3_find_n_smallest_number,prompt_5,83,"['def funcImp(arg1, arg2):\n    enumeratedList = list(enumerate(arg1))\n    sortedList = sorted(enumeratedList, key=lambda x: x[1])\n    smallestK = sortedList[:arg2]\n    indexes = [index for index, value in smallestK]\n    return indexes']",10000,0.1414421999361366,0.14672258699312807,0.18231609999202192,N/A
p3_find_n_smallest_number,prompt_5,83,"['def funcImp(arg1, arg2):\n    enumeratedList = list(enumerate(arg1))\n    sortedList = sorted(enumeratedList, key=lambda x: x[1])\n    smallestK = sortedList[:arg2]\n    indexes = [index for index, value in smallestK]\n    return indexes']",100000,2.2070836999919266,2.251124783984851,2.3473915001377463,N/A
p3_find_n_smallest_number,prompt_5,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    priority_queue = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(priority_queue)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > priority_queue[0][0]:\n            heapq.heappushpop(priority_queue, (-arg1[idx], idx))\n    result = sorted([idx for num, idx in priority_queue])\n    return result']",1000,0.0031479999888688326,0.0033431420009583236,0.005349799990653992,N/A
p3_find_n_smallest_number,prompt_5,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    priority_queue = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(priority_queue)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > priority_queue[0][0]:\n            heapq.heappushpop(priority_queue, (-arg1[idx], idx))\n    result = sorted([idx for num, idx in priority_queue])\n    return result']",10000,0.028772899881005287,0.030832784990780057,0.04110700008459389,N/A
p3_find_n_smallest_number,prompt_5,84,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    priority_queue = [(-num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(priority_queue)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > priority_queue[0][0]:\n            heapq.heappushpop(priority_queue, (-arg1[idx], idx))\n    result = sorted([idx for num, idx in priority_queue])\n    return result']",100000,0.29517619987018406,0.30453639700310303,0.3714870000258088,N/A
p3_find_n_smallest_number,prompt_5,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    index_value_pairs = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(index_value_pairs)\n    max_heap = index_value_pairs[:arg2]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0][0]:\n            heapq.heapreplace(max_heap, (arg1[i], i))\n    indices = [index for value, index in max_heap]\n    return indices']",1000,0.007107000099495053,0.007868557004258037,0.012367400107905269,N/A
p3_find_n_smallest_number,prompt_5,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    index_value_pairs = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(index_value_pairs)\n    max_heap = index_value_pairs[:arg2]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0][0]:\n            heapq.heapreplace(max_heap, (arg1[i], i))\n    indices = [index for value, index in max_heap]\n    return indices']",10000,0.08958599995821714,0.0924948289943859,0.09680459997616708,N/A
p3_find_n_smallest_number,prompt_5,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    index_value_pairs = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(index_value_pairs)\n    max_heap = index_value_pairs[:arg2]\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < max_heap[0][0]:\n            heapq.heapreplace(max_heap, (arg1[i], i))\n    indices = [index for value, index in max_heap]\n    return indices']",100000,1.00793999992311,1.0305179419973864,1.114621799904853,N/A
p3_find_n_smallest_number,prompt_5,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return sorted([i for _, i in heap], key=lambda i: arg1[i])']",1000,0.0036008001770824194,0.003967575000133366,0.009118400048464537,N/A
p3_find_n_smallest_number,prompt_5,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return sorted([i for _, i in heap], key=lambda i: arg1[i])']",10000,0.03241970017552376,0.034856514998245984,0.059602699941024184,N/A
p3_find_n_smallest_number,prompt_5,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return sorted([i for _, i in heap], key=lambda i: arg1[i])']",100000,0.33166390005499125,0.34168411399470644,0.4016156999859959,N/A
p3_find_n_smallest_number,prompt_5,87,"['from typing import List\nimport random\n\ndef quickselect(nums: List[int], k: int, start: int, end: int) -> List[int]:\n    if start == end:\n        return [nums[start]]\n    pivot_index = random.randint(start, end)\n    pivot_index = partition(nums, start, end, pivot_index)\n    if k == pivot_index:\n        return nums[:k + 1]\n    elif k < pivot_index:\n        return quickselect(nums, k, start, pivot_index - 1)\n    else:\n        return quickselect(nums, k, pivot_index + 1, end)\n\ndef partition(nums: List[int], start: int, end: int, pivot_index: int) -> int:\n    nums[pivot_index], nums[end] = (nums[end], nums[pivot_index])\n    store_index = start\n    for i in range(start, end):\n        if nums[i] < nums[end]:\n            nums[store_index], nums[i] = (nums[i], nums[store_index])\n            store_index += 1\n    nums[store_index], nums[end] = (nums[end], nums[store_index])\n    return store_index\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    arg1_copy = arg1.copy()\n    smallest_k_nums = quickselect(arg1, arg2, 0, len(arg1) - 1)\n    indices = [arg1_copy.index(i) for i in smallest_k_nums]\n    return indices']",1000,0.006841700058430433,0.0077744969842024145,0.011517700040712953,N/A
p3_find_n_smallest_number,prompt_5,87,"['from typing import List\nimport random\n\ndef quickselect(nums: List[int], k: int, start: int, end: int) -> List[int]:\n    if start == end:\n        return [nums[start]]\n    pivot_index = random.randint(start, end)\n    pivot_index = partition(nums, start, end, pivot_index)\n    if k == pivot_index:\n        return nums[:k + 1]\n    elif k < pivot_index:\n        return quickselect(nums, k, start, pivot_index - 1)\n    else:\n        return quickselect(nums, k, pivot_index + 1, end)\n\ndef partition(nums: List[int], start: int, end: int, pivot_index: int) -> int:\n    nums[pivot_index], nums[end] = (nums[end], nums[pivot_index])\n    store_index = start\n    for i in range(start, end):\n        if nums[i] < nums[end]:\n            nums[store_index], nums[i] = (nums[i], nums[store_index])\n            store_index += 1\n    nums[store_index], nums[end] = (nums[end], nums[store_index])\n    return store_index\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    arg1_copy = arg1.copy()\n    smallest_k_nums = quickselect(arg1, arg2, 0, len(arg1) - 1)\n    indices = [arg1_copy.index(i) for i in smallest_k_nums]\n    return indices']",10000,0.06682269996963441,0.0748007119889371,0.08452420006506145,N/A
p3_find_n_smallest_number,prompt_5,87,"['from typing import List\nimport random\n\ndef quickselect(nums: List[int], k: int, start: int, end: int) -> List[int]:\n    if start == end:\n        return [nums[start]]\n    pivot_index = random.randint(start, end)\n    pivot_index = partition(nums, start, end, pivot_index)\n    if k == pivot_index:\n        return nums[:k + 1]\n    elif k < pivot_index:\n        return quickselect(nums, k, start, pivot_index - 1)\n    else:\n        return quickselect(nums, k, pivot_index + 1, end)\n\ndef partition(nums: List[int], start: int, end: int, pivot_index: int) -> int:\n    nums[pivot_index], nums[end] = (nums[end], nums[pivot_index])\n    store_index = start\n    for i in range(start, end):\n        if nums[i] < nums[end]:\n            nums[store_index], nums[i] = (nums[i], nums[store_index])\n            store_index += 1\n    nums[store_index], nums[end] = (nums[end], nums[store_index])\n    return store_index\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    arg1_copy = arg1.copy()\n    smallest_k_nums = quickselect(arg1, arg2, 0, len(arg1) - 1)\n    indices = [arg1_copy.index(i) for i in smallest_k_nums]\n    return indices']",100000,0.7913565000053495,0.9110934200044721,1.0507749000098556,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError(""arg2 can\'t be greater than the number of elements in arg1"")\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -value > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    indexes = []\n    while heap:\n        indexes.append(heap[0][1])\n        heapq.heappop(heap)\n    indexes.reverse()\n    return indexes']",1000,0.004516599932685494,0.004912471999414265,0.006609200034290552,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError(""arg2 can\'t be greater than the number of elements in arg1"")\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -value > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    indexes = []\n    while heap:\n        indexes.append(heap[0][1])\n        heapq.heappop(heap)\n    indexes.reverse()\n    return indexes']",10000,0.04412659979425371,0.0459550670068711,0.05313080013729632,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError(""arg2 can\'t be greater than the number of elements in arg1"")\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -value > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    indexes = []\n    while heap:\n        indexes.append(heap[0][1])\n        heapq.heappop(heap)\n    indexes.reverse()\n    return indexes']",100000,0.4398248998913914,0.45121874400181694,0.49611770012415946,N/A
p3_find_n_smallest_number,prompt_5,89,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    index_value_pairs = [(i, num) for i, num in enumerate(arg1)]\n    sorted_pairs = sorted(index_value_pairs, key=lambda x: x[1])\n    indices = [index for index, _ in sorted_pairs[:arg2]]\n    return indices']",1000,0.009815499885007739,0.01056898599723354,0.022016100119799376,N/A
p3_find_n_smallest_number,prompt_5,89,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    index_value_pairs = [(i, num) for i, num in enumerate(arg1)]\n    sorted_pairs = sorted(index_value_pairs, key=lambda x: x[1])\n    indices = [index for index, _ in sorted_pairs[:arg2]]\n    return indices']",10000,0.15613749995827675,0.16052675999701024,0.18302299990318716,N/A
p3_find_n_smallest_number,prompt_5,89,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    index_value_pairs = [(i, num) for i, num in enumerate(arg1)]\n    sorted_pairs = sorted(index_value_pairs, key=lambda x: x[1])\n    indices = [index for index, _ in sorted_pairs[:arg2]]\n    return indices']",100000,2.3048743999097496,2.3603488850197754,2.4652704999316484,N/A
p3_find_n_smallest_number,prompt_5,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1_heap = [-num for num in arg1]\n    heapq.heapify(arg1_heap)\n    smallest_nums = [-heapq.heappop(arg1_heap) for _ in range(arg2)]\n    indices = [arg1.index(num) for num in smallest_nums]\n    return indices']",1000,0.003010299988090992,0.0032819570205174387,0.004362500039860606,N/A
p3_find_n_smallest_number,prompt_5,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1_heap = [-num for num in arg1]\n    heapq.heapify(arg1_heap)\n    smallest_nums = [-heapq.heappop(arg1_heap) for _ in range(arg2)]\n    indices = [arg1.index(num) for num in smallest_nums]\n    return indices']",10000,0.04411310004070401,0.04617929699830711,0.06653739977627993,N/A
p3_find_n_smallest_number,prompt_5,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1_heap = [-num for num in arg1]\n    heapq.heapify(arg1_heap)\n    smallest_nums = [-heapq.heappop(arg1_heap) for _ in range(arg2)]\n    indices = [arg1.index(num) for num in smallest_nums]\n    return indices']",100000,0.5139239998534322,0.5295788049907424,0.6005159998312593,N/A
p3_find_n_smallest_number,prompt_5,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indices = sorted([i for val, i in heap])\n    return indices']",1000,0.00277639995329082,0.003008296999614686,0.007310199784114957,N/A
p3_find_n_smallest_number,prompt_5,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indices = sorted([i for val, i in heap])\n    return indices']",10000,0.026171799981966615,0.027386328992433845,0.03216509986668825,N/A
p3_find_n_smallest_number,prompt_5,91,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    indices = sorted([i for val, i in heap])\n    return indices']",100000,0.26454530004411936,0.2731332020019181,0.3465275999624282,N/A
p3_find_n_smallest_number,prompt_5,92,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than number of elements in list!'\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_items = heapq.nlargest(arg2, indexed_nums)\n    return [i for num, i in smallest_k_items]""]",1000,0.005209999857470393,0.005631469988729805,0.00921219983138144,N/A
p3_find_n_smallest_number,prompt_5,92,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than number of elements in list!'\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_items = heapq.nlargest(arg2, indexed_nums)\n    return [i for num, i in smallest_k_items]""]",10000,0.053353300085291266,0.05665747900260612,0.08758990000933409,N/A
p3_find_n_smallest_number,prompt_5,92,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is greater than number of elements in list!'\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    smallest_k_items = heapq.nlargest(arg2, indexed_nums)\n    return [i for num, i in smallest_k_items]""]",100000,0.6896121001336724,0.7218134959996678,0.8518707000184804,N/A
p3_find_n_smallest_number,prompt_5,93,"[""from typing import List\nimport bisect\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be larger than the size of arg1')\n    smallest_values = []\n    for i, num in enumerate(arg1):\n        if len(smallest_values) < arg2 or num < smallest_values[-1][0]:\n            bisect.insort(smallest_values, (num, i))\n            if len(smallest_values) > arg2:\n                smallest_values.pop()\n    return [index for num, index in sorted(smallest_values)]""]",1000,0.004342000000178814,0.004541071003768593,0.007853100076317787,N/A
p3_find_n_smallest_number,prompt_5,93,"[""from typing import List\nimport bisect\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be larger than the size of arg1')\n    smallest_values = []\n    for i, num in enumerate(arg1):\n        if len(smallest_values) < arg2 or num < smallest_values[-1][0]:\n            bisect.insort(smallest_values, (num, i))\n            if len(smallest_values) > arg2:\n                smallest_values.pop()\n    return [index for num, index in sorted(smallest_values)]""]",10000,0.039563999976962805,0.04159185100113973,0.04623520001769066,N/A
p3_find_n_smallest_number,prompt_5,93,"[""from typing import List\nimport bisect\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be larger than the size of arg1')\n    smallest_values = []\n    for i, num in enumerate(arg1):\n        if len(smallest_values) < arg2 or num < smallest_values[-1][0]:\n            bisect.insort(smallest_values, (num, i))\n            if len(smallest_values) > arg2:\n                smallest_values.pop()\n    return [index for num, index in sorted(smallest_values)]""]",100000,0.406979100080207,0.41816510101780296,0.48168840003199875,N/A
p3_find_n_smallest_number,prompt_5,94,"['def funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    pairs = [[arg1[i], i] for i in range(len(arg1))]\n    sorted_pairs = sorted(pairs)\n    k_indexes = [sorted_pairs[i][1] for i in range(arg2)]\n    result = sorted(k_indexes)\n    return result']",1000,0.018526900094002485,0.01930213999003172,0.025505400029942393,N/A
p3_find_n_smallest_number,prompt_5,94,"['def funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    pairs = [[arg1[i], i] for i in range(len(arg1))]\n    sorted_pairs = sorted(pairs)\n    k_indexes = [sorted_pairs[i][1] for i in range(arg2)]\n    result = sorted(k_indexes)\n    return result']",10000,0.2697354000993073,0.27679617001209406,0.30373140005394816,N/A
p3_find_n_smallest_number,prompt_5,94,"['def funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 > len(arg1):\n        return []\n    pairs = [[arg1[i], i] for i in range(len(arg1))]\n    sorted_pairs = sorted(pairs)\n    k_indexes = [sorted_pairs[i][1] for i in range(arg2)]\n    result = sorted(k_indexes)\n    return result']",100000,4.651495700003579,4.7483930620015595,5.032481899950653,N/A
p3_find_n_smallest_number,prompt_5,95,"['def funcImp(arg1, arg2):\n    index_pairs = [(index, element) for index, element in enumerate(arg1)]\n    index_pairs.sort(key=lambda x: x[1])\n    return [index_pairs[i][0] for i in range(arg2)]']",1000,0.009417399996891618,0.010074992987792939,0.012084800051525235,N/A
p3_find_n_smallest_number,prompt_5,95,"['def funcImp(arg1, arg2):\n    index_pairs = [(index, element) for index, element in enumerate(arg1)]\n    index_pairs.sort(key=lambda x: x[1])\n    return [index_pairs[i][0] for i in range(arg2)]']",10000,0.15607000002637506,0.15906419000355526,0.17211669986136258,N/A
p3_find_n_smallest_number,prompt_5,95,"['def funcImp(arg1, arg2):\n    index_pairs = [(index, element) for index, element in enumerate(arg1)]\n    index_pairs.sort(key=lambda x: x[1])\n    return [index_pairs[i][0] for i in range(arg2)]']",100000,2.255516500212252,2.3021742290002294,2.4948700999375433,N/A
p3_find_n_smallest_number,prompt_5,96,"['def funcImp(arg1, arg2):\n    index_and_value = [(value, index) for index, value in enumerate(arg1)]\n    index_and_value.sort()\n    indexes = [index for value, index in index_and_value[:arg2]]\n    return indexes']",1000,0.011950799962505698,0.012974475978408008,0.0308960999827832,N/A
p3_find_n_smallest_number,prompt_5,96,"['def funcImp(arg1, arg2):\n    index_and_value = [(value, index) for index, value in enumerate(arg1)]\n    index_and_value.sort()\n    indexes = [index for value, index in index_and_value[:arg2]]\n    return indexes']",10000,0.183614999987185,0.18976344401249662,0.23550440021790564,N/A
p3_find_n_smallest_number,prompt_5,96,"['def funcImp(arg1, arg2):\n    index_and_value = [(value, index) for index, value in enumerate(arg1)]\n    index_and_value.sort()\n    indexes = [index for value, index in index_and_value[:arg2]]\n    return indexes']",100000,2.9085227998439223,2.945884280989412,3.3506822001654655,N/A
p3_find_n_smallest_number,prompt_5,97,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 > len(arg1):\n        raise ValueError('arg2 must be an integer less than or equal to the length of arg1.')\n    indexed_list = [(num, index) for index, num in enumerate(arg1)]\n    indexed_list.sort()\n    indices_of_smallest_nums = [num_index[1] for num_index in indexed_list[:arg2]]\n    return indices_of_smallest_nums""]",1000,0.014457899844273925,0.015441303995903582,0.02489209990017116,N/A
p3_find_n_smallest_number,prompt_5,97,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 > len(arg1):\n        raise ValueError('arg2 must be an integer less than or equal to the length of arg1.')\n    indexed_list = [(num, index) for index, num in enumerate(arg1)]\n    indexed_list.sort()\n    indices_of_smallest_nums = [num_index[1] for num_index in indexed_list[:arg2]]\n    return indices_of_smallest_nums""]",10000,0.2097361001651734,0.21299371500499548,0.22369919996708632,N/A
p3_find_n_smallest_number,prompt_5,97,"[""def funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(i, int) for i in arg1)):\n        raise ValueError('arg1 must be a list of integers.')\n    if not isinstance(arg2, int) or arg2 > len(arg1):\n        raise ValueError('arg2 must be an integer less than or equal to the length of arg1.')\n    indexed_list = [(num, index) for index, num in enumerate(arg1)]\n    indexed_list.sort()\n    indices_of_smallest_nums = [num_index[1] for num_index in indexed_list[:arg2]]\n    return indices_of_smallest_nums""]",100000,3.1782042998820543,3.2353416600008496,3.359207100002095,N/A
p3_find_n_smallest_number,prompt_5,98,"['def funcImp(arg1, arg2):\n    enumerated_list = [(i, val) for i, val in enumerate(arg1)]\n    enumerated_list.sort(key=lambda x: x[1])\n    return [i for i, val in enumerated_list[:arg2]]']",1000,0.009289899840950966,0.010346720998641104,0.014967499999329448,N/A
p3_find_n_smallest_number,prompt_5,98,"['def funcImp(arg1, arg2):\n    enumerated_list = [(i, val) for i, val in enumerate(arg1)]\n    enumerated_list.sort(key=lambda x: x[1])\n    return [i for i, val in enumerated_list[:arg2]]']",10000,0.15431739995256066,0.15832323498791084,0.19772930000908673,N/A
p3_find_n_smallest_number,prompt_5,98,"['def funcImp(arg1, arg2):\n    enumerated_list = [(i, val) for i, val in enumerate(arg1)]\n    enumerated_list.sort(key=lambda x: x[1])\n    return [i for i, val in enumerated_list[:arg2]]']",100000,2.246611899929121,2.2812829889985733,2.3835768999997526,N/A
p3_find_n_smallest_number,prompt_5,99,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_elements_indices']",1000,0.005316900089383125,0.005555425006896257,0.00721110007725656,N/A
p3_find_n_smallest_number,prompt_5,99,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_elements_indices']",10000,0.06879259995184839,0.07061558500630781,0.09502519993111491,N/A
p3_find_n_smallest_number,prompt_5,99,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_elements_indices']",100000,0.7621875000186265,0.7827345599862747,0.8482745001092553,N/A
p3_find_n_smallest_number,prompt_5,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than list length""\n    least_numbers = heapq.nlargest(arg2, enumerate(arg1), key=lambda x: x[1])\n    least_numbers = sorted(least_numbers, key=lambda x: x[1])\n    return [i for i, v in least_numbers]']",1000,0.004556899890303612,0.004729827006813138,0.0058553998824208975,N/A
p3_find_n_smallest_number,prompt_5,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than list length""\n    least_numbers = heapq.nlargest(arg2, enumerate(arg1), key=lambda x: x[1])\n    least_numbers = sorted(least_numbers, key=lambda x: x[1])\n    return [i for i, v in least_numbers]']",10000,0.043730600038543344,0.045623446011450144,0.05784339993260801,N/A
p3_find_n_smallest_number,prompt_5,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than list length""\n    least_numbers = heapq.nlargest(arg2, enumerate(arg1), key=lambda x: x[1])\n    least_numbers = sorted(least_numbers, key=lambda x: x[1])\n    return [i for i, v in least_numbers]']",100000,0.43907550000585616,0.4481118640094064,0.48921260004863143,N/A
p3_find_n_smallest_number,prompt_6,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        pass\n        return [i for i in range(len(arg1))]\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",1000,0.0028019999153912067,0.0030184680153615773,0.004450400127097964,N/A
p3_find_n_smallest_number,prompt_6,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        pass\n        return [i for i in range(len(arg1))]\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",10000,0.026651399908587337,0.027620144977699965,0.03164529986679554,N/A
p3_find_n_smallest_number,prompt_6,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        pass\n        return [i for i in range(len(arg1))]\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [i for num, i in heap]']",100000,0.26383930002339184,0.2726880259788595,0.3458390000741929,N/A
p3_find_n_smallest_number,prompt_6,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexes_of_smallest = []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    for _ in range(arg2):\n        min_element = heapq.heappop(heap)\n        indexes_of_smallest.append(min_element[1])\n    return indexes_of_smallest']",1000,0.005149000091478229,0.005559133989736438,0.0122189000248909,N/A
p3_find_n_smallest_number,prompt_6,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexes_of_smallest = []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    for _ in range(arg2):\n        min_element = heapq.heappop(heap)\n        indexes_of_smallest.append(min_element[1])\n    return indexes_of_smallest']",10000,0.06757840001955628,0.06912279999349266,0.0733841999899596,N/A
p3_find_n_smallest_number,prompt_6,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexes_of_smallest = []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    for _ in range(arg2):\n        min_element = heapq.heappop(heap)\n        indexes_of_smallest.append(min_element[1])\n    return indexes_of_smallest']",100000,0.7792227000463754,0.8023660940094851,0.8354996000416577,N/A
p3_find_n_smallest_number,prompt_6,3,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0 or (not arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [index for value, index in indexed_list[:arg2]]']",1000,0.011963800061494112,0.01262076600920409,0.01984319998882711,N/A
p3_find_n_smallest_number,prompt_6,3,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0 or (not arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [index for value, index in indexed_list[:arg2]]']",10000,0.18135520000942051,0.18563900801353156,0.2213216999080032,N/A
p3_find_n_smallest_number,prompt_6,3,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0 or (not arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    indexed_list.sort()\n    return [index for value, index in indexed_list[:arg2]]']",100000,2.8799368999898434,2.925080256005749,3.036531100049615,N/A
p3_find_n_smallest_number,prompt_6,4,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the array""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [i for num, i in heap]\n    return result']",1000,0.00348019995726645,0.0037711169966496527,0.005598100135102868,N/A
p3_find_n_smallest_number,prompt_6,4,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the array""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [i for num, i in heap]\n    return result']",10000,0.03274110006168485,0.03433027700521052,0.04297830001451075,N/A
p3_find_n_smallest_number,prompt_6,4,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is greater than the length of the array""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    result = [i for num, i in heap]\n    return result']",100000,0.33052680012769997,0.33952076999936254,0.4421847998164594,N/A
p3_find_n_smallest_number,prompt_6,5,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """""" Given an unsorted list of integers (arg1) and a value k (arg2), return the indexes of the k smallest numbers.\n    \n    Parameters:\n        arg1 - a list of unsorted integers.\n        arg2 - an integer k specifying the number of smallest numbers to find.\n    \n    Returns:\n        A list of indexes of the k smallest numbers.\n        \n    Note: The function doesn\'t implement any algorithm as the time complexity O(1) is not achievable for this kind of problem.\n    """"""\n    pass']",1000,6.8999361246824265e-06,7.354994304478168e-06,1.0699965059757233e-05,N/A
p3_find_n_smallest_number,prompt_6,5,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """""" Given an unsorted list of integers (arg1) and a value k (arg2), return the indexes of the k smallest numbers.\n    \n    Parameters:\n        arg1 - a list of unsorted integers.\n        arg2 - an integer k specifying the number of smallest numbers to find.\n    \n    Returns:\n        A list of indexes of the k smallest numbers.\n        \n    Note: The function doesn\'t implement any algorithm as the time complexity O(1) is not achievable for this kind of problem.\n    """"""\n    pass']",10000,7.0999376475811005e-06,7.621981203556061e-06,1.5600118786096573e-05,N/A
p3_find_n_smallest_number,prompt_6,5,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """""" Given an unsorted list of integers (arg1) and a value k (arg2), return the indexes of the k smallest numbers.\n    \n    Parameters:\n        arg1 - a list of unsorted integers.\n        arg2 - an integer k specifying the number of smallest numbers to find.\n    \n    Returns:\n        A list of indexes of the k smallest numbers.\n        \n    Note: The function doesn\'t implement any algorithm as the time complexity O(1) is not achievable for this kind of problem.\n    """"""\n    pass']",100000,7.0999376475811005e-06,7.648998871445655e-06,1.8700025975704193e-05,N/A
p3_find_n_smallest_number,prompt_6,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif arg2 > len(arg1):\n        return 'Error: k is greater than the length of the list.'\n    max_heap = [-x for x in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -arg1[i])\n    return sorted([(arg1.index(-x), -x) for x in max_heap])""]",1000,0.004091800190508366,0.004297411991283298,0.0065460000187158585,N/A
p3_find_n_smallest_number,prompt_6,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif arg2 > len(arg1):\n        return 'Error: k is greater than the length of the list.'\n    max_heap = [-x for x in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -arg1[i])\n    return sorted([(arg1.index(-x), -x) for x in max_heap])""]",10000,0.03534810012206435,0.037483741007745264,0.051316700177267194,N/A
p3_find_n_smallest_number,prompt_6,6,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif arg2 > len(arg1):\n        return 'Error: k is greater than the length of the list.'\n    max_heap = [-x for x in arg1[:arg2]]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, -arg1[i])\n    return sorted([(arg1.index(-x), -x) for x in max_heap])""]",100000,0.29580409987829626,0.30244591501541435,0.326139000011608,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0031367000192403793,0.0033341870014555754,0.004206800134852529,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.029012999963015318,0.030568583011627196,0.044828700134530663,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.2935632998123765,0.3012835500156507,0.3481185999698937,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",1000,0.003722099820151925,0.0039781670086085795,0.005720399785786867,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",10000,0.035335199907422066,0.03744672600179911,0.04336780006997287,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    return [i[1] for i in heap]']",100000,0.36101100011728704,0.3706605629948899,0.40047079999931157,N/A
p3_find_n_smallest_number,prompt_6,9,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if -heap[0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    return sorted([-num for num in heap], reverse=False)']",1000,0.001927100121974945,0.0020633830060251056,0.003280599834397435,N/A
p3_find_n_smallest_number,prompt_6,9,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if -heap[0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    return sorted([-num for num in heap], reverse=False)']",10000,0.016204599989578128,0.017348966994322836,0.020466499961912632,N/A
p3_find_n_smallest_number,prompt_6,9,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if -heap[0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -num)\n    return sorted([-num for num in heap], reverse=False)']",100000,0.1800637999549508,0.18843637999380008,0.23021259997040033,N/A
p3_find_n_smallest_number,prompt_6,10,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for val, idx in heap]']",1000,0.0027660999912768602,0.0029863439965993168,0.0037169998977333307,N/A
p3_find_n_smallest_number,prompt_6,10,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for val, idx in heap]']",10000,0.025928099872544408,0.027412127000279726,0.032287900103256106,N/A
p3_find_n_smallest_number,prompt_6,10,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for val, idx in heap]']",100000,0.25956500018946826,0.267671205997467,0.3733867001719773,N/A
p3_find_n_smallest_number,prompt_6,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuples = list(zip(arg1, range(len(arg1))))\n    smallest_tuples = heapq.nsmallest(arg2, tuples)\n    indices = [t[1] for t in smallest_tuples]\n    return indices']",1000,0.003972999984398484,0.004210134993772954,0.004898999817669392,N/A
p3_find_n_smallest_number,prompt_6,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuples = list(zip(arg1, range(len(arg1))))\n    smallest_tuples = heapq.nsmallest(arg2, tuples)\n    indices = [t[1] for t in smallest_tuples]\n    return indices']",10000,0.04206999996677041,0.04413944200146944,0.05540940002538264,N/A
p3_find_n_smallest_number,prompt_6,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    tuples = list(zip(arg1, range(len(arg1))))\n    smallest_tuples = heapq.nsmallest(arg2, tuples)\n    indices = [t[1] for t in smallest_tuples]\n    return indices']",100000,0.5776553000323474,0.6053254249948077,0.677733700023964,N/A
p3_find_n_smallest_number,prompt_6,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the length of the list'\n    heap = [-1 * x for x in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if -1 * num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -1 * num)\n    res = [-1 * x for x in heap]\n    indexes = [arg1.index(x) for x in res]\n    return indexes""]",1000,0.003663100069388747,0.003799885988701135,0.005827999906614423,N/A
p3_find_n_smallest_number,prompt_6,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the length of the list'\n    heap = [-1 * x for x in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if -1 * num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -1 * num)\n    res = [-1 * x for x in heap]\n    indexes = [arg1.index(x) for x in res]\n    return indexes""]",10000,0.030698899878188968,0.03223863200284541,0.047667899867519736,N/A
p3_find_n_smallest_number,prompt_6,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the length of the list'\n    heap = [-1 * x for x in arg1[:arg2]]\n    heapq.heapify(heap)\n    for num in arg1[arg2:]:\n        if -1 * num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -1 * num)\n    res = [-1 * x for x in heap]\n    indexes = [arg1.index(x) for x in res]\n    return indexes""]",100000,0.26153339981101453,0.27243715700227766,0.33539429982192814,N/A
p3_find_n_smallest_number,prompt_6,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than number of elements in \'arg1\'""\n    list1 = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(list1)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > list1[0][0]:\n            heapq.heapreplace(list1, (-arg1[i], i))\n    ret = [x[1] for x in list1]\n    return ret']",1000,0.0030522001907229424,0.0032656210125423966,0.004552799975499511,N/A
p3_find_n_smallest_number,prompt_6,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than number of elements in \'arg1\'""\n    list1 = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(list1)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > list1[0][0]:\n            heapq.heapreplace(list1, (-arg1[i], i))\n    ret = [x[1] for x in list1]\n    return ret']",10000,0.029139399994164705,0.03019320699153468,0.034058099845424294,N/A
p3_find_n_smallest_number,prompt_6,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than number of elements in \'arg1\'""\n    list1 = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(list1)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > list1[0][0]:\n            heapq.heapreplace(list1, (-arg1[i], i))\n    ret = [x[1] for x in list1]\n    return ret']",100000,0.2923179999925196,0.3003578570019454,0.3613372000399977,N/A
p3_find_n_smallest_number,prompt_6,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, element in smallest_elements]\n    return indices']",1000,0.004729500040411949,0.004928649005014449,0.006625999929383397,N/A
p3_find_n_smallest_number,prompt_6,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, element in smallest_elements]\n    return indices']",10000,0.04339460004121065,0.04559730101609603,0.05578330019488931,N/A
p3_find_n_smallest_number,prompt_6,14,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, element in smallest_elements]\n    return indices']",100000,0.4257752001285553,0.4357159369927831,0.5111784001346678,N/A
p3_find_n_smallest_number,prompt_6,15,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'The second argument is larger than the length of the array!'\n    arg1 = list(map(lambda x: -1 * x, arg1))\n    heapq.heapify(arg1)\n    result = []\n    for _ in range(arg2):\n        result.append(-1 * heapq.heappop(arg1))\n    return result""]",1000,0.004119300050660968,0.0044749710033647715,0.01109180017374456,N/A
p3_find_n_smallest_number,prompt_6,15,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'The second argument is larger than the length of the array!'\n    arg1 = list(map(lambda x: -1 * x, arg1))\n    heapq.heapify(arg1)\n    result = []\n    for _ in range(arg2):\n        result.append(-1 * heapq.heappop(arg1))\n    return result""]",10000,0.04607359995134175,0.04730883000418544,0.05888899997808039,N/A
p3_find_n_smallest_number,prompt_6,15,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'The second argument is larger than the length of the array!'\n    arg1 = list(map(lambda x: -1 * x, arg1))\n    heapq.heapify(arg1)\n    result = []\n    for _ in range(arg2):\n        result.append(-1 * heapq.heappop(arg1))\n    return result""]",100000,0.5265039000660181,0.5338470489997417,0.5808480998966843,N/A
p3_find_n_smallest_number,prompt_6,16,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    augmented_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k_elems = heapq.nsmallest(arg2, augmented_list)\n    indexes = [idx for val, idx in smallest_k_elems]\n    return indexes']",1000,0.005262699909508228,0.005529904006980359,0.007581699872389436,N/A
p3_find_n_smallest_number,prompt_6,16,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    augmented_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k_elems = heapq.nsmallest(arg2, augmented_list)\n    indexes = [idx for val, idx in smallest_k_elems]\n    return indexes']",10000,0.05307679995894432,0.05556541400961578,0.13292300002649426,N/A
p3_find_n_smallest_number,prompt_6,16,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    augmented_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k_elems = heapq.nsmallest(arg2, augmented_list)\n    indexes = [idx for val, idx in smallest_k_elems]\n    return indexes']",100000,0.6849034999031574,0.7050636659935117,0.781508200103417,N/A
p3_find_n_smallest_number,prompt_6,17,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k should not be greater than the length of arg1'\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]""]",1000,0.0032375999726355076,0.0034466929826885463,0.003750900039449334,N/A
p3_find_n_smallest_number,prompt_6,17,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k should not be greater than the length of arg1'\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]""]",10000,0.030333900125697255,0.032457240002695474,0.055858900072053075,N/A
p3_find_n_smallest_number,prompt_6,17,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'k should not be greater than the length of arg1'\n    heap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i[1] for i in heap]""]",100000,0.31457879999652505,0.3243074099929072,0.40799099998548627,N/A
p3_find_n_smallest_number,prompt_6,18,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than number of elements in list'\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, val in smallest_elements]\n    return smallest_indices""]",1000,0.004545500036329031,0.004941524018067867,0.006046999944373965,N/A
p3_find_n_smallest_number,prompt_6,18,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than number of elements in list'\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, val in smallest_elements]\n    return smallest_indices""]",10000,0.043464899994432926,0.04553296698722988,0.06553440005518496,N/A
p3_find_n_smallest_number,prompt_6,18,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is greater than number of elements in list'\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [i for i, val in smallest_elements]\n    return smallest_indices""]",100000,0.4201895999722183,0.43315987901529296,0.4566943999379873,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    if arg2 <= 0:\n        return []\n    if not arg1:\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        num = arg1[i]\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, i))\n    indices = [i for num, i in heap]\n    return indices']",1000,0.0027636000886559486,0.0031543709943071007,0.004410600056871772,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    if arg2 <= 0:\n        return []\n    if not arg1:\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        num = arg1[i]\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, i))\n    indices = [i for num, i in heap]\n    return indices']",10000,0.028124500066041946,0.02984838699689135,0.03908500005491078,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    if arg2 <= 0:\n        return []\n    if not arg1:\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        num = arg1[i]\n        if num < -heap[0][0]:\n            heapq.heapreplace(heap, (-num, i))\n    indices = [i for num, i in heap]\n    return indices']",100000,0.27321139979176223,0.2830623060115613,0.3085646000690758,N/A
p3_find_n_smallest_number,prompt_6,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    maxHeap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            maxHeap.append((-arg1[i], i))\n        elif arg1[i] < -maxHeap[0][0]:\n            heapq.heappop(maxHeap)\n            heapq.heappush(maxHeap, (-arg1[i], i))\n        if len(maxHeap) < arg2:\n            heapq.heapify(maxHeap)\n    return sorted([i[1] for i in maxHeap])']",1000,0.004431300098076463,0.0049791389959864315,0.009084299905225635,N/A
p3_find_n_smallest_number,prompt_6,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    maxHeap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            maxHeap.append((-arg1[i], i))\n        elif arg1[i] < -maxHeap[0][0]:\n            heapq.heappop(maxHeap)\n            heapq.heappush(maxHeap, (-arg1[i], i))\n        if len(maxHeap) < arg2:\n            heapq.heapify(maxHeap)\n    return sorted([i[1] for i in maxHeap])']",10000,0.04174679983407259,0.04422527799149975,0.049336700001731515,N/A
p3_find_n_smallest_number,prompt_6,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return [i for i in range(len(arg1))]\n    maxHeap = []\n    for i in range(len(arg1)):\n        if i < arg2:\n            maxHeap.append((-arg1[i], i))\n        elif arg1[i] < -maxHeap[0][0]:\n            heapq.heappop(maxHeap)\n            heapq.heappush(maxHeap, (-arg1[i], i))\n        if len(maxHeap) < arg2:\n            heapq.heapify(maxHeap)\n    return sorted([i[1] for i in maxHeap])']",100000,0.42821320006623864,0.43755838298005983,0.5219054000917822,N/A
p3_find_n_smallest_number,prompt_6,21,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    smallest_items = sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]\n    return smallest_items']",1000,0.007301799952983856,0.00779620899586007,0.010897999862208962,N/A
p3_find_n_smallest_number,prompt_6,21,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    smallest_items = sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]\n    return smallest_items']",10000,0.11079230019822717,0.11552132601849735,0.15632679988630116,N/A
p3_find_n_smallest_number,prompt_6,21,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    smallest_items = sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]\n    return smallest_items']",100000,1.6175784999504685,1.6603932700096629,1.7728653999511153,N/A
p3_find_n_smallest_number,prompt_6,22,"['from typing import List\n\ndef partition(numbers, low, high):\n    pivot = numbers[high]\n    i = low - 1\n    for j in range(low, high):\n        if numbers[j] < pivot:\n            i = i + 1\n            numbers[i], numbers[j] = (numbers[j], numbers[i])\n    numbers[i + 1], numbers[high] = (numbers[high], numbers[i + 1])\n    return i + 1\n\ndef quick_select(numbers, low, high, k):\n    if low < high:\n        pi = partition(numbers, low, high)\n        if pi == k:\n            return numbers[:k]\n        elif k < pi:\n            return quick_select(numbers, low, pi - 1, k)\n        else:\n            return quick_select(numbers, pi + 1, high, k)\n    else:\n        return numbers[:k]\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_numbers = quick_select(arg1, 0, len(arg1) - 1, arg2)\n    indexes = [arg1.index(num) for num in smallest_numbers]\n    return indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,22,"['from typing import List\n\ndef partition(numbers, low, high):\n    pivot = numbers[high]\n    i = low - 1\n    for j in range(low, high):\n        if numbers[j] < pivot:\n            i = i + 1\n            numbers[i], numbers[j] = (numbers[j], numbers[i])\n    numbers[i + 1], numbers[high] = (numbers[high], numbers[i + 1])\n    return i + 1\n\ndef quick_select(numbers, low, high, k):\n    if low < high:\n        pi = partition(numbers, low, high)\n        if pi == k:\n            return numbers[:k]\n        elif k < pi:\n            return quick_select(numbers, low, pi - 1, k)\n        else:\n            return quick_select(numbers, pi + 1, high, k)\n    else:\n        return numbers[:k]\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_numbers = quick_select(arg1, 0, len(arg1) - 1, arg2)\n    indexes = [arg1.index(num) for num in smallest_numbers]\n    return indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,22,"['from typing import List\n\ndef partition(numbers, low, high):\n    pivot = numbers[high]\n    i = low - 1\n    for j in range(low, high):\n        if numbers[j] < pivot:\n            i = i + 1\n            numbers[i], numbers[j] = (numbers[j], numbers[i])\n    numbers[i + 1], numbers[high] = (numbers[high], numbers[i + 1])\n    return i + 1\n\ndef quick_select(numbers, low, high, k):\n    if low < high:\n        pi = partition(numbers, low, high)\n        if pi == k:\n            return numbers[:k]\n        elif k < pi:\n            return quick_select(numbers, low, pi - 1, k)\n        else:\n            return quick_select(numbers, pi + 1, high, k)\n    else:\n        return numbers[:k]\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    smallest_numbers = quick_select(arg1, 0, len(arg1) - 1, arg2)\n    indexes = [arg1.index(num) for num in smallest_numbers]\n    return indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,23,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if type(arg1) is not list or type(arg2) is not int:\n        raise TypeError('`arg1` must be a list and `arg2` must be an integer')\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap], key=lambda x: arg1[x])""]",1000,0.002850100165233016,0.0030473490059375764,0.003434599842876196,N/A
p3_find_n_smallest_number,prompt_6,23,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if type(arg1) is not list or type(arg2) is not int:\n        raise TypeError('`arg1` must be a list and `arg2` must be an integer')\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap], key=lambda x: arg1[x])""]",10000,0.026805799920111895,0.02831086899386719,0.03190599987283349,N/A
p3_find_n_smallest_number,prompt_6,23,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if type(arg1) is not list or type(arg2) is not int:\n        raise TypeError('`arg1` must be a list and `arg2` must be an integer')\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap], key=lambda x: arg1[x])""]",100000,0.269578899955377,0.3479472939972766,0.6857941001653671,N/A
p3_find_n_smallest_number,prompt_6,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -arg1[index] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-arg1[index], index))\n    return [index for num, index in max_heap]']",1000,0.003101400099694729,0.0033542509959079325,0.0043592001311481,N/A
p3_find_n_smallest_number,prompt_6,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -arg1[index] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-arg1[index], index))\n    return [index for num, index in max_heap]']",10000,0.028444600058719516,0.04565490499604494,0.09568340005353093,N/A
p3_find_n_smallest_number,prompt_6,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = [(-num, index) for index, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -arg1[index] > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-arg1[index], index))\n    return [index for num, index in max_heap]']",100000,0.2920890001114458,0.3813980520074256,0.6338525000028312,N/A
p3_find_n_smallest_number,prompt_6,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted([i for num, i in max_heap])']",1000,0.0027564000338315964,0.003474563991185278,0.007525900145992637,N/A
p3_find_n_smallest_number,prompt_6,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted([i for num, i in max_heap])']",10000,0.025192599976435304,0.035385503997094926,0.08740840014070272,N/A
p3_find_n_smallest_number,prompt_6,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    max_heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappushpop(max_heap, (-arg1[i], i))\n    return sorted([i for num, i in max_heap])']",100000,0.2523669998627156,0.26254279400920494,0.29380600014701486,N/A
p3_find_n_smallest_number,prompt_6,26,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: arg1 must contain at least arg2 elements'\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = heapq.nsmallest(arg2, heap)\n    return [i[1] for i in smallest]""]",1000,0.007135399850085378,0.007541185014415533,0.01232430012896657,N/A
p3_find_n_smallest_number,prompt_6,26,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: arg1 must contain at least arg2 elements'\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = heapq.nsmallest(arg2, heap)\n    return [i[1] for i in smallest]""]",10000,0.0844304000493139,0.08860982300946489,0.1031466000713408,N/A
p3_find_n_smallest_number,prompt_6,26,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: arg1 must contain at least arg2 elements'\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest = heapq.nsmallest(arg2, heap)\n    return [i[1] for i in smallest]""]",100000,1.037139300024137,1.0770306479930878,1.1597793998662382,N/A
p3_find_n_smallest_number,prompt_6,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    res = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    while heap:\n        num, i = heapq.heappop(heap)\n        res.append(i)\n    return res[::-1]']",1000,0.006060600047931075,0.006351312992628664,0.008484699996188283,N/A
p3_find_n_smallest_number,prompt_6,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    res = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    while heap:\n        num, i = heapq.heappop(heap)\n        res.append(i)\n    return res[::-1]']",10000,0.05839030002243817,0.06104775401065126,0.11359860002994537,N/A
p3_find_n_smallest_number,prompt_6,27,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    res = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    while heap:\n        num, i = heapq.heappop(heap)\n        res.append(i)\n    return res[::-1]']",100000,0.5948542000260204,0.6062787139974535,0.6745814001187682,N/A
p3_find_n_smallest_number,prompt_6,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-num, i))\n    index_list = [j for _, j in max_heap]\n    return index_list']",1000,0.0035376001615077257,0.003709657012950629,0.005046499893069267,N/A
p3_find_n_smallest_number,prompt_6,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-num, i))\n    index_list = [j for _, j in max_heap]\n    return index_list']",10000,0.03254840010777116,0.03439412399660796,0.06954520009458065,N/A
p3_find_n_smallest_number,prompt_6,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-num, i))\n    index_list = [j for _, j in max_heap]\n    return index_list']",100000,0.32679770002141595,0.3348130670003593,0.38486080011352897,N/A
p3_find_n_smallest_number,prompt_6,29,"['import heapq\n\ndef funcImp(arr, k):\n    if not arr:\n        return []\n    if k > len(arr):\n        return [i for i in range(len(arr))]\n    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if arr[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arr[i], i))\n    return [i[1] for i in max_heap]']",1000,0.002821299945935607,0.0030159350065514447,0.0033577000722289085,N/A
p3_find_n_smallest_number,prompt_6,29,"['import heapq\n\ndef funcImp(arr, k):\n    if not arr:\n        return []\n    if k > len(arr):\n        return [i for i in range(len(arr))]\n    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if arr[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arr[i], i))\n    return [i[1] for i in max_heap]']",10000,0.02620929991826415,0.02750202300492674,0.02987469988875091,N/A
p3_find_n_smallest_number,prompt_6,29,"['import heapq\n\ndef funcImp(arr, k):\n    if not arr:\n        return []\n    if k > len(arr):\n        return [i for i in range(len(arr))]\n    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap, (-arr[i], i))\n    for i in range(k, len(arr)):\n        if arr[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arr[i], i))\n    return [i[1] for i in max_heap]']",100000,0.2631631998810917,0.2698358130012639,0.35010799998417497,N/A
p3_find_n_smallest_number,prompt_6,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' can\'t be greater than the length of the list""\n    if len(arg1) == 0:\n        return \'Error: The list is empty\'\n    if len(arg1) != len(set(arg1)):\n        return \'Error: The list has duplicate numbers\'\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [arg1.index(x) for x in k_smallest]\n    return indices']",1000,0.0005620999727398157,0.0005819289921782911,0.0008744001388549805,N/A
p3_find_n_smallest_number,prompt_6,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' can\'t be greater than the length of the list""\n    if len(arg1) == 0:\n        return \'Error: The list is empty\'\n    if len(arg1) != len(set(arg1)):\n        return \'Error: The list has duplicate numbers\'\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [arg1.index(x) for x in k_smallest]\n    return indices']",10000,0.008580000139772892,0.00914205598179251,0.01358360005542636,N/A
p3_find_n_smallest_number,prompt_6,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' can\'t be greater than the length of the list""\n    if len(arg1) == 0:\n        return \'Error: The list is empty\'\n    if len(arg1) != len(set(arg1)):\n        return \'Error: The list has duplicate numbers\'\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [arg1.index(x) for x in k_smallest]\n    return indices']",100000,0.27681050007231534,0.29079413999337705,0.30997119983658195,N/A
p3_find_n_smallest_number,prompt_6,31,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'The number of smallest elements asked is greater than the array length'\n    elements_with_indices = [(-element, index) for index, element in enumerate(arg1)]\n    heapq.heapify(elements_with_indices)\n    largest_elements = heapq.nsmallest(arg2, elements_with_indices)\n    return [index for _, index in largest_elements]""]",1000,0.008311500074341893,0.008747000000439584,0.00996550009585917,N/A
p3_find_n_smallest_number,prompt_6,31,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'The number of smallest elements asked is greater than the array length'\n    elements_with_indices = [(-element, index) for index, element in enumerate(arg1)]\n    heapq.heapify(elements_with_indices)\n    largest_elements = heapq.nsmallest(arg2, elements_with_indices)\n    return [index for _, index in largest_elements]""]",10000,0.09706939989700913,0.10017161000752822,0.11504080006852746,N/A
p3_find_n_smallest_number,prompt_6,31,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'The number of smallest elements asked is greater than the array length'\n    elements_with_indices = [(-element, index) for index, element in enumerate(arg1)]\n    heapq.heapify(elements_with_indices)\n    largest_elements = heapq.nsmallest(arg2, elements_with_indices)\n    return [index for _, index in largest_elements]""]",100000,1.1944299000315368,1.2621378559968435,1.354324399959296,N/A
p3_find_n_smallest_number,prompt_6,32,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    temp_tuple = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(temp_tuple)\n    return [heapq.heappop(temp_tuple)[1] for _ in range(arg2)]']",1000,0.005281500052660704,0.005540450001135468,0.008095100056380033,N/A
p3_find_n_smallest_number,prompt_6,32,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    temp_tuple = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(temp_tuple)\n    return [heapq.heappop(temp_tuple)[1] for _ in range(arg2)]']",10000,0.06650330009870231,0.06881267100572586,0.08409749995917082,N/A
p3_find_n_smallest_number,prompt_6,32,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) < arg2:\n        return []\n    temp_tuple = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(temp_tuple)\n    return [heapq.heappop(temp_tuple)[1] for _ in range(arg2)]']",100000,0.7559511000290513,0.770811755002942,0.8015172001905739,N/A
p3_find_n_smallest_number,prompt_6,33,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the number of elements in the list'\n    if len(arg1) == 0:\n        return 'Error: Input list is empty'\n    max_heap = [(-value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[index]:\n            heapq.heapreplace(max_heap, (-arg1[index], index))\n    return [e[1] for e in sorted(max_heap, key=lambda x: -x[0])]""]",1000,0.00278669991530478,0.002953781981486827,0.0037837999407202005,N/A
p3_find_n_smallest_number,prompt_6,33,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the number of elements in the list'\n    if len(arg1) == 0:\n        return 'Error: Input list is empty'\n    max_heap = [(-value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[index]:\n            heapq.heapreplace(max_heap, (-arg1[index], index))\n    return [e[1] for e in sorted(max_heap, key=lambda x: -x[0])]""]",10000,0.026645899983122945,0.027434796995949,0.03166510001756251,N/A
p3_find_n_smallest_number,prompt_6,33,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the number of elements in the list'\n    if len(arg1) == 0:\n        return 'Error: Input list is empty'\n    max_heap = [(-value, index) for index, value in enumerate(arg1[:arg2])]\n    heapq.heapify(max_heap)\n    for index in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[index]:\n            heapq.heapreplace(max_heap, (-arg1[index], index))\n    return [e[1] for e in sorted(max_heap, key=lambda x: -x[0])]""]",100000,0.2615565999876708,0.26991276199230924,0.3335951999761164,N/A
p3_find_n_smallest_number,prompt_6,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return 'Invalid arg2 parameter'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]""]",1000,0.004714699927717447,0.004847230005543679,0.0054350001737475395,N/A
p3_find_n_smallest_number,prompt_6,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return 'Invalid arg2 parameter'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]""]",10000,0.043272099923342466,0.045227683004923164,0.051156300120055676,N/A
p3_find_n_smallest_number,prompt_6,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return 'Invalid arg2 parameter'\n    smallest_nums = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i[0] for i in smallest_nums]""]",100000,0.41901840013451874,0.42827872801106426,0.4871127000078559,N/A
p3_find_n_smallest_number,prompt_6,35,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return None\n    if not arg1:\n        return None\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return [i for num, i in max_heap]']",1000,0.0029795998707413673,0.00326276199426502,0.004944100044667721,N/A
p3_find_n_smallest_number,prompt_6,35,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return None\n    if not arg1:\n        return None\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return [i for num, i in max_heap]']",10000,0.02881849999539554,0.03012050798628479,0.036596700083464384,N/A
p3_find_n_smallest_number,prompt_6,35,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return None\n    if not arg1:\n        return None\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > max_heap[0][0]:\n            heapq.heapreplace(max_heap, (-arg1[i], i))\n    return [i for num, i in max_heap]']",100000,0.28957909997552633,0.2981250789947808,0.3435763001907617,N/A
p3_find_n_smallest_number,prompt_6,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(len(arg1)):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-arg1[i], i))\n        elif arg1[i] < -1 * max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for num, index in max_heap]']",1000,0.004120599944144487,0.004295223017688841,0.004909500014036894,N/A
p3_find_n_smallest_number,prompt_6,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(len(arg1)):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-arg1[i], i))\n        elif arg1[i] < -1 * max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for num, index in max_heap]']",10000,0.03781810007058084,0.040372274010442195,0.07315850001759827,N/A
p3_find_n_smallest_number,prompt_6,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(len(arg1)):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-arg1[i], i))\n        elif arg1[i] < -1 * max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for num, index in max_heap]']",100000,0.3793427001219243,0.3904472810192965,0.44817359978333116,N/A
p3_find_n_smallest_number,prompt_6,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return ""Error: \'k\' is larger than the number of elements in the list""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return [i for num, i in heapq.nlargest(arg2, heap)]']",1000,0.00595200015231967,0.0064501270069740714,0.010008600074797869,N/A
p3_find_n_smallest_number,prompt_6,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return ""Error: \'k\' is larger than the number of elements in the list""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return [i for num, i in heapq.nlargest(arg2, heap)]']",10000,0.05800079996697605,0.06137449199799448,0.0941821001470089,N/A
p3_find_n_smallest_number,prompt_6,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return ""Error: \'k\' is larger than the number of elements in the list""\n    heap = []\n    for i, num in enumerate(arg1):\n        if i < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return [i for num, i in heapq.nlargest(arg2, heap)]']",100000,0.5917181000113487,0.6033826550026424,0.7013298000674695,N/A
p3_find_n_smallest_number,prompt_6,38,"['import heapq\n\ndef funcImp(nums, k):\n    if not nums or k <= 0:\n        return []\n    if k >= len(nums):\n        return [i for i in range(len(nums))]\n    heap = []\n    for i, num in enumerate(nums):\n        if len(heap) < k:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [heapq.heappop(heap)[1] for _ in range(k)]\n    return res[::-1]']",1000,0.004375800024718046,0.0046150070102885365,0.005716399988159537,N/A
p3_find_n_smallest_number,prompt_6,38,"['import heapq\n\ndef funcImp(nums, k):\n    if not nums or k <= 0:\n        return []\n    if k >= len(nums):\n        return [i for i in range(len(nums))]\n    heap = []\n    for i, num in enumerate(nums):\n        if len(heap) < k:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [heapq.heappop(heap)[1] for _ in range(k)]\n    return res[::-1]']",10000,0.0396889999974519,0.04235717699630186,0.059175399830564857,N/A
p3_find_n_smallest_number,prompt_6,38,"['import heapq\n\ndef funcImp(nums, k):\n    if not nums or k <= 0:\n        return []\n    if k >= len(nums):\n        return [i for i in range(len(nums))]\n    heap = []\n    for i, num in enumerate(nums):\n        if len(heap) < k:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    res = [heapq.heappop(heap)[1] for _ in range(k)]\n    return res[::-1]']",100000,0.4084435999393463,0.418590390982572,0.5099586001597345,N/A
p3_find_n_smallest_number,prompt_6,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_pairs = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(k_smallest_pairs)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > k_smallest_pairs[0][0]:\n            heapq.heapreplace(k_smallest_pairs, (-arg1[i], i))\n    res = [idx for num, idx in k_smallest_pairs]\n    return res']",1000,0.003028600011020899,0.003255002002697438,0.004565899958834052,N/A
p3_find_n_smallest_number,prompt_6,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_pairs = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(k_smallest_pairs)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > k_smallest_pairs[0][0]:\n            heapq.heapreplace(k_smallest_pairs, (-arg1[i], i))\n    res = [idx for num, idx in k_smallest_pairs]\n    return res']",10000,0.029369500000029802,0.031429887008853255,0.07021760009229183,N/A
p3_find_n_smallest_number,prompt_6,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_pairs = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(k_smallest_pairs)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > k_smallest_pairs[0][0]:\n            heapq.heapreplace(k_smallest_pairs, (-arg1[i], i))\n    res = [idx for num, idx in k_smallest_pairs]\n    return res']",100000,0.2962758999783546,0.30272170300828294,0.36859730002470315,N/A
p3_find_n_smallest_number,prompt_6,40,"['def funcImp(arr, k):\n    arr_copy = arr.copy()\n    indexes = []\n    for i in range(k):\n        min_val = min(arr_copy)\n        min_index = arr.index(min_val)\n        indexes.append(min_index)\n        arr_copy.remove(min_val)\n    return indexes']",1000,0.004972699796780944,0.005801197001710534,0.015575599856674671,N/A
p3_find_n_smallest_number,prompt_6,40,"['def funcImp(arr, k):\n    arr_copy = arr.copy()\n    indexes = []\n    for i in range(k):\n        min_val = min(arr_copy)\n        min_index = arr.index(min_val)\n        indexes.append(min_index)\n        arr_copy.remove(min_val)\n    return indexes']",10000,0.047604499850422144,0.04998947300715372,0.052034900058060884,N/A
p3_find_n_smallest_number,prompt_6,40,"['def funcImp(arr, k):\n    arr_copy = arr.copy()\n    indexes = []\n    for i in range(k):\n        min_val = min(arr_copy)\n        min_index = arr.index(min_val)\n        indexes.append(min_index)\n        arr_copy.remove(min_val)\n    return indexes']",100000,0.40624150005169213,0.42116108199814334,0.4492011999245733,N/A
p3_find_n_smallest_number,prompt_6,41,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    sorted_tuples = sorted(((v, i) for i, v in enumerate(arg1)))\n    return [index for _, index in sorted_tuples[:arg2]]']",1000,0.012973399832844734,0.013738314993679524,0.016775100026279688,N/A
p3_find_n_smallest_number,prompt_6,41,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    sorted_tuples = sorted(((v, i) for i, v in enumerate(arg1)))\n    return [index for _, index in sorted_tuples[:arg2]]']",10000,0.19184920005500317,0.1959596580103971,0.23307650000788271,N/A
p3_find_n_smallest_number,prompt_6,41,"['from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    sorted_tuples = sorted(((v, i) for i, v in enumerate(arg1)))\n    return [index for _, index in sorted_tuples[:arg2]]']",100000,3.008406799985096,3.0623864879994653,3.2118377999868244,N/A
p3_find_n_smallest_number,prompt_6,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than the number of elements in \'arg1\'""\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004708100110292435,0.004865077009890228,0.0058200000785291195,N/A
p3_find_n_smallest_number,prompt_6,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than the number of elements in \'arg1\'""\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.043770199874415994,0.04542767298873514,0.05309700011275709,N/A
p3_find_n_smallest_number,prompt_6,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is greater than the number of elements in \'arg1\'""\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.42174629983492196,0.433089739989955,0.5132782999426126,N/A
p3_find_n_smallest_number,prompt_6,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, x in smallest]\n    return indices']",1000,0.0047571000177413225,0.004915167985018343,0.005616200156509876,N/A
p3_find_n_smallest_number,prompt_6,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, x in smallest]\n    return indices']",10000,0.04298250004649162,0.04530797299463302,0.06580169987864792,N/A
p3_find_n_smallest_number,prompt_6,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, x in smallest]\n    return indices']",100000,0.41908110002987087,0.42948897098889577,0.48286049999296665,N/A
p3_find_n_smallest_number,prompt_6,44,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 > len(arg1) or arg2 <= 0:\n        return 'Invalid input'\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    indices = [i[1] for i in sorted_list[:arg2]]\n    return indices""]",1000,0.012024999829009175,0.012705015002284199,0.023593900026753545,N/A
p3_find_n_smallest_number,prompt_6,44,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 > len(arg1) or arg2 <= 0:\n        return 'Invalid input'\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    indices = [i[1] for i in sorted_list[:arg2]]\n    return indices""]",10000,0.17663519992493093,0.18289737600367517,0.20305270003154874,N/A
p3_find_n_smallest_number,prompt_6,44,"[""from typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0 or arg2 > len(arg1) or arg2 <= 0:\n        return 'Invalid input'\n    sorted_list = sorted([(value, index) for index, value in enumerate(arg1)])\n    indices = [i[1] for i in sorted_list[:arg2]]\n    return indices""]",100000,2.961329699959606,3.018589401994832,3.154950200114399,N/A
p3_find_n_smallest_number,prompt_6,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if len(arg1) < arg2:\n        return [i for i in range(len(arg1))]\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for num, index in max_heap]']",1000,0.0029869000427424908,0.0030976499966345727,0.0035258999560028315,N/A
p3_find_n_smallest_number,prompt_6,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if len(arg1) < arg2:\n        return [i for i in range(len(arg1))]\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for num, index in max_heap]']",10000,0.026945299934595823,0.028807270999532193,0.08432340016588569,N/A
p3_find_n_smallest_number,prompt_6,45,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if len(arg1) < arg2:\n        return [i for i in range(len(arg1))]\n    max_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if -max_heap[0][0] > arg1[i]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for num, index in max_heap]']",100000,0.2703350998926908,0.2786322810151614,0.3556786000262946,N/A
p3_find_n_smallest_number,prompt_6,46,"['import numpy as np\n\ndef funcImp(arg1, arg2):\n    sorted_indices = np.argsort(arg1)\n    return sorted_indices[:arg2].tolist()']",1000,0.0031256999354809523,0.003459154001902789,0.004447300219908357,N/A
p3_find_n_smallest_number,prompt_6,46,"['import numpy as np\n\ndef funcImp(arg1, arg2):\n    sorted_indices = np.argsort(arg1)\n    return sorted_indices[:arg2].tolist()']",10000,0.0576969999819994,0.06102458700770512,0.07053080014884472,N/A
p3_find_n_smallest_number,prompt_6,46,"['import numpy as np\n\ndef funcImp(arg1, arg2):\n    sorted_indices = np.argsort(arg1)\n    return sorted_indices[:arg2].tolist()']",100000,0.6855514000635594,0.6953758509946055,0.7171748999971896,N/A
p3_find_n_smallest_number,prompt_6,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    else:\n        return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.003245500149205327,0.0034074579901061954,0.005593299865722656,N/A
p3_find_n_smallest_number,prompt_6,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    else:\n        return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.02851970004849136,0.030769578993786125,0.05516160000115633,N/A
p3_find_n_smallest_number,prompt_6,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    else:\n        return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29089959990233183,0.29925274399109186,0.34731209999881685,N/A
p3_find_n_smallest_number,prompt_6,48,"['def funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    sorted_tuples = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for value, index in sorted_tuples[:arg2]]']",1000,0.011715099913999438,0.012581398012116551,0.018258600030094385,N/A
p3_find_n_smallest_number,prompt_6,48,"['def funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    sorted_tuples = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for value, index in sorted_tuples[:arg2]]']",10000,0.18004620005376637,0.18711027400568128,0.2557916999794543,N/A
p3_find_n_smallest_number,prompt_6,48,"['def funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    sorted_tuples = sorted([(value, index) for index, value in enumerate(arg1)])\n    return [index for value, index in sorted_tuples[:arg2]]']",100000,2.9441617999691516,2.9926477879937736,3.1039493998978287,N/A
p3_find_n_smallest_number,prompt_6,49,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return sorted([idx for num, idx in heap])']",1000,0.002230099868029356,0.0024347510002553463,0.0027614000719040632,N/A
p3_find_n_smallest_number,prompt_6,49,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return sorted([idx for num, idx in heap])']",10000,0.022484099958091974,0.024465226982720197,0.07425359985791147,N/A
p3_find_n_smallest_number,prompt_6,49,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return sorted([idx for num, idx in heap])']",100000,0.23015139997005463,0.23767608198570087,0.2790023998823017,N/A
p3_find_n_smallest_number,prompt_6,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return 'The array is empty.'\n    if arg2 < 0:\n        return 'K cannot be negative.'\n    if arg2 > len(arg1):\n        return 'K is larger than the size of the array.'\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indices = [i for _, i in heap]\n    return indices""]",1000,0.012079200008884072,0.012618277997244149,0.013456299901008606,N/A
p3_find_n_smallest_number,prompt_6,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return 'The array is empty.'\n    if arg2 < 0:\n        return 'K cannot be negative.'\n    if arg2 > len(arg1):\n        return 'K is larger than the size of the array.'\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indices = [i for _, i in heap]\n    return indices""]",10000,0.11893550003878772,0.12383101600455121,0.14308000006712973,N/A
p3_find_n_smallest_number,prompt_6,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return 'The array is empty.'\n    if arg2 < 0:\n        return 'K cannot be negative.'\n    if arg2 > len(arg1):\n        return 'K is larger than the size of the array.'\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (-arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    indices = [i for _, i in heap]\n    return indices""]",100000,1.2222404999192804,1.2429070139932445,1.3244773000478745,N/A
p3_find_n_smallest_number,prompt_6,51,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return 'Invalid input'\n    arg1 = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    smallest_indices = [idx for num, idx in smallest_nums]\n    return smallest_indices""]",1000,0.0052402999717742205,0.005600580987520516,0.006968299858272076,N/A
p3_find_n_smallest_number,prompt_6,51,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return 'Invalid input'\n    arg1 = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    smallest_indices = [idx for num, idx in smallest_nums]\n    return smallest_indices""]",10000,0.05299959983676672,0.05505812300601974,0.09215639997273684,N/A
p3_find_n_smallest_number,prompt_6,51,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return 'Invalid input'\n    arg1 = [(num, idx) for idx, num in enumerate(arg1)]\n    smallest_nums = heapq.nsmallest(arg2, arg1)\n    smallest_indices = [idx for num, idx in smallest_nums]\n    return smallest_indices""]",100000,0.6868928000330925,0.7069735369971022,0.7730517000891268,N/A
p3_find_n_smallest_number,prompt_6,52,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the list length'\n    num_with_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_nums_with_index = heapq.nsmallest(arg2, num_with_index)\n    indexes = [index for num, index in smallest_nums_with_index]\n    return indexes""]",1000,0.005184999899938703,0.005708749010227621,0.01614100020378828,N/A
p3_find_n_smallest_number,prompt_6,52,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the list length'\n    num_with_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_nums_with_index = heapq.nsmallest(arg2, num_with_index)\n    indexes = [index for num, index in smallest_nums_with_index]\n    return indexes""]",10000,0.05160249979235232,0.05445996599039063,0.0591327000875026,N/A
p3_find_n_smallest_number,prompt_6,52,"[""import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the list length'\n    num_with_index = [(num, index) for index, num in enumerate(arg1)]\n    smallest_nums_with_index = heapq.nsmallest(arg2, num_with_index)\n    indexes = [index for num, index in smallest_nums_with_index]\n    return indexes""]",100000,0.6812637001276016,0.7051116660027765,0.7722493000328541,N/A
p3_find_n_smallest_number,prompt_6,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",1000,0.007038600044324994,0.007710696018766612,0.012577000074088573,N/A
p3_find_n_smallest_number,prompt_6,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",10000,0.08632600004784763,0.08874940200010314,0.09266910003498197,N/A
p3_find_n_smallest_number,prompt_6,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",100000,1.0229699998162687,1.042613680001814,1.1901013997849077,N/A
p3_find_n_smallest_number,prompt_6,54,"['from typing import List, Tuple\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-num, i))\n    return [index for num, index in max_heap]']",1000,0.00406399997882545,0.0043278039968572555,0.00916090002283454,N/A
p3_find_n_smallest_number,prompt_6,54,"['from typing import List, Tuple\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-num, i))\n    return [index for num, index in max_heap]']",10000,0.0389578000176698,0.041468086992390456,0.09928159997798502,N/A
p3_find_n_smallest_number,prompt_6,54,"['from typing import List, Tuple\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, i))\n        elif num < -max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-num, i))\n    return [index for num, index in max_heap]']",100000,0.39445200003683567,0.4017071570153348,0.4526971001178026,N/A
p3_find_n_smallest_number,prompt_6,55,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 < 1:\n        return 'Invalid value for the second argument.'\n    result = []\n    minHeap = []\n    for i in range(arg2):\n        heapq.heappush(minHeap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -minHeap[0][0] > arg1[i]:\n            heapq.heappushpop(minHeap, (-arg1[i], i))\n    while minHeap:\n        result.append(heapq.heappop(minHeap)[1])\n    return sorted(result)""]",1000,0.0028291000053286552,0.0029827740066684784,0.00358659983612597,N/A
p3_find_n_smallest_number,prompt_6,55,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 < 1:\n        return 'Invalid value for the second argument.'\n    result = []\n    minHeap = []\n    for i in range(arg2):\n        heapq.heappush(minHeap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -minHeap[0][0] > arg1[i]:\n            heapq.heappushpop(minHeap, (-arg1[i], i))\n    while minHeap:\n        result.append(heapq.heappop(minHeap)[1])\n    return sorted(result)""]",10000,0.025788299972191453,0.027309262985363604,0.03447670000605285,N/A
p3_find_n_smallest_number,prompt_6,55,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 < 1:\n        return 'Invalid value for the second argument.'\n    result = []\n    minHeap = []\n    for i in range(arg2):\n        heapq.heappush(minHeap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -minHeap[0][0] > arg1[i]:\n            heapq.heappushpop(minHeap, (-arg1[i], i))\n    while minHeap:\n        result.append(heapq.heappop(minHeap)[1])\n    return sorted(result)""]",100000,0.260145700071007,0.2674329699901864,0.3016328997910023,N/A
p3_find_n_smallest_number,prompt_6,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(arg1)\n    indexes = [heapq.heappop(arg1)[1] for _ in range(arg2)]\n    return indexes']",1000,0.005206099944189191,0.005427569006569683,0.006436499999836087,N/A
p3_find_n_smallest_number,prompt_6,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(arg1)\n    indexes = [heapq.heappop(arg1)[1] for _ in range(arg2)]\n    return indexes']",10000,0.06538699986413121,0.06746784998569638,0.07080390001647174,N/A
p3_find_n_smallest_number,prompt_6,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(arg1)\n    indexes = [heapq.heappop(arg1)[1] for _ in range(arg2)]\n    return indexes']",100000,0.7803877000696957,0.7957856680033728,0.8169499998912215,N/A
p3_find_n_smallest_number,prompt_6,57,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the size of the list'\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest""]",1000,0.0060963998548686504,0.006356604993343353,0.00899149989709258,N/A
p3_find_n_smallest_number,prompt_6,57,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the size of the list'\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest""]",10000,0.07756079989485443,0.07957574300235137,0.08334589982405305,N/A
p3_find_n_smallest_number,prompt_6,57,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the size of the list'\n    heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest""]",100000,0.854200400179252,0.8771261290018447,0.9186319999862462,N/A
p3_find_n_smallest_number,prompt_6,58,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return 'K is larger than array length'\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -arg1[i])\n    smallest_elements_indexes = [-num for num in heap]\n    return [arg1.index(element) for element in smallest_elements_indexes]""]",1000,0.004086999921128154,0.004208842990919948,0.004931899951770902,N/A
p3_find_n_smallest_number,prompt_6,58,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return 'K is larger than array length'\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -arg1[i])\n    smallest_elements_indexes = [-num for num in heap]\n    return [arg1.index(element) for element in smallest_elements_indexes]""]",10000,0.03518520016223192,0.037497263988479974,0.04679339984431863,N/A
p3_find_n_smallest_number,prompt_6,58,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return 'K is larger than array length'\n    heap = [-num for num in arg1[:arg2]]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -arg1[i])\n    smallest_elements_indexes = [-num for num in heap]\n    return [arg1.index(element) for element in smallest_elements_indexes]""]",100000,0.2933642000425607,0.30183470299467446,0.3767355000600219,N/A
p3_find_n_smallest_number,prompt_6,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is larger than the number of elements in \'arg1\'""\n    else:\n        return heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])']",1000,0.004679899895563722,0.004804901019670069,0.005154999904334545,N/A
p3_find_n_smallest_number,prompt_6,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is larger than the number of elements in \'arg1\'""\n    else:\n        return heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])']",10000,0.043146099895238876,0.04539984699338675,0.0768433001358062,N/A
p3_find_n_smallest_number,prompt_6,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return ""Error: \'arg2\' is larger than the number of elements in \'arg1\'""\n    else:\n        return heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])']",100000,0.4182331000920385,0.4270999609935097,0.47018119995482266,N/A
p3_find_n_smallest_number,prompt_6,60,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: arg2 is greater than the number of elements in arg1'\n    if not arg1:\n        return 'Error: arg1 is empty.'\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap])""]",1000,0.0039184000343084335,0.0042602339969016615,0.007109900005161762,N/A
p3_find_n_smallest_number,prompt_6,60,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: arg2 is greater than the number of elements in arg1'\n    if not arg1:\n        return 'Error: arg1 is empty.'\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap])""]",10000,0.03516019997186959,0.03732071899343282,0.05237070005387068,N/A
p3_find_n_smallest_number,prompt_6,60,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Error: arg2 is greater than the number of elements in arg1'\n    if not arg1:\n        return 'Error: arg1 is empty.'\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i[1] for i in heap])""]",100000,0.36017460003495216,0.3694591019907966,0.4692132000345737,N/A
p3_find_n_smallest_number,prompt_6,61,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [i for _, i in heap]\n    return indexes']",1000,0.0024501001462340355,0.0026166599919088184,0.003429599804803729,N/A
p3_find_n_smallest_number,prompt_6,61,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [i for _, i in heap]\n    return indexes']",10000,0.023179099895060062,0.024503906986210494,0.04063210007734597,N/A
p3_find_n_smallest_number,prompt_6,61,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, i) for i, val in enumerate(arg1[:arg2])]\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq._heapreplace_max(heap, (arg1[i], i))\n    indexes = [i for _, i in heap]\n    return indexes']",100000,0.23378350003622472,0.24022116701118648,0.27475890005007386,N/A
p3_find_n_smallest_number,prompt_6,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return []\n    acc = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(acc)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(acc, (-arg1[i], i))\n    return [i for num, i in acc]']",1000,0.005048000020906329,0.005306068996433168,0.007875600131228566,N/A
p3_find_n_smallest_number,prompt_6,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return []\n    acc = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(acc)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(acc, (-arg1[i], i))\n    return [i for num, i in acc]']",10000,0.04776809993200004,0.05014115901198238,0.05865509994328022,N/A
p3_find_n_smallest_number,prompt_6,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return []\n    acc = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(acc)\n    for i in range(arg2, len(arg1)):\n        heapq.heappushpop(acc, (-arg1[i], i))\n    return [i for num, i in acc]']",100000,0.48722929996438324,0.4985079099913128,0.5741880000568926,N/A
p3_find_n_smallest_number,prompt_6,63,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('arg2 must be between 0 and the length of arg1')\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heap = arg1[0:arg2]\n    heapq.heapify(heap)\n    max_val = heap[0]\n    for i in range(arg2, len(arg1)):\n        if arg1[i][0] > max_val[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            max_val = heap[0]\n    return [item[1] for item in heap]""]",1000,0.005371600156649947,0.005703289003577083,0.00768220005556941,N/A
p3_find_n_smallest_number,prompt_6,63,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('arg2 must be between 0 and the length of arg1')\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heap = arg1[0:arg2]\n    heapq.heapify(heap)\n    max_val = heap[0]\n    for i in range(arg2, len(arg1)):\n        if arg1[i][0] > max_val[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            max_val = heap[0]\n    return [item[1] for item in heap]""]",10000,0.05588699993677437,0.05919630001531914,0.15325390012003481,N/A
p3_find_n_smallest_number,prompt_6,63,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('arg2 must be between 0 and the length of arg1')\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heap = arg1[0:arg2]\n    heapq.heapify(heap)\n    max_val = heap[0]\n    for i in range(arg2, len(arg1)):\n        if arg1[i][0] > max_val[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, arg1[i])\n            max_val = heap[0]\n    return [item[1] for item in heap]""]",100000,0.7255857998970896,0.7511658300017007,0.8348044999875128,N/A
p3_find_n_smallest_number,prompt_6,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap])']",1000,0.002933999989181757,0.003085713987238705,0.004151100059971213,N/A
p3_find_n_smallest_number,prompt_6,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap])']",10000,0.02631310001015663,0.02744434099411592,0.03306469996459782,N/A
p3_find_n_smallest_number,prompt_6,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-num, i) for i, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return sorted([i for num, i in heap])']",100000,0.26185979996807873,0.2682110629975796,0.3682961999438703,N/A
p3_find_n_smallest_number,prompt_6,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list length.""\n    elif arg2 <= 0:\n        return ""Error: \'k\' must be greater than 0.""\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heap = []\n    for i in range(arg2):\n        heap.append(arg1[i])\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq._heappop_max(heap)\n            heapq.heappush(heap, arg1[i])\n    result = [elem[1] for elem in heap]\n    return result']",1000,0.005694699939340353,0.006023064977489412,0.008033100049942732,N/A
p3_find_n_smallest_number,prompt_6,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list length.""\n    elif arg2 <= 0:\n        return ""Error: \'k\' must be greater than 0.""\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heap = []\n    for i in range(arg2):\n        heap.append(arg1[i])\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq._heappop_max(heap)\n            heapq.heappush(heap, arg1[i])\n    result = [elem[1] for elem in heap]\n    return result']",10000,0.061205900041386485,0.06373556700767949,0.10755890002474189,N/A
p3_find_n_smallest_number,prompt_6,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list length.""\n    elif arg2 <= 0:\n        return ""Error: \'k\' must be greater than 0.""\n    arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    heap = []\n    for i in range(arg2):\n        heap.append(arg1[i])\n    heapq._heapify_max(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq._heappop_max(heap)\n            heapq.heappush(heap, arg1[i])\n    result = [elem[1] for elem in heap]\n    return result']",100000,0.7722199000418186,0.7966419579880312,0.857114999787882,N/A
p3_find_n_smallest_number,prompt_6,66,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid Input'\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        else:\n            top = heapq.heappop(min_heap)\n            if top[0] < -num:\n                heapq.heappush(min_heap, (-num, i))\n            else:\n                heapq.heappush(min_heap, top)\n    return [i[-1] for i in heapq.nlargest(arg2, min_heap)]""]",1000,0.013768599834293127,0.01443545700982213,0.020858099916949868,N/A
p3_find_n_smallest_number,prompt_6,66,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid Input'\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        else:\n            top = heapq.heappop(min_heap)\n            if top[0] < -num:\n                heapq.heappush(min_heap, (-num, i))\n            else:\n                heapq.heappush(min_heap, top)\n    return [i[-1] for i in heapq.nlargest(arg2, min_heap)]""]",10000,0.13401479995809495,0.1390171849844046,0.1449779998511076,N/A
p3_find_n_smallest_number,prompt_6,66,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or arg2 > len(arg1):\n        return 'Invalid Input'\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, i))\n        else:\n            top = heapq.heappop(min_heap)\n            if top[0] < -num:\n                heapq.heappush(min_heap, (-num, i))\n            else:\n                heapq.heappush(min_heap, top)\n    return [i[-1] for i in heapq.nlargest(arg2, min_heap)]""]",100000,1.3689824000466615,1.388562217997387,1.484023599885404,N/A
p3_find_n_smallest_number,prompt_6,67,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg1 is None or arg2 <= 0:\n        return []\n    min_heap = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    res = []\n    while arg2 > 0 and min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n        arg2 -= 1\n    return res']",1000,0.0051889000460505486,0.005456118008587509,0.0075870000291615725,N/A
p3_find_n_smallest_number,prompt_6,67,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg1 is None or arg2 <= 0:\n        return []\n    min_heap = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    res = []\n    while arg2 > 0 and min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n        arg2 -= 1\n    return res']",10000,0.06683190003968775,0.06912045900011435,0.09048260003328323,N/A
p3_find_n_smallest_number,prompt_6,67,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg1 is None or arg2 <= 0:\n        return []\n    min_heap = [(val, i) for i, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    res = []\n    while arg2 > 0 and min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n        arg2 -= 1\n    return res']",100000,0.7469325999263674,0.7657149659865535,0.8338599000126123,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or not arg1:\n        return []\n    if arg2 == 0:\n        return []\n    k_elements = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(k_elements)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > k_elements[0][0]:\n            heapq.heapreplace(k_elements, (-arg1[i], i))\n    return sorted([x[1] for x in k_elements])']",1000,0.002975400071591139,0.0032360250013880433,0.0055970000103116035,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or not arg1:\n        return []\n    if arg2 == 0:\n        return []\n    k_elements = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(k_elements)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > k_elements[0][0]:\n            heapq.heapreplace(k_elements, (-arg1[i], i))\n    return sorted([x[1] for x in k_elements])']",10000,0.028549199923872948,0.030418554984498768,0.05291109997779131,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or not arg1:\n        return []\n    if arg2 == 0:\n        return []\n    k_elements = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(k_elements)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > k_elements[0][0]:\n            heapq.heapreplace(k_elements, (-arg1[i], i))\n    return sorted([x[1] for x in k_elements])']",100000,0.2927653999067843,0.2990008959802799,0.3246589999180287,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) <= arg2:\n        return [i for i in range(len(arg1))]\n    heap = arg1.copy()\n    heapq.heapify(heap)\n    smallest_nums = [heapq.heappop(heap) for _ in range(arg2)]\n    return [arg1.index(num) for num in smallest_nums]']",1000,0.00247119995765388,0.0025828950060531497,0.002985399914905429,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) <= arg2:\n        return [i for i in range(len(arg1))]\n    heap = arg1.copy()\n    heapq.heapify(heap)\n    smallest_nums = [heapq.heappop(heap) for _ in range(arg2)]\n    return [arg1.index(num) for num in smallest_nums]']",10000,0.028405999997630715,0.02953686099499464,0.03249839995987713,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) <= arg2:\n        return [i for i in range(len(arg1))]\n    heap = arg1.copy()\n    heapq.heapify(heap)\n    smallest_nums = [heapq.heappop(heap) for _ in range(arg2)]\n    return [arg1.index(num) for num in smallest_nums]']",100000,0.2636036998592317,0.2731229680054821,0.28524520015344024,N/A
p3_find_n_smallest_number,prompt_6,70,"['import heapq\nfrom typing import List, Any\n\ndef funcImp(arg1: List[int], arg2: Any) -> List[int]:\n    if not arg1 or not arg2:\n        return []\n    if arg2 > len(arg1):\n        return []\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    result = sorted([i[1] for i in max_heap])\n    return result']",1000,0.002642800100147724,0.0029063719883561136,0.003684299997985363,N/A
p3_find_n_smallest_number,prompt_6,70,"['import heapq\nfrom typing import List, Any\n\ndef funcImp(arg1: List[int], arg2: Any) -> List[int]:\n    if not arg1 or not arg2:\n        return []\n    if arg2 > len(arg1):\n        return []\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    result = sorted([i[1] for i in max_heap])\n    return result']",10000,0.025766000151634216,0.02730841899756342,0.04054690012708306,N/A
p3_find_n_smallest_number,prompt_6,70,"['import heapq\nfrom typing import List, Any\n\ndef funcImp(arg1: List[int], arg2: Any) -> List[int]:\n    if not arg1 or not arg2:\n        return []\n    if arg2 > len(arg1):\n        return []\n    max_heap = [[-arg1[i], i] for i in range(arg2)]\n    heapq.heapify(max_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heapreplace(max_heap, [-arg1[i], i])\n    result = sorted([i[1] for i in max_heap])\n    return result']",100000,0.25614149984903634,0.2648776469868608,0.3502873999532312,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(min_heap)\n        smallest_k.append(i)\n    return smallest_k']",1000,0.006023299880325794,0.006866001002490521,0.017807100201025605,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(min_heap)\n        smallest_k.append(i)\n    return smallest_k']",10000,0.0754775998648256,0.07897930598817765,0.08426049980334938,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(-num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = []\n    for _ in range(arg2):\n        num, i = heapq.heappop(min_heap)\n        smallest_k.append(i)\n    return smallest_k']",100000,0.8416796000674367,0.865924837011844,0.9768514998722821,N/A
p3_find_n_smallest_number,prompt_6,72,"[""def funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the array!'\n    if arg2 < 0:\n        return 'Error: k must be a non-negative integer!'\n    index_value = [(index, value) for index, value in enumerate(arg1)]\n    index_value.sort(key=lambda x: x[1])\n    return [index for index, value in index_value[:arg2]]""]",1000,0.009425000054761767,0.010306582013145089,0.022618399932980537,N/A
p3_find_n_smallest_number,prompt_6,72,"[""def funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the array!'\n    if arg2 < 0:\n        return 'Error: k must be a non-negative integer!'\n    index_value = [(index, value) for index, value in enumerate(arg1)]\n    index_value.sort(key=lambda x: x[1])\n    return [index for index, value in index_value[:arg2]]""]",10000,0.1526676001958549,0.15649258201010524,0.16387089993804693,N/A
p3_find_n_smallest_number,prompt_6,72,"[""def funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the array!'\n    if arg2 < 0:\n        return 'Error: k must be a non-negative integer!'\n    index_value = [(index, value) for index, value in enumerate(arg1)]\n    index_value.sort(key=lambda x: x[1])\n    return [index for index, value in index_value[:arg2]]""]",100000,2.206094699911773,2.2395107809943147,2.3138271998614073,N/A
p3_find_n_smallest_number,prompt_6,73,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return []\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",1000,0.007343200035393238,0.007952523992862552,0.012468399945646524,N/A
p3_find_n_smallest_number,prompt_6,73,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return []\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",10000,0.11361670005135238,0.11648906799498945,0.12383389985188842,N/A
p3_find_n_smallest_number,prompt_6,73,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return []\n    else:\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])[:arg2]']",100000,1.623390099965036,1.6477680020034313,1.7151101999916136,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.005001399898901582,0.005461173001676798,0.006908799987286329,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.06555719999596477,0.0675619849911891,0.11274709994904697,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.766148200025782,0.7852329670079052,0.850533900083974,N/A
p3_find_n_smallest_number,prompt_6,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",1000,0.005187999922782183,0.0054382479819469155,0.007818599930033088,N/A
p3_find_n_smallest_number,prompt_6,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",10000,0.06330979987978935,0.0667202469985932,0.09157499996945262,N/A
p3_find_n_smallest_number,prompt_6,75,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    return [heapq.heappop(heap)[1] for _ in range(arg2)]']",100000,0.7537789999041706,0.7740600989945233,0.8318799000699073,N/A
p3_find_n_smallest_number,prompt_6,76,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1) or arg2 <= 0:\n        return []\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return nums[0]\n        pivot = nums[len(nums) // 2]\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n        if k <= len(left):\n            return quickselect(left, k)\n        elif k > len(left) + len(middle):\n            return quickselect(right, k - len(left) - len(middle))\n        else:\n            return pivot\n    k_smallest_values = sorted([quickselect(arg1, i) for i in range(1, arg2 + 1)])\n    indices = [arg1.index(value) for value in k_smallest_values]\n    return indices']",1000,0.03804219979792833,0.040236834003590044,0.07045980007387698,N/A
p3_find_n_smallest_number,prompt_6,76,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1) or arg2 <= 0:\n        return []\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return nums[0]\n        pivot = nums[len(nums) // 2]\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n        if k <= len(left):\n            return quickselect(left, k)\n        elif k > len(left) + len(middle):\n            return quickselect(right, k - len(left) - len(middle))\n        else:\n            return pivot\n    k_smallest_values = sorted([quickselect(arg1, i) for i in range(1, arg2 + 1)])\n    indices = [arg1.index(value) for value in k_smallest_values]\n    return indices']",10000,0.5077098000328988,0.5198358930042013,0.5714483000338078,N/A
p3_find_n_smallest_number,prompt_6,76,"['def funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1) or arg2 <= 0:\n        return []\n\n    def quickselect(nums, k):\n        if len(nums) == 1:\n            return nums[0]\n        pivot = nums[len(nums) // 2]\n        left = [x for x in nums if x < pivot]\n        middle = [x for x in nums if x == pivot]\n        right = [x for x in nums if x > pivot]\n        if k <= len(left):\n            return quickselect(left, k)\n        elif k > len(left) + len(middle):\n            return quickselect(right, k - len(left) - len(middle))\n        else:\n            return pivot\n    k_smallest_values = sorted([quickselect(arg1, i) for i in range(1, arg2 + 1)])\n    indices = [arg1.index(value) for value in k_smallest_values]\n    return indices']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_6,77,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_elements]']",1000,0.004562400048598647,0.004862131008412689,0.0054583000019192696,N/A
p3_find_n_smallest_number,prompt_6,77,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_elements]']",10000,0.04392519989050925,0.04561269599944353,0.07033829996362329,N/A
p3_find_n_smallest_number,prompt_6,77,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 == 0:\n        return []\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest_elements]']",100000,0.42013429990038276,0.4297282910067588,0.47944460017606616,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_elements]']",1000,0.004789200145751238,0.0048758359998464585,0.005371300037950277,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_elements]']",10000,0.043494499986991286,0.04580024599097669,0.07471770001575351,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [i for i, v in smallest_elements]']",100000,0.4202612000517547,0.4302459910092875,0.48135979985818267,N/A
p3_find_n_smallest_number,prompt_6,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",1000,0.005201900145038962,0.00545100201619789,0.006997099844738841,N/A
p3_find_n_smallest_number,prompt_6,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",10000,0.06542150001041591,0.06736200101207941,0.07056000013835728,N/A
p3_find_n_smallest_number,prompt_6,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    return [heapq.heappop(min_heap)[1] for _ in range(arg2)]']",100000,0.7837698999792337,0.8017390299867838,0.8444538998883218,N/A
p3_find_n_smallest_number,prompt_6,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif len(arg1) < arg2:\n        return [i for i in range(len(arg1))]\n    indexed_list = list(enumerate(arg1))\n    smallest_elements = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    indexes = [i for i, num in smallest_elements]\n    return indexes']",1000,0.005365499993786216,0.005568546985741705,0.006882200017571449,N/A
p3_find_n_smallest_number,prompt_6,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif len(arg1) < arg2:\n        return [i for i in range(len(arg1))]\n    indexed_list = list(enumerate(arg1))\n    smallest_elements = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    indexes = [i for i, num in smallest_elements]\n    return indexes']",10000,0.0543569999281317,0.056890375984366984,0.06353459996171296,N/A
p3_find_n_smallest_number,prompt_6,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    elif len(arg1) < arg2:\n        return [i for i in range(len(arg1))]\n    indexed_list = list(enumerate(arg1))\n    smallest_elements = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    indexes = [i for i, num in smallest_elements]\n    return indexes']",100000,0.6893074000254273,0.7200324060069397,0.7688382000196725,N/A
p3_find_n_smallest_number,prompt_6,81,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Invalid input. The value of \'k\' cannot be more than the length of list.""\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    resulting_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    resulting_indexes.reverse()\n    return resulting_indexes']",1000,0.0027633998543024063,0.002988825000356883,0.003411900019273162,N/A
p3_find_n_smallest_number,prompt_6,81,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Invalid input. The value of \'k\' cannot be more than the length of list.""\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    resulting_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    resulting_indexes.reverse()\n    return resulting_indexes']",10000,0.02684659999795258,0.028142550005577506,0.033978600054979324,N/A
p3_find_n_smallest_number,prompt_6,81,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 > len(arg1):\n        return ""Invalid input. The value of \'k\' cannot be more than the length of list.""\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    resulting_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    resulting_indexes.reverse()\n    return resulting_indexes']",100000,0.2672051000408828,0.27357971501536665,0.31637879996560514,N/A
p3_find_n_smallest_number,prompt_6,82,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the list.'\n    if arg2 < 1:\n        return 'Error: k must be a positive integer.'\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [item[1] for item in heap]\n    return indexes""]",1000,0.004284099908545613,0.0045482719945721325,0.00844619981944561,N/A
p3_find_n_smallest_number,prompt_6,82,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the list.'\n    if arg2 < 1:\n        return 'Error: k must be a positive integer.'\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [item[1] for item in heap]\n    return indexes""]",10000,0.03957360005006194,0.04168285400141031,0.045946900034323335,N/A
p3_find_n_smallest_number,prompt_6,82,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'Error: k is larger than the size of the list.'\n    if arg2 < 1:\n        return 'Error: k must be a positive integer.'\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [item[1] for item in heap]\n    return indexes""]",100000,0.401759099913761,0.4112286170013249,0.4960370999760926,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, index))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, index))\n    return [index for num, index in heap]']",1000,0.004221600014716387,0.004377352998126298,0.004827399970963597,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, index))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, index))\n    return [index for num, index in heap]']",10000,0.03868300002068281,0.04131017100997269,0.05955430003814399,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, index))\n        elif num < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, index))\n    return [index for num, index in heap]']",100000,0.393530499888584,0.4070028059906326,0.4508785998914391,N/A
p3_find_n_smallest_number,prompt_6,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or not arg1:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif heap and -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    res = [x[1] for x in heapq.nlargest(arg2, heap)]\n    res.sort()\n    return res']",1000,0.004127599997445941,0.004493883992545307,0.008384999819099903,N/A
p3_find_n_smallest_number,prompt_6,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or not arg1:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif heap and -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    res = [x[1] for x in heapq.nlargest(arg2, heap)]\n    res.sort()\n    return res']",10000,0.03974799998104572,0.04163897798396647,0.0575719999615103,N/A
p3_find_n_smallest_number,prompt_6,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 1 or not arg1:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif heap and -heap[0][0] > arg1[i]:\n            heapq.heapreplace(heap, (-arg1[i], i))\n    res = [x[1] for x in heapq.nlargest(arg2, heap)]\n    res.sort()\n    return res']",100000,0.4058482002001256,0.41276681900955736,0.45154669997282326,N/A
p3_find_n_smallest_number,prompt_6,85,"['def funcImp(arg1, arg2):\n    num_to_index = [(num, i) for i, num in enumerate(arg1)]\n    sorted_nums = sorted(num_to_index, key=lambda x: x[0])\n    k_smallest_indices = [x[1] for x in sorted_nums[:arg2]]\n    return k_smallest_indices']",1000,0.009738600114360452,0.010904980993364006,0.01641170005314052,N/A
p3_find_n_smallest_number,prompt_6,85,"['def funcImp(arg1, arg2):\n    num_to_index = [(num, i) for i, num in enumerate(arg1)]\n    sorted_nums = sorted(num_to_index, key=lambda x: x[0])\n    k_smallest_indices = [x[1] for x in sorted_nums[:arg2]]\n    return k_smallest_indices']",10000,0.1577548999339342,0.16062472499208524,0.16514499997720122,N/A
p3_find_n_smallest_number,prompt_6,85,"['def funcImp(arg1, arg2):\n    num_to_index = [(num, i) for i, num in enumerate(arg1)]\n    sorted_nums = sorted(num_to_index, key=lambda x: x[0])\n    k_smallest_indices = [x[1] for x in sorted_nums[:arg2]]\n    return k_smallest_indices']",100000,2.283745100023225,2.3209426660113968,2.4121181000955403,N/A
p3_find_n_smallest_number,prompt_6,86,"[""def funcImp(arg1, arg2):\n    if isinstance(arg1, list) and all((isinstance(i, int) for i in arg1)) and isinstance(arg2, int):\n        if arg2 < 1:\n            return 'Error: Second argument must be greater than 0.'\n        elif arg2 > len(arg1):\n            return 'Error: Second argument is greater than the number of elements in the list.'\n        else:\n            sorted_indices = sorted(range(len(arg1)), key=arg1.__getitem__)\n            return sorted_indices[:arg2]\n    else:\n        return 'Error: Invalid arguments. First argument must be a list of integers and second argument must be an integer.'""]",1000,0.008318200008943677,0.008938247982878239,0.01675219996832311,N/A
p3_find_n_smallest_number,prompt_6,86,"[""def funcImp(arg1, arg2):\n    if isinstance(arg1, list) and all((isinstance(i, int) for i in arg1)) and isinstance(arg2, int):\n        if arg2 < 1:\n            return 'Error: Second argument must be greater than 0.'\n        elif arg2 > len(arg1):\n            return 'Error: Second argument is greater than the number of elements in the list.'\n        else:\n            sorted_indices = sorted(range(len(arg1)), key=arg1.__getitem__)\n            return sorted_indices[:arg2]\n    else:\n        return 'Error: Invalid arguments. First argument must be a list of integers and second argument must be an integer.'""]",10000,0.11962680006399751,0.12355866300174967,0.14243729994632304,N/A
p3_find_n_smallest_number,prompt_6,86,"[""def funcImp(arg1, arg2):\n    if isinstance(arg1, list) and all((isinstance(i, int) for i in arg1)) and isinstance(arg2, int):\n        if arg2 < 1:\n            return 'Error: Second argument must be greater than 0.'\n        elif arg2 > len(arg1):\n            return 'Error: Second argument is greater than the number of elements in the list.'\n        else:\n            sorted_indices = sorted(range(len(arg1)), key=arg1.__getitem__)\n            return sorted_indices[:arg2]\n    else:\n        return 'Error: Invalid arguments. First argument must be a list of integers and second argument must be an integer.'""]",100000,1.69892490003258,1.729415880003944,1.8350689001381397,N/A
p3_find_n_smallest_number,prompt_6,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0:\n        return []\n    if len(arg1) < arg2:\n        pass\n        return []\n    min_heap = []\n    result = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-num, idx))\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result[::-1]']",1000,0.004018200095742941,0.004292627999093384,0.005080000031739473,N/A
p3_find_n_smallest_number,prompt_6,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0:\n        return []\n    if len(arg1) < arg2:\n        pass\n        return []\n    min_heap = []\n    result = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-num, idx))\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result[::-1]']",10000,0.03834390011616051,0.04072217400418594,0.05300169996917248,N/A
p3_find_n_smallest_number,prompt_6,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0:\n        return []\n    if len(arg1) < arg2:\n        pass\n        return []\n    min_heap = []\n    result = []\n    for idx, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, idx))\n        elif num < -min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-num, idx))\n    while min_heap:\n        result.append(heapq.heappop(min_heap)[1])\n    return result[::-1]']",100000,0.3941959999501705,0.40663302700500936,0.4757002000696957,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list length.""\n    if arg2 < 0:\n        return ""Error: \'k\' cannot be negative.""\n    if len(arg1) == 0:\n        return \'Error: The list is empty.\'\n    h = []\n    for i in range(arg2):\n        heapq.heappush(h, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -h[0][0] > arg1[i]:\n            heapq.heapreplace(h, (-arg1[i], i))\n    return [i[1] for i in h]']",1000,0.002767800120636821,0.0029166190093383192,0.0031877001747488976,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list length.""\n    if arg2 < 0:\n        return ""Error: \'k\' cannot be negative.""\n    if len(arg1) == 0:\n        return \'Error: The list is empty.\'\n    h = []\n    for i in range(arg2):\n        heapq.heappush(h, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -h[0][0] > arg1[i]:\n            heapq.heapreplace(h, (-arg1[i], i))\n    return [i[1] for i in h]']",10000,0.025874599814414978,0.0272334669996053,0.030098299961537123,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return ""Error: \'k\' is larger than the list length.""\n    if arg2 < 0:\n        return ""Error: \'k\' cannot be negative.""\n    if len(arg1) == 0:\n        return \'Error: The list is empty.\'\n    h = []\n    for i in range(arg2):\n        heapq.heappush(h, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -h[0][0] > arg1[i]:\n            heapq.heapreplace(h, (-arg1[i], i))\n    return [i[1] for i in h]']",100000,0.2609053000342101,0.2692549810069613,0.3034558000508696,N/A
p3_find_n_smallest_number,prompt_6,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for val, idx in heap]']",1000,0.002281900029629469,0.0024137650057673454,0.003077299799770117,N/A
p3_find_n_smallest_number,prompt_6,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for val, idx in heap]']",10000,0.02281960006803274,0.023974255979992448,0.029323099879547954,N/A
p3_find_n_smallest_number,prompt_6,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for val, idx in heap]']",100000,0.23228890006430447,0.23772928199265153,0.2813945999369025,N/A
p3_find_n_smallest_number,prompt_6,90,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid array or k'\n    sorted_array = sorted(arg1)\n    k_smallest_numbers = sorted_array[:arg2]\n    indexes = [arg1.index(num) for num in k_smallest_numbers]\n    return indexes""]",1000,0.004148100037127733,0.004571947993244976,0.006469200132414699,N/A
p3_find_n_smallest_number,prompt_6,90,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid array or k'\n    sorted_array = sorted(arg1)\n    k_smallest_numbers = sorted_array[:arg2]\n    indexes = [arg1.index(num) for num in k_smallest_numbers]\n    return indexes""]",10000,0.08618810004554689,0.08969160101143643,0.11303850007243454,N/A
p3_find_n_smallest_number,prompt_6,90,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Invalid array or k'\n    sorted_array = sorted(arg1)\n    k_smallest_numbers = sorted_array[:arg2]\n    indexes = [arg1.index(num) for num in k_smallest_numbers]\n    return indexes""]",100000,1.1069393998477608,1.1176438489905558,1.1747592000756413,N/A
p3_find_n_smallest_number,prompt_6,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or arg2 is None:\n        return None\n    if arg2 > len(arg1):\n        return None\n    if arg2 < 0:\n        return None\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",1000,0.0031519001349806786,0.003330305009149015,0.003671300131827593,N/A
p3_find_n_smallest_number,prompt_6,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or arg2 is None:\n        return None\n    if arg2 > len(arg1):\n        return None\n    if arg2 < 0:\n        return None\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",10000,0.029256199952214956,0.030821835987735538,0.03741849982179701,N/A
p3_find_n_smallest_number,prompt_6,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or arg2 is None:\n        return None\n    if arg2 > len(arg1):\n        return None\n    if arg2 < 0:\n        return None\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)']",100000,0.29260100005194545,0.30011101700831205,0.33747579995542765,N/A
p3_find_n_smallest_number,prompt_6,92,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""\n    The function uses the python heapq to implement a priority queue to efficiently find the k smallest\n    elements in the array.\n    \n    Parameters:\n    arg1 (List[int]): A list of integers in which to find the k smallest elements.\n    arg2 (int): The number \'k\', specifies the quantity of smallest elements to find.\n\n    Returns:\n    List[int]: Returns a list of indexes of the \'k\' smallest numbers in the list arg1.\n    """"""\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_elements]\n    return indexes']",1000,0.004660199861973524,0.004878640004899353,0.006687900051474571,N/A
p3_find_n_smallest_number,prompt_6,92,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""\n    The function uses the python heapq to implement a priority queue to efficiently find the k smallest\n    elements in the array.\n    \n    Parameters:\n    arg1 (List[int]): A list of integers in which to find the k smallest elements.\n    arg2 (int): The number \'k\', specifies the quantity of smallest elements to find.\n\n    Returns:\n    List[int]: Returns a list of indexes of the \'k\' smallest numbers in the list arg1.\n    """"""\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_elements]\n    return indexes']",10000,0.0435544999781996,0.045982652991078794,0.07130889990366995,N/A
p3_find_n_smallest_number,prompt_6,92,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""\n    The function uses the python heapq to implement a priority queue to efficiently find the k smallest\n    elements in the array.\n    \n    Parameters:\n    arg1 (List[int]): A list of integers in which to find the k smallest elements.\n    arg2 (int): The number \'k\', specifies the quantity of smallest elements to find.\n\n    Returns:\n    List[int]: Returns a list of indexes of the \'k\' smallest numbers in the list arg1.\n    """"""\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [i[0] for i in smallest_elements]\n    return indexes']",100000,0.4188583001960069,0.4307431689882651,0.5066249999217689,N/A
p3_find_n_smallest_number,prompt_6,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    index_list = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(index_list)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < index_list[0][0]:\n            heapq.heappop(index_list)\n            heapq.heappush(index_list, (arg1[i], i))\n    return [index for _, index in index_list]']",1000,0.0022670000325888395,0.0024682269897311924,0.005045400001108646,N/A
p3_find_n_smallest_number,prompt_6,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    index_list = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(index_list)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < index_list[0][0]:\n            heapq.heappop(index_list)\n            heapq.heappush(index_list, (arg1[i], i))\n    return [index for _, index in index_list]']",10000,0.022667600074782968,0.023641287002246828,0.029709999915212393,N/A
p3_find_n_smallest_number,prompt_6,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    index_list = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(index_list)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < index_list[0][0]:\n            heapq.heappop(index_list)\n            heapq.heappush(index_list, (arg1[i], i))\n    return [index for _, index in index_list]']",100000,0.22579239984042943,0.23299148400779812,0.2542854000348598,N/A
p3_find_n_smallest_number,prompt_6,94,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [i for _, i in heap]\n    return result']",1000,0.002750399988144636,0.0029838050063699484,0.0031918000895529985,N/A
p3_find_n_smallest_number,prompt_6,94,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [i for _, i in heap]\n    return result']",10000,0.02557280007749796,0.027612620999570937,0.04377199988812208,N/A
p3_find_n_smallest_number,prompt_6,94,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if len(arg1) == 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [i for _, i in heap]\n    return result']",100000,0.25389300007373095,0.2637402620073408,0.3007561999838799,N/A
p3_find_n_smallest_number,prompt_6,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    res = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    for _ in range(arg2):\n        _, idx = heapq.heappop(heap)\n        res.append(idx)\n    return res']",1000,0.007761799963191152,0.008062299005687237,0.009917600080370903,N/A
p3_find_n_smallest_number,prompt_6,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    res = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    for _ in range(arg2):\n        _, idx = heapq.heappop(heap)\n        res.append(idx)\n    return res']",10000,0.08729860000312328,0.09012368600815535,0.09726790012791753,N/A
p3_find_n_smallest_number,prompt_6,95,"['from typing import List\nimport heapq\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if not arg1 or arg2 < 1 or arg2 > len(arg1):\n        return []\n    heap = []\n    res = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    for _ in range(arg2):\n        _, idx = heapq.heappop(heap)\n        res.append(idx)\n    return res']",100000,0.9712180001661181,0.9860503879934549,1.0280707001220435,N/A
p3_find_n_smallest_number,prompt_6,96,"[""def funcImp(arg1, arg2):\n    import heapq\n    if arg2 > len(arg1):\n        return 'Arg2 is greater than the length of Arg1'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",1000,0.0031416998244822025,0.003319480982609093,0.004285600036382675,N/A
p3_find_n_smallest_number,prompt_6,96,"[""def funcImp(arg1, arg2):\n    import heapq\n    if arg2 > len(arg1):\n        return 'Arg2 is greater than the length of Arg1'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",10000,0.028885900042951107,0.03055701300268993,0.04695350001566112,N/A
p3_find_n_smallest_number,prompt_6,96,"[""def funcImp(arg1, arg2):\n    import heapq\n    if arg2 > len(arg1):\n        return 'Arg2 is greater than the length of Arg1'\n    return heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)""]",100000,0.29126790002919734,0.2986622960167006,0.3373116999864578,N/A
p3_find_n_smallest_number,prompt_6,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indices = [i[1] for i in heap]\n    return indices']",1000,0.0038705000188201666,0.004109376983251423,0.00505209993571043,N/A
p3_find_n_smallest_number,prompt_6,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indices = [i[1] for i in heap]\n    return indices']",10000,0.036204899894073606,0.038603441985324026,0.09171130019240081,N/A
p3_find_n_smallest_number,prompt_6,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    elif arg2 > len(arg1):\n        return [i for i in range(len(arg1))]\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indices = [i[1] for i in heap]\n    return indices']",100000,0.3674655999056995,0.3776227959943935,0.4738835000898689,N/A
p3_find_n_smallest_number,prompt_6,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    num_indices = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(num_indices)\n    smallest_nums = heapq.nsmallest(arg2, num_indices)\n    return [idx for num, idx in smallest_nums]']",1000,0.007125400006771088,0.007995351008139551,0.02382170013152063,N/A
p3_find_n_smallest_number,prompt_6,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    num_indices = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(num_indices)\n    smallest_nums = heapq.nsmallest(arg2, num_indices)\n    return [idx for num, idx in smallest_nums]']",10000,0.08689529984258115,0.08880913799861447,0.09254020010121167,N/A
p3_find_n_smallest_number,prompt_6,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    num_indices = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(num_indices)\n    smallest_nums = heapq.nsmallest(arg2, num_indices)\n    return [idx for num, idx in smallest_nums]']",100000,1.0208718001376837,1.0666845629969612,1.126446499954909,N/A
p3_find_n_smallest_number,prompt_6,99,"['def funcImp(arg1, arg2):\n    pass']",1000,6.9998204708099365e-06,7.454992737621069e-06,1.1399853974580765e-05,N/A
p3_find_n_smallest_number,prompt_6,99,"['def funcImp(arg1, arg2):\n    pass']",10000,6.9998204708099365e-06,7.481984794139862e-06,1.100008375942707e-05,N/A
p3_find_n_smallest_number,prompt_6,99,"['def funcImp(arg1, arg2):\n    pass']",100000,7.00005330145359e-06,7.491998840123415e-06,1.1299969628453255e-05,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if len(arg1) < arg2:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif heap and -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [i[1] for i in heap]\n    return indexes']",1000,0.0043264999985694885,0.004636557002086193,0.007413299987092614,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if len(arg1) < arg2:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif heap and -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [i[1] for i in heap]\n    return indexes']",10000,0.03929860005155206,0.04189500900916755,0.08630990004166961,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    if len(arg1) < arg2:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-arg1[i], i))\n        elif heap and -heap[0][0] > arg1[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [i[1] for i in heap]\n    return indexes']",100000,0.403104699915275,0.4151121829962358,0.4683926000725478,N/A
