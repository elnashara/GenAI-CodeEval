problem,prompt_name,code_index,code_segment,Size,Min,Average,Max,Exception
p3_find_n_smallest_number,prompt_1,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [element[0] for element in k_smallest]\n    return indexes']",1000,0.004621900035999715,0.00481607300171163,0.006284500006586313,N/A
p3_find_n_smallest_number,prompt_1,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [element[0] for element in k_smallest]\n    return indexes']",10000,0.04209270002320409,0.04472641599946656,0.0582243999815546,N/A
p3_find_n_smallest_number,prompt_1,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [element[0] for element in k_smallest]\n    return indexes']",100000,0.446520600002259,0.4759035699989181,0.5472751000197604,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",1000,0.008744199993088841,0.009291914998320862,0.011698299960698932,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",10000,0.13419860001886263,0.14607272899418602,0.15777809999417514,N/A
p3_find_n_smallest_number,prompt_1,2,"['def funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return k_smallest_indexes']",100000,2.11568410001928,2.2461022169998612,2.37776770000346,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    if k == 0:\n        return []\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indices:\n            index = arg1.index(element, index + 1)\n        indices.append(index)\n    return indices']",1000,0.0021180000039748847,0.002225299999699928,0.002871899981983006,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    if k == 0:\n        return []\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indices:\n            index = arg1.index(element, index + 1)\n        indices.append(index)\n    return indices']",10000,0.016793299990240484,0.01798632799705956,0.030992899963166565,N/A
p3_find_n_smallest_number,prompt_1,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    if k == 0:\n        return []\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indices:\n            index = arg1.index(element, index + 1)\n        indices.append(index)\n    return indices']",100000,0.16291320003801957,0.17075196400284767,0.19197990000247955,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indices[:k]\narray = [5, 12, 11, -1, 12, 15, -3]\nk = 3\npass']",1000,0.007532100018579513,0.008008340003434568,0.009368699975311756,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indices[:k]\narray = [5, 12, 11, -1, 12, 15, -3]\nk = 3\npass']",10000,0.11565199994947761,0.12109465699875727,0.14555630000540987,N/A
p3_find_n_smallest_number,prompt_1,4,"['def funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indices[:k]\narray = [5, 12, 11, -1, 12, 15, -3]\nk = 3\npass']",100000,1.6461783000268042,1.727936252001673,1.8631339999847114,N/A
p3_find_n_smallest_number,prompt_1,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers\n    :param arg2: Integer k, the number of smallest elements to find\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in k_smallest]']",1000,0.005083099997136742,0.0056268399982945996,0.009155699983239174,N/A
p3_find_n_smallest_number,prompt_1,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers\n    :param arg2: Integer k, the number of smallest elements to find\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in k_smallest]']",10000,0.05242220003856346,0.055335168997989966,0.06853910000063479,N/A
p3_find_n_smallest_number,prompt_1,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers\n    :param arg2: Integer k, the number of smallest elements to find\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in k_smallest]']",100000,0.7012040999834426,0.752500790997292,0.8436133000068367,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 == 0 or not arg1:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes\narray = [5, 1, 9, 3, 7, 6, 2, 8, 4]\nk = 3\npass']",1000,0.004576799983624369,0.004906205995939672,0.0074777000118047,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 == 0 or not arg1:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes\narray = [5, 1, 9, 3, 7, 6, 2, 8, 4]\nk = 3\npass']",10000,0.042445499973837286,0.044834687000256966,0.062779399973806,N/A
p3_find_n_smallest_number,prompt_1,6,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 == 0 or not arg1:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes\narray = [5, 1, 9, 3, 7, 6, 2, 8, 4]\nk = 3\npass']",100000,0.44291869999142364,0.4678465899982257,0.5255983999813907,N/A
p3_find_n_smallest_number,prompt_1,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        indexes.append(arg1.index(element))\n    return indexes']",1000,0.0020612000371329486,0.00219653100008145,0.0028591000009328127,N/A
p3_find_n_smallest_number,prompt_1,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        indexes.append(arg1.index(element))\n    return indexes']",10000,0.016842600016389042,0.01805726200225763,0.02260899997781962,N/A
p3_find_n_smallest_number,prompt_1,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        indexes.append(arg1.index(element))\n    return indexes']",100000,0.16251720004947856,0.17061000099638476,0.1951192999840714,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_elements = indexed_array[:arg2]\n    indexes = [index for index, _ in k_smallest_elements]\n    return indexes']",1000,0.008576499996706843,0.009364834999432787,0.01542500004870817,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_elements = indexed_array[:arg2]\n    indexes = [index for index, _ in k_smallest_elements]\n    return indexes']",10000,0.14345650002360344,0.16003633999556768,0.3346123000374064,N/A
p3_find_n_smallest_number,prompt_1,8,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_elements = indexed_array[:arg2]\n    indexes = [index for index, _ in k_smallest_elements]\n    return indexes']",100000,2.157882499974221,2.2625842190021648,2.726917899970431,N/A
p3_find_n_smallest_number,prompt_1,9,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest_elements = nsmallest(arg2, arg1)\n    indices = []\n    for elem in k_smallest_elements:\n        index = arg1.index(elem)\n        indices.append(index)\n        arg1[index] = None\n    return indices']",1000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,9,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest_elements = nsmallest(arg2, arg1)\n    indices = []\n    for elem in k_smallest_elements:\n        index = arg1.index(elem)\n        indices.append(index)\n        arg1[index] = None\n    return indices']",10000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,9,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest_elements = nsmallest(arg2, arg1)\n    indices = []\n    for elem in k_smallest_elements:\n        index = arg1.index(elem)\n        indices.append(index)\n        arg1[index] = None\n    return indices']",100000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes[:arg2]']",1000,0.004711100016720593,0.004991060995380394,0.007860600017011166,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes[:arg2]']",10000,0.04441380000207573,0.04678232600679621,0.05604300001868978,N/A
p3_find_n_smallest_number,prompt_1,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes[:arg2]']",100000,0.455558400019072,0.4843918509944342,0.5548329000012018,N/A
p3_find_n_smallest_number,prompt_1,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(len(arg1), arg2)\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indexes = []\n    for element in smallest_elements:\n        indexes.append(arg1.index(element))\n        arg1[arg1.index(element)] = None\n    return indexes']",1000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(len(arg1), arg2)\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indexes = []\n    for element in smallest_elements:\n        indexes.append(arg1.index(element))\n        arg1[arg1.index(element)] = None\n    return indexes']",10000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(len(arg1), arg2)\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indexes = []\n    for element in smallest_elements:\n        indexes.append(arg1.index(element))\n        arg1[arg1.index(element)] = None\n    return indexes']",100000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the array size'\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes""]",1000,0.005102200026158243,0.0054258579993620515,0.006588499993085861,N/A
p3_find_n_smallest_number,prompt_1,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the array size'\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes""]",10000,0.05090520001249388,0.05478806699917186,0.06705789995612577,N/A
p3_find_n_smallest_number,prompt_1,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k is larger than the array size'\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes""]",100000,0.7010227999999188,0.7430205769994064,0.8626663999748416,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_num_with_index = sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]\n    result = [index for index, value in smallest_num_with_index]\n    return result\narray = [5, 2, 9, 1, 5, 6]\nk = 3\npass']",1000,0.00856669998029247,0.009125792001141235,0.010841500014066696,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_num_with_index = sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]\n    result = [index for index, value in smallest_num_with_index]\n    return result\narray = [5, 2, 9, 1, 5, 6]\nk = 3\npass']",10000,0.14336340001318604,0.15153090200095903,0.17573950003134087,N/A
p3_find_n_smallest_number,prompt_1,13,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_num_with_index = sorted(enumerate(arg1), key=lambda x: x[1])[:arg2]\n    result = [index for index, value in smallest_num_with_index]\n    return result\narray = [5, 2, 9, 1, 5, 6]\nk = 3\npass']",100000,2.1332909999764524,2.2511061589990278,2.396460100018885,N/A
p3_find_n_smallest_number,prompt_1,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n        arg1 (list): The list of integers.\n        arg2 (int): The number of smallest elements to find.\n        \n    Returns:\n        list: The indexes of the k smallest numbers.\n    """"""\n    if arg2 > len(arg1):\n        raise ValueError(\'k cannot be greater than the number of elements in the list\')\n    k_smallest = heapq.nsmallest(arg2, ((value, idx) for idx, value in enumerate(arg1)))\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",1000,0.005881999968551099,0.006290837000124156,0.010548499994911253,N/A
p3_find_n_smallest_number,prompt_1,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n        arg1 (list): The list of integers.\n        arg2 (int): The number of smallest elements to find.\n        \n    Returns:\n        list: The indexes of the k smallest numbers.\n    """"""\n    if arg2 > len(arg1):\n        raise ValueError(\'k cannot be greater than the number of elements in the list\')\n    k_smallest = heapq.nsmallest(arg2, ((value, idx) for idx, value in enumerate(arg1)))\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",10000,0.0547808000119403,0.057388251005322674,0.07209199998760596,N/A
p3_find_n_smallest_number,prompt_1,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n        arg1 (list): The list of integers.\n        arg2 (int): The number of smallest elements to find.\n        \n    Returns:\n        list: The indexes of the k smallest numbers.\n    """"""\n    if arg2 > len(arg1):\n        raise ValueError(\'k cannot be greater than the number of elements in the list\')\n    k_smallest = heapq.nsmallest(arg2, ((value, idx) for idx, value in enumerate(arg1)))\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",100000,0.5617513000033796,0.5996470610023243,0.7847072000149637,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = list(enumerate(arg1))\n    sorted_by_value = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indices = [x[0] for x in sorted_by_value[:arg2]]\n    return k_smallest_indices\narray = [10, 3, 5, 7, 1, 2, 8]\nk = 3\npass']",1000,0.00886579998768866,0.009336375001585111,0.011273200041614473,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = list(enumerate(arg1))\n    sorted_by_value = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indices = [x[0] for x in sorted_by_value[:arg2]]\n    return k_smallest_indices\narray = [10, 3, 5, 7, 1, 2, 8]\nk = 3\npass']",10000,0.14578920003259555,0.1568502830003854,0.27378079999471083,N/A
p3_find_n_smallest_number,prompt_1,15,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = list(enumerate(arg1))\n    sorted_by_value = sorted(indexed_list, key=lambda x: x[1])\n    k_smallest_indices = [x[0] for x in sorted_by_value[:arg2]]\n    return k_smallest_indices\narray = [10, 3, 5, 7, 1, 2, 8]\nk = 3\npass']",100000,2.1948610999970697,2.3247057129984023,2.57255590002751,N/A
p3_find_n_smallest_number,prompt_1,16,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, v in enumerate(arg1) if v in k_smallest]\n    return indexes\narg1 = [10, 4, 5, 8, 6, 11, 26]\narg2 = 3\npass']",1000,0.0045853000483475626,0.005059043997316621,0.008954100019764155,N/A
p3_find_n_smallest_number,prompt_1,16,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, v in enumerate(arg1) if v in k_smallest]\n    return indexes\narg1 = [10, 4, 5, 8, 6, 11, 26]\narg2 = 3\npass']",10000,0.04404629999771714,0.04625229500117712,0.0625937000149861,N/A
p3_find_n_smallest_number,prompt_1,16,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, v in enumerate(arg1) if v in k_smallest]\n    return indexes\narg1 = [10, 4, 5, 8, 6, 11, 26]\narg2 = 3\npass']",100000,0.4537752000032924,0.4801384919974953,0.548694199998863,N/A
p3_find_n_smallest_number,prompt_1,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        while index in indexes:\n            index = arg1.index(num, index + 1)\n        indexes.append(index)\n    return indexes']",1000,0.002105899970047176,0.0022770129976561293,0.003923699958249927,N/A
p3_find_n_smallest_number,prompt_1,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        while index in indexes:\n            index = arg1.index(num, index + 1)\n        indexes.append(index)\n    return indexes']",10000,0.01702680002199486,0.017880750002805142,0.022442400048021227,N/A
p3_find_n_smallest_number,prompt_1,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        while index in indexes:\n            index = arg1.index(num, index + 1)\n        indexes.append(index)\n    return indexes']",100000,0.16286849998869002,0.17260573499719611,0.20535040000686422,N/A
p3_find_n_smallest_number,prompt_1,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",1000,0.0077337000402621925,0.008157406999962404,0.013849799986928701,N/A
p3_find_n_smallest_number,prompt_1,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",10000,0.08717329998034984,0.09195423499855679,0.11046079994412139,N/A
p3_find_n_smallest_number,prompt_1,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",100000,0.9991845000186004,1.0346858050004812,1.1602008999907412,N/A
p3_find_n_smallest_number,prompt_1,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    smallest_indexes = [idx for val, idx in smallest_elements]\n    return smallest_indexes']",1000,0.005770299991127104,0.006261412007152103,0.010184800019487739,N/A
p3_find_n_smallest_number,prompt_1,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    smallest_indexes = [idx for val, idx in smallest_elements]\n    return smallest_indexes']",10000,0.05478130001574755,0.057662926000193696,0.07142100000055507,N/A
p3_find_n_smallest_number,prompt_1,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    smallest_indexes = [idx for val, idx in smallest_elements]\n    return smallest_indexes']",100000,0.55730179999955,0.5898037769983057,0.6856538999709301,N/A
p3_find_n_smallest_number,prompt_1,20,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    indexed_array = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes""]",1000,0.005157400039024651,0.005562381001655012,0.006710499990731478,N/A
p3_find_n_smallest_number,prompt_1,20,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    indexed_array = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes""]",10000,0.05366540001705289,0.055956882996833886,0.06814829999348149,N/A
p3_find_n_smallest_number,prompt_1,20,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    indexed_array = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes""]",100000,0.7003378999652341,0.7569148889975622,0.8265790000441484,N/A
p3_find_n_smallest_number,prompt_1,21,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    k_smallest_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_k_smallest = [index for index, _ in k_smallest_with_indices]\n    return indices_of_k_smallest""]",1000,0.004578899999614805,0.0049540049984352665,0.008649699972011149,N/A
p3_find_n_smallest_number,prompt_1,21,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    k_smallest_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_k_smallest = [index for index, _ in k_smallest_with_indices]\n    return indices_of_k_smallest""]",10000,0.0419720999780111,0.04428958799748216,0.052581400028429925,N/A
p3_find_n_smallest_number,prompt_1,21,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    k_smallest_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_k_smallest = [index for index, _ in k_smallest_with_indices]\n    return indices_of_k_smallest""]",100000,0.4447394000017084,0.47296496300376023,0.5578206999925897,N/A
p3_find_n_smallest_number,prompt_1,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        idx = [index for index, value in enumerate(arg1) if value == element]\n        indexes.extend(idx)\n        if len(indexes) >= arg2:\n            break\n    return indexes[:arg2]']",1000,0.010004799987655133,0.010559825998498126,0.014290299965068698,N/A
p3_find_n_smallest_number,prompt_1,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        idx = [index for index, value in enumerate(arg1) if value == element]\n        indexes.extend(idx)\n        if len(indexes) >= arg2:\n            break\n    return indexes[:arg2]']",10000,0.1007559000281617,0.10547086000151466,0.13837910001166165,N/A
p3_find_n_smallest_number,prompt_1,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        idx = [index for index, value in enumerate(arg1) if value == element]\n        indexes.extend(idx)\n        if len(indexes) >= arg2:\n            break\n    return indexes[:arg2]']",100000,1.041372700012289,1.0929387560015311,1.1934399000019766,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest_elements]\n    return indexes\narg1 = [5, 2, 9, 1, 5, 6]\narg2 = 3\npass']",1000,0.004523399984464049,0.004789459996973164,0.005757400009315461,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest_elements]\n    return indexes\narg1 = [5, 2, 9, 1, 5, 6]\narg2 = 3\npass']",10000,0.04235479998169467,0.04445607000146992,0.05501539999386296,N/A
p3_find_n_smallest_number,prompt_1,23,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [x[0] for x in smallest_elements]\n    return indexes\narg1 = [5, 2, 9, 1, 5, 6]\narg2 = 3\npass']",100000,0.44961750000948086,0.47223272600618654,0.5206021000049077,N/A
p3_find_n_smallest_number,prompt_1,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indices:\n            index = arg1.index(element, index + 1)\n        indices.append(index)\n    return indices']",1000,0.0020400999928824604,0.002196402996778488,0.003159100015182048,N/A
p3_find_n_smallest_number,prompt_1,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indices:\n            index = arg1.index(element, index + 1)\n        indices.append(index)\n    return indices']",10000,0.01678679999895394,0.018496192999882623,0.029425699962303042,N/A
p3_find_n_smallest_number,prompt_1,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indices:\n            index = arg1.index(element, index + 1)\n        indices.append(index)\n    return indices']",100000,0.16130570002133027,0.17149864800099748,0.21184649999486282,N/A
p3_find_n_smallest_number,prompt_1,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes']",1000,0.0045903000282123685,0.004861131999641657,0.006023399997502565,N/A
p3_find_n_smallest_number,prompt_1,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes']",10000,0.04434200003743172,0.04679912600200623,0.06238940003095195,N/A
p3_find_n_smallest_number,prompt_1,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes']",100000,0.4563027000403963,0.4852209300006507,0.5582333000493236,N/A
p3_find_n_smallest_number,prompt_1,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest_elements = [element[0] for element in smallest_elements_with_indices]\n    return indices_of_smallest_elements']",1000,0.004387900000438094,0.004751128997886553,0.0058797000092454255,N/A
p3_find_n_smallest_number,prompt_1,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest_elements = [element[0] for element in smallest_elements_with_indices]\n    return indices_of_smallest_elements']",10000,0.04160810000030324,0.044380446001305245,0.06127880001440644,N/A
p3_find_n_smallest_number,prompt_1,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest_elements = [element[0] for element in smallest_elements_with_indices]\n    return indices_of_smallest_elements']",100000,0.4456826000241563,0.47300509800203144,0.555512799997814,N/A
p3_find_n_smallest_number,prompt_1,27,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    result = []\n    for num in k_smallest_elements:\n        index = arg1.index(num)\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",1000,0.00108739995630458,0.0013346859987359494,0.0047011999995447695,N/A
p3_find_n_smallest_number,prompt_1,27,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    result = []\n    for num in k_smallest_elements:\n        index = arg1.index(num)\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",10000,0.010339699976611882,0.017273828998440877,0.05140130000654608,N/A
p3_find_n_smallest_number,prompt_1,27,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    result = []\n    for num in k_smallest_elements:\n        index = arg1.index(num)\n        result.append(index)\n        arg1[index] = float('inf')\n    return result""]",100000,0.2300927999895066,0.44521838800166735,0.6755122999893501,N/A
p3_find_n_smallest_number,prompt_1,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indices']",1000,0.005051500047557056,0.0053903580014593895,0.006048400013241917,N/A
p3_find_n_smallest_number,prompt_1,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indices']",10000,0.05165460001444444,0.05464786400261801,0.0785658999811858,N/A
p3_find_n_smallest_number,prompt_1,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indices']",100000,0.7035253000212833,0.7530579449987271,0.8272415999672376,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = sorted((index for index, value in k_smallest))\n    return indexes']",1000,0.004655400000046939,0.004915856000152417,0.008312100020702928,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = sorted((index for index, value in k_smallest))\n    return indexes']",10000,0.0415008999989368,0.04425047000404447,0.05323689995566383,N/A
p3_find_n_smallest_number,prompt_1,29,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = sorted((index for index, value in k_smallest))\n    return indexes']",100000,0.44806680001784116,0.48979528099589514,0.824723899946548,N/A
p3_find_n_smallest_number,prompt_1,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indices.append(index)\n    return indices']",1000,0.002107699983753264,0.0022119010012829677,0.0031949999975040555,N/A
p3_find_n_smallest_number,prompt_1,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indices.append(index)\n    return indices']",10000,0.017015099991112947,0.018032527997274884,0.02580959995975718,N/A
p3_find_n_smallest_number,prompt_1,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indices.append(index)\n    return indices']",100000,0.16219360003015026,0.1727801909984555,0.2886808000039309,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return sorted(smallest_indexes)\narg1 = [4, 2, 6, 1, 9, 3]\narg2 = 3\npass']",1000,0.008496500027831644,0.009681417003157548,0.026004499988630414,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return sorted(smallest_indexes)\narg1 = [4, 2, 6, 1, 9, 3]\narg2 = 3\npass']",10000,0.14307600003667176,0.14896666900080163,0.16051319998223335,N/A
p3_find_n_smallest_number,prompt_1,31,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return sorted(smallest_indexes)\narg1 = [4, 2, 6, 1, 9, 3]\narg2 = 3\npass']",100000,2.137863499985542,2.266421430000919,2.6865765000111423,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort()\n    indexes_of_k_smallest = [indexed_array[i][1] for i in range(arg2)]\n    return indexes_of_k_smallest\narg1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\narg2 = 3\npass']",1000,0.01193430001148954,0.01254579000058584,0.017061599995940924,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort()\n    indexes_of_k_smallest = [indexed_array[i][1] for i in range(arg2)]\n    return indexes_of_k_smallest\narg1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\narg2 = 3\npass']",10000,0.17840680002700537,0.19388079999480395,0.24531059997389093,N/A
p3_find_n_smallest_number,prompt_1,32,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort()\n    indexes_of_k_smallest = [indexed_array[i][1] for i in range(arg2)]\n    return indexes_of_k_smallest\narg1 = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\narg2 = 3\npass']",100000,2.8484048999962397,3.066562835999648,3.2873519000131637,N/A
p3_find_n_smallest_number,prompt_1,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smalls = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smalls]\n    return indexes']",1000,0.004472500004339963,0.004752116000745445,0.005493099975865334,N/A
p3_find_n_smallest_number,prompt_1,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smalls = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smalls]\n    return indexes']",10000,0.0419353999895975,0.04431767299713101,0.05580170004395768,N/A
p3_find_n_smallest_number,prompt_1,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smalls = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smalls]\n    return indexes']",100000,0.44501980004133657,0.4754031980037689,0.575431099976413,N/A
p3_find_n_smallest_number,prompt_1,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in the unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted list of integers.\n    arg2 (int): The number of smallest elements to find the indexes for.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the list.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'arg2 should be an integer between 1 and the length of arg1\')\n    indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return indexes']",1000,0.003222699975594878,0.003329206995549612,0.003980799985583872,N/A
p3_find_n_smallest_number,prompt_1,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in the unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted list of integers.\n    arg2 (int): The number of smallest elements to find the indexes for.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the list.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'arg2 should be an integer between 1 and the length of arg1\')\n    indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return indexes']",10000,0.028456299973186105,0.0306985900021391,0.05879539996385574,N/A
p3_find_n_smallest_number,prompt_1,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in the unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted list of integers.\n    arg2 (int): The number of smallest elements to find the indexes for.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the list.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'arg2 should be an integer between 1 and the length of arg1\')\n    indexes = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return indexes']",100000,0.29426080000121146,0.310568231997313,0.37006689998088405,N/A
p3_find_n_smallest_number,prompt_1,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        arg1[index] = None\n        indexes.append(index)\n    return indexes']",1000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        arg1[index] = None\n        indexes.append(index)\n    return indexes']",10000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        arg1[index] = None\n        indexes.append(index)\n    return indexes']",100000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_1,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, ((num, idx) for idx, num in enumerate(arg1)))\n    indices = [idx for num, idx in k_smallest]\n    return indices']",1000,0.005937299982178956,0.006157546999747865,0.007465500035323203,N/A
p3_find_n_smallest_number,prompt_1,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, ((num, idx) for idx, num in enumerate(arg1)))\n    indices = [idx for num, idx in k_smallest]\n    return indices']",10000,0.055229199992027134,0.05700855300063267,0.06890539999585599,N/A
p3_find_n_smallest_number,prompt_1,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, ((num, idx) for idx, num in enumerate(arg1)))\n    indices = [idx for num, idx in k_smallest]\n    return indices']",100000,0.5506729999906383,0.5865872939978726,0.6587584000080824,N/A
p3_find_n_smallest_number,prompt_1,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    indexes = [x[1] for x in k_smallest]\n    return indexes']",1000,0.0052609999547712505,0.005508281001239084,0.007366099976934493,N/A
p3_find_n_smallest_number,prompt_1,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    indexes = [x[1] for x in k_smallest]\n    return indexes']",10000,0.05274640000425279,0.05468158300209325,0.05968509998638183,N/A
p3_find_n_smallest_number,prompt_1,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    indexes = [x[1] for x in k_smallest]\n    return indexes']",100000,0.7062717999797314,0.743605240000179,0.7992257000296377,N/A
p3_find_n_smallest_number,prompt_1,38,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1.')\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    smallest_indexes = [index for _, index in sorted_list[:arg2]]\n    return smallest_indexes""]",1000,0.009986400022171438,0.010736328002531081,0.013944600010290742,N/A
p3_find_n_smallest_number,prompt_1,38,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1.')\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    smallest_indexes = [index for _, index in sorted_list[:arg2]]\n    return smallest_indexes""]",10000,0.15500389999942854,0.16126246199884917,0.1798061999725178,N/A
p3_find_n_smallest_number,prompt_1,38,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1.')\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    sorted_list = sorted(indexed_list, key=lambda x: x[0])\n    smallest_indexes = [index for _, index in sorted_list[:arg2]]\n    return smallest_indexes""]",100000,2.331374000001233,2.4552042730001267,2.646241899987217,N/A
p3_find_n_smallest_number,prompt_1,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indices']",1000,0.004607399983797222,0.004991459003649652,0.00835770001867786,N/A
p3_find_n_smallest_number,prompt_1,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indices']",10000,0.04411010001786053,0.04628735100151971,0.054334099986590445,N/A
p3_find_n_smallest_number,prompt_1,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indices']",100000,0.45764899998903275,0.481933956000139,0.6410222999984398,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        raise ValueError('The length of the array should be at least k')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    sorted_indexed_array = sorted(indexed_array, key=lambda x: x[0])\n    indexes_of_k_smallest = [index for _, index in sorted_indexed_array[:arg2]]\n    return indexes_of_k_smallest""]",1000,0.00973719998728484,0.010517919003614224,0.012437500001396984,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        raise ValueError('The length of the array should be at least k')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    sorted_indexed_array = sorted(indexed_array, key=lambda x: x[0])\n    indexes_of_k_smallest = [index for _, index in sorted_indexed_array[:arg2]]\n    return indexes_of_k_smallest""]",10000,0.15653709997422993,0.16860633899923413,0.18492029997287318,N/A
p3_find_n_smallest_number,prompt_1,40,"[""def funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        raise ValueError('The length of the array should be at least k')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    sorted_indexed_array = sorted(indexed_array, key=lambda x: x[0])\n    indexes_of_k_smallest = [index for _, index in sorted_indexed_array[:arg2]]\n    return indexes_of_k_smallest""]",100000,2.3180103999911807,2.4496503610024227,2.602118499984499,N/A
p3_find_n_smallest_number,prompt_1,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in min_elements]\n    return indexes']",1000,0.004587900009937584,0.0047571799991419535,0.0058658000198192894,N/A
p3_find_n_smallest_number,prompt_1,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in min_elements]\n    return indexes']",10000,0.04214580002008006,0.04419761699973605,0.062416200002189726,N/A
p3_find_n_smallest_number,prompt_1,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in min_elements]\n    return indexes']",100000,0.4429875000496395,0.4681020830053603,0.5318971000378951,N/A
p3_find_n_smallest_number,prompt_1,42,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the number of elements in the array')\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[0])\n    result = [indexed_list[i][1] for i in range(arg2)]\n    return result\narr = [5, 3, 1, 2, 4]\nk = 3\npass""]",1000,0.009670699946582317,0.010286310001974925,0.013044500024989247,N/A
p3_find_n_smallest_number,prompt_1,42,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the number of elements in the array')\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[0])\n    result = [indexed_list[i][1] for i in range(arg2)]\n    return result\narr = [5, 3, 1, 2, 4]\nk = 3\npass""]",10000,0.15317249996587634,0.15999726999667474,0.18915789999300614,N/A
p3_find_n_smallest_number,prompt_1,42,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the number of elements in the array')\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[0])\n    result = [indexed_list[i][1] for i in range(arg2)]\n    return result\narr = [5, 3, 1, 2, 4]\nk = 3\npass""]",100000,2.279795699985698,2.383824053002172,2.519450699968729,N/A
p3_find_n_smallest_number,prompt_1,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, _ in k_smallest]\n    return indexes']",1000,0.0044309000368230045,0.0051422790030483155,0.009162600035779178,N/A
p3_find_n_smallest_number,prompt_1,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, _ in k_smallest]\n    return indexes']",10000,0.04185400001006201,0.04417334299942013,0.058430800039786845,N/A
p3_find_n_smallest_number,prompt_1,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, _ in k_smallest]\n    return indexes']",100000,0.44583799998508766,0.4727828829997452,0.5763594000018202,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = list(enumerate(arg1))\n    indexed_list.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_list[i][0] for i in range(arg2)]\n    return smallest_indexes\narr = [10, 4, 3, 2, 7, 6, 11]\nk = 3\npass']",1000,0.008696799981407821,0.009231200999347494,0.013389600033406168,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = list(enumerate(arg1))\n    indexed_list.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_list[i][0] for i in range(arg2)]\n    return smallest_indexes\narr = [10, 4, 3, 2, 7, 6, 11]\nk = 3\npass']",10000,0.14251390000572428,0.15739115200238302,0.3600114000146277,N/A
p3_find_n_smallest_number,prompt_1,44,"['def funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = list(enumerate(arg1))\n    indexed_list.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_list[i][0] for i in range(arg2)]\n    return smallest_indexes\narr = [10, 4, 3, 2, 7, 6, 11]\nk = 3\npass']",100000,2.1831573999952525,2.260716492001084,2.7450588999781758,N/A
p3_find_n_smallest_number,prompt_1,45,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",1000,0.004688600020017475,0.0050179479998769235,0.0069617999834008515,N/A
p3_find_n_smallest_number,prompt_1,45,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",10000,0.044112799980212,0.046743668001727204,0.058967099990695715,N/A
p3_find_n_smallest_number,prompt_1,45,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes""]",100000,0.4564792000455782,0.48344438000116496,0.6841688999556936,N/A
p3_find_n_smallest_number,prompt_1,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, _ in smallest_elements]\n    return indexes']",1000,0.004455999995116144,0.004798742998973466,0.009110200044233352,N/A
p3_find_n_smallest_number,prompt_1,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, _ in smallest_elements]\n    return indexes']",10000,0.04174680000869557,0.04386387699923944,0.050154500000644475,N/A
p3_find_n_smallest_number,prompt_1,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, _ in smallest_elements]\n    return indexes']",100000,0.4481482000555843,0.4724073259992292,0.5554326000274159,N/A
p3_find_n_smallest_number,prompt_1,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arg1, key=lambda x: x[0])\n    return [item[1] for item in k_smallest]']",1000,0.006423400016501546,0.006836862003547139,0.00971040001604706,N/A
p3_find_n_smallest_number,prompt_1,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arg1, key=lambda x: x[0])\n    return [item[1] for item in k_smallest]']",10000,0.06577250000555068,0.06871170200232882,0.09633749997010455,N/A
p3_find_n_smallest_number,prompt_1,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arg1, key=lambda x: x[0])\n    return [item[1] for item in k_smallest]']",100000,0.8035923999850638,0.8491795239999191,0.9105086000054143,N/A
p3_find_n_smallest_number,prompt_1,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in k_smallest_nums]\n    return indexes']",1000,0.002060100028757006,0.0021885669993935153,0.0033322000526823103,N/A
p3_find_n_smallest_number,prompt_1,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in k_smallest_nums]\n    return indexes']",10000,0.01709169999230653,0.017947161001502537,0.022226699977181852,N/A
p3_find_n_smallest_number,prompt_1,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_nums = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in k_smallest_nums]\n    return indexes']",100000,0.1597419999889098,0.17136315499723423,0.21092230000067502,N/A
p3_find_n_smallest_number,prompt_1,49,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the list'\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    result = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in result:\n            index = arg1.index(element, index + 1)\n        result.append(index)\n    return result""]",1000,0.002071700000669807,0.0021825229993555693,0.0024970000376924872,N/A
p3_find_n_smallest_number,prompt_1,49,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the list'\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    result = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in result:\n            index = arg1.index(element, index + 1)\n        result.append(index)\n    return result""]",10000,0.017173499974887818,0.0178932070027804,0.020266000006813556,N/A
p3_find_n_smallest_number,prompt_1,49,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the list'\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    result = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in result:\n            index = arg1.index(element, index + 1)\n        result.append(index)\n    return result""]",100000,0.1633070000098087,0.1705274800019106,0.2158565999707207,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements]\n    return smallest_indices\narg1 = [4, 1, 3, 2, 5]\narg2 = 3\npass']",1000,0.004512200015597045,0.004864357997430489,0.007158899970818311,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements]\n    return smallest_indices\narg1 = [4, 1, 3, 2, 5]\narg2 = 3\npass']",10000,0.04283859999850392,0.04433500199986156,0.05145029997220263,N/A
p3_find_n_smallest_number,prompt_1,50,"['def funcImp(arg1, arg2):\n    import heapq\n    if arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements]\n    return smallest_indices\narg1 = [4, 1, 3, 2, 5]\narg2 = 3\npass']",100000,0.45228500000666827,0.4836852399969939,0.7048623000155203,N/A
p3_find_n_smallest_number,prompt_1,51,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k')\n    indexed_array = list(enumerate(arg1))\n    sorted_indexed_array = sorted(indexed_array, key=lambda x: x[1])\n    k_smallest_indexes = [pair[0] for pair in sorted_indexed_array[:arg2]]\n    return k_smallest_indexes""]",1000,0.008768700005020946,0.009524883997510187,0.013133500004187226,N/A
p3_find_n_smallest_number,prompt_1,51,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k')\n    indexed_array = list(enumerate(arg1))\n    sorted_indexed_array = sorted(indexed_array, key=lambda x: x[1])\n    k_smallest_indexes = [pair[0] for pair in sorted_indexed_array[:arg2]]\n    return k_smallest_indexes""]",10000,0.14415200002258644,0.15107003100332805,0.17635699996026233,N/A
p3_find_n_smallest_number,prompt_1,51,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k')\n    indexed_array = list(enumerate(arg1))\n    sorted_indexed_array = sorted(indexed_array, key=lambda x: x[1])\n    k_smallest_indexes = [pair[0] for pair in sorted_indexed_array[:arg2]]\n    return k_smallest_indexes""]",100000,2.2084840000024997,2.333449130000663,2.6301367999985814,N/A
p3_find_n_smallest_number,prompt_1,52,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k')\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.001136799983214587,0.0013277150003705173,0.004745799989905208,N/A
p3_find_n_smallest_number,prompt_1,52,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k')\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.010409299982711673,0.017482985999085942,0.052121799963060766,N/A
p3_find_n_smallest_number,prompt_1,52,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value of k')\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.22148539999034256,0.44495814500085545,0.6776548000052571,N/A
p3_find_n_smallest_number,prompt_1,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=lambda x: arg1[x])\n    return k_smallest_indices']",1000,0.004022300010547042,0.004366217995411716,0.006831999984569848,N/A
p3_find_n_smallest_number,prompt_1,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=lambda x: arg1[x])\n    return k_smallest_indices']",10000,0.03802869998617098,0.03957099700171966,0.04747689998475835,N/A
p3_find_n_smallest_number,prompt_1,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=lambda x: arg1[x])\n    return k_smallest_indices']",100000,0.38334459997713566,0.4039417290006531,0.45482559996889904,N/A
p3_find_n_smallest_number,prompt_1,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List of integers (unsorted array)\n    :param arg2: Integer (number of smallest elements to find)\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.004498699971009046,0.004826093001756817,0.006130599998869002,N/A
p3_find_n_smallest_number,prompt_1,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List of integers (unsorted array)\n    :param arg2: Integer (number of smallest elements to find)\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.042648799950256944,0.0442137360048946,0.049653800029773265,N/A
p3_find_n_smallest_number,prompt_1,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List of integers (unsorted array)\n    :param arg2: Integer (number of smallest elements to find)\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.4422107000136748,0.4745079070003703,0.5616147000109777,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    result = [indexed_array[i][0] for i in range(arg2)]\n    return result\narray = [5, 20, 3, 2, 50, 6, 7]\nk = 3\npass']",1000,0.008561900001950562,0.009193875002092683,0.015759300033096224,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    result = [indexed_array[i][0] for i in range(arg2)]\n    return result\narray = [5, 20, 3, 2, 50, 6, 7]\nk = 3\npass']",10000,0.14180450001731515,0.15124707099748774,0.18046040000626817,N/A
p3_find_n_smallest_number,prompt_1,55,"['def funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    result = [indexed_array[i][0] for i in range(arg2)]\n    return result\narray = [5, 20, 3, 2, 50, 6, 7]\nk = 3\npass']",100000,2.1199020999483764,2.23265174400236,2.310536000004504,N/A
p3_find_n_smallest_number,prompt_1,56,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.001111100020352751,0.0013042039982974528,0.004822999995667487,N/A
p3_find_n_smallest_number,prompt_1,56,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.010285799973644316,0.017222965004038998,0.051613899995572865,N/A
p3_find_n_smallest_number,prompt_1,56,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.21917799999937415,0.44729187500255646,0.6629929000046104,N/A
p3_find_n_smallest_number,prompt_1,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.004428299958817661,0.004749764001462609,0.005678399989847094,N/A
p3_find_n_smallest_number,prompt_1,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.04150699998717755,0.04394849800155498,0.05081480002263561,N/A
p3_find_n_smallest_number,prompt_1,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.4411084000021219,0.4706379969982663,0.6107838000170887,N/A
p3_find_n_smallest_number,prompt_1,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.004467800026759505,0.004824229998630472,0.008016599982511252,N/A
p3_find_n_smallest_number,prompt_1,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.04142840002896264,0.043817612001439556,0.04757120000431314,N/A
p3_find_n_smallest_number,prompt_1,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.4364282000460662,0.4695052710000891,0.5701489999773912,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    indexed_list = [(index, value) for index, value in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_list[i][0] for i in range(arg2)]\n    return smallest_indexes\npass']",1000,0.009647500002756715,0.010354182999581098,0.017255699960514903,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    indexed_list = [(index, value) for index, value in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_list[i][0] for i in range(arg2)]\n    return smallest_indexes\npass']",10000,0.15580750000663102,0.16135819999908563,0.180197500041686,N/A
p3_find_n_smallest_number,prompt_1,59,"['def funcImp(arg1, arg2):\n    indexed_list = [(index, value) for index, value in enumerate(arg1)]\n    indexed_list.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_list[i][0] for i in range(arg2)]\n    return smallest_indexes\npass']",100000,2.2762614999664947,2.3839816620002967,2.577852299960796,N/A
p3_find_n_smallest_number,prompt_1,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(heap)\n        smallest_indexes.append(idx)\n    return sorted(smallest_indexes)']",1000,0.007580599980428815,0.008217016998678446,0.017070400004740804,N/A
p3_find_n_smallest_number,prompt_1,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(heap)\n        smallest_indexes.append(idx)\n    return sorted(smallest_indexes)']",10000,0.08593280002241954,0.08884035199647769,0.0947232999606058,N/A
p3_find_n_smallest_number,prompt_1,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(heap)\n        smallest_indexes.append(idx)\n    return sorted(smallest_indexes)']",100000,0.9764759999816306,1.0657762440026273,1.1992972000152804,N/A
p3_find_n_smallest_number,prompt_1,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        k_indexes.append(index)\n    return k_indexes']",1000,0.0020966000156477094,0.002187461000867188,0.0025300999986939132,N/A
p3_find_n_smallest_number,prompt_1,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        k_indexes.append(index)\n    return k_indexes']",10000,0.016959400032646954,0.018293392003397458,0.028420699993148446,N/A
p3_find_n_smallest_number,prompt_1,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        k_indexes.append(index)\n    return k_indexes']",100000,0.16089300002204254,0.17427389900083654,0.23439500003587455,N/A
p3_find_n_smallest_number,prompt_1,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])\n    indexes = [idx for _, idx in smallest_k]\n    return indexes']",1000,0.008519100025296211,0.009097022003261372,0.012044300034176558,N/A
p3_find_n_smallest_number,prompt_1,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])\n    indexes = [idx for _, idx in smallest_k]\n    return indexes']",10000,0.09869249997427687,0.10268150700139814,0.12313540000468493,N/A
p3_find_n_smallest_number,prompt_1,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])\n    indexes = [idx for _, idx in smallest_k]\n    return indexes']",100000,1.1740056999842636,1.2874422520032385,1.8342334000044502,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_k_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_k_indexes\narray = [5, 3, 1, 2, 4]\nk = 3\npass']",1000,0.009873099974356592,0.010839018998085521,0.020205500011797994,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_k_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_k_indexes\narray = [5, 3, 1, 2, 4]\nk = 3\npass']",10000,0.15090469998540357,0.1628764489979949,0.21154789999127388,N/A
p3_find_n_smallest_number,prompt_1,63,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_k_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_k_indexes\narray = [5, 3, 1, 2, 4]\nk = 3\npass']",100000,2.2745151999988593,2.390001798996236,2.9461623999523,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return sorted(smallest_indexes)\narray = [3, 1, 5, 2, 4]\nk = 3\npass']",1000,0.009503900015261024,0.010563786996644921,0.022742199944332242,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return sorted(smallest_indexes)\narray = [3, 1, 5, 2, 4]\nk = 3\npass']",10000,0.15274599997792393,0.15880712300131564,0.17030030000023544,N/A
p3_find_n_smallest_number,prompt_1,64,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return sorted(smallest_indexes)\narray = [3, 1, 5, 2, 4]\nk = 3\npass']",100000,2.2729710999992676,2.409942874998087,3.2171825999976136,N/A
p3_find_n_smallest_number,prompt_1,65,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices_of_k_smallest = []\n    for number in k_smallest:\n        index = arg1.index(number)\n        indices_of_k_smallest.append(index)\n        arg1[index] = float('inf')\n    return indices_of_k_smallest""]",1000,0.0011642000172287226,0.0013137899991124869,0.004797499976120889,N/A
p3_find_n_smallest_number,prompt_1,65,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices_of_k_smallest = []\n    for number in k_smallest:\n        index = arg1.index(number)\n        indices_of_k_smallest.append(index)\n        arg1[index] = float('inf')\n    return indices_of_k_smallest""]",10000,0.010328000003937632,0.017423936001141557,0.05659490003017709,N/A
p3_find_n_smallest_number,prompt_1,65,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices_of_k_smallest = []\n    for number in k_smallest:\n        index = arg1.index(number)\n        indices_of_k_smallest.append(index)\n        arg1[index] = float('inf')\n    return indices_of_k_smallest""]",100000,0.22758030000841245,0.4478038050001487,0.653321500052698,N/A
p3_find_n_smallest_number,prompt_1,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004601599997840822,0.005641765997861512,0.021933999960310757,N/A
p3_find_n_smallest_number,prompt_1,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.04189200000837445,0.04515894999844022,0.09389020001981407,N/A
p3_find_n_smallest_number,prompt_1,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.44858069997280836,0.4697950649994891,0.5409049000008963,N/A
p3_find_n_smallest_number,prompt_1,67,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.004483600030653179,0.004906887002289295,0.007723500020802021,N/A
p3_find_n_smallest_number,prompt_1,67,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.04212619998725131,0.04491739499964751,0.06057570001576096,N/A
p3_find_n_smallest_number,prompt_1,67,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.4475518999970518,0.4723535040009301,0.5251546999788843,N/A
p3_find_n_smallest_number,prompt_1,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest]\n    return indexes']",1000,0.004585299990139902,0.004749454001430422,0.006261900009121746,N/A
p3_find_n_smallest_number,prompt_1,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest]\n    return indexes']",10000,0.04158760001882911,0.04370259199989959,0.05384159996174276,N/A
p3_find_n_smallest_number,prompt_1,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest]\n    return indexes']",100000,0.44384660001378506,0.47452438999840524,0.5510953000048175,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = list(enumerate(arg1))\n    indexed_arr.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_arr[i][0] for i in range(arg2)]\n    return smallest_indexes']",1000,0.008401200000662357,0.009371812000172213,0.016602000046987087,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = list(enumerate(arg1))\n    indexed_arr.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_arr[i][0] for i in range(arg2)]\n    return smallest_indexes']",10000,0.13963549997424707,0.14835955799731892,0.17778499994892627,N/A
p3_find_n_smallest_number,prompt_1,69,"['def funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = list(enumerate(arg1))\n    indexed_arr.sort(key=lambda x: x[1])\n    smallest_indexes = [indexed_arr[i][0] for i in range(arg2)]\n    return smallest_indexes']",100000,2.1448271999834105,2.2465191989997404,2.4724736000061966,N/A
p3_find_n_smallest_number,prompt_1,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List of integers\n    :param arg2: Number of smallest elements to find\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[idx], idx))\n    return [idx for value, idx in heap]']",1000,0.002464100020006299,0.0027039729990065097,0.003961700014770031,N/A
p3_find_n_smallest_number,prompt_1,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List of integers\n    :param arg2: Number of smallest elements to find\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[idx], idx))\n    return [idx for value, idx in heap]']",10000,0.02351329999510199,0.025089223999530078,0.033486299973446876,N/A
p3_find_n_smallest_number,prompt_1,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List of integers\n    :param arg2: Number of smallest elements to find\n    :return: List of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[idx], idx))\n    return [idx for value, idx in heap]']",100000,0.28404420003062114,0.2963398119993508,0.3288587999995798,N/A
p3_find_n_smallest_number,prompt_1,71,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the list')\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in k_smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    for i in indexes:\n        arg1[i] = k_smallest_elements.pop(0)\n    return indexes""]",1000,0.002143199963029474,0.0022891360020730646,0.003073600004427135,N/A
p3_find_n_smallest_number,prompt_1,71,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the list')\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in k_smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    for i in indexes:\n        arg1[i] = k_smallest_elements.pop(0)\n    return indexes""]",10000,0.017267099989112467,0.018210674001020378,0.02484490000642836,N/A
p3_find_n_smallest_number,prompt_1,71,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the list')\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in k_smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    for i in indexes:\n        arg1[i] = k_smallest_elements.pop(0)\n    return indexes""]",100000,0.16304820001823828,0.17174486900155897,0.22493480000412092,N/A
p3_find_n_smallest_number,prompt_1,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest]\n    return indexes']",1000,0.0045128000201657414,0.004800253002322279,0.006028500036336482,N/A
p3_find_n_smallest_number,prompt_1,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest]\n    return indexes']",10000,0.0423830000218004,0.04438589499972295,0.053627600020263344,N/A
p3_find_n_smallest_number,prompt_1,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest]\n    return indexes']",100000,0.44507469999371096,0.47342634500120767,0.5352114000124857,N/A
p3_find_n_smallest_number,prompt_1,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    element_counts = {element: k_smallest_elements.count(element) for element in k_smallest_elements}\n    indices = []\n    for idx, value in enumerate(arg1):\n        if value in element_counts and element_counts[value] > 0:\n            indices.append(idx)\n            element_counts[value] -= 1\n    return indices']",1000,0.003973099985159934,0.00432229699974414,0.006821200018748641,N/A
p3_find_n_smallest_number,prompt_1,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    element_counts = {element: k_smallest_elements.count(element) for element in k_smallest_elements}\n    indices = []\n    for idx, value in enumerate(arg1):\n        if value in element_counts and element_counts[value] > 0:\n            indices.append(idx)\n            element_counts[value] -= 1\n    return indices']",10000,0.041880999982822686,0.04434368099900894,0.05496929999208078,N/A
p3_find_n_smallest_number,prompt_1,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    element_counts = {element: k_smallest_elements.count(element) for element in k_smallest_elements}\n    indices = []\n    for idx, value in enumerate(arg1):\n        if value in element_counts and element_counts[value] > 0:\n            indices.append(idx)\n            element_counts[value] -= 1\n    return indices']",100000,0.44019479997223243,0.4577868660009699,0.5635986999841407,N/A
p3_find_n_smallest_number,prompt_1,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in k_smallest]\n    return indexes']",1000,0.004585299990139902,0.0048463940009241925,0.00741840002592653,N/A
p3_find_n_smallest_number,prompt_1,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in k_smallest]\n    return indexes']",10000,0.042897599982097745,0.044297175999963655,0.05874840001342818,N/A
p3_find_n_smallest_number,prompt_1,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in k_smallest]\n    return indexes']",100000,0.44535229995381087,0.4692711400042754,0.5184499000315554,N/A
p3_find_n_smallest_number,prompt_1,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004441600001882762,0.004752094999421388,0.005999299988616258,N/A
p3_find_n_smallest_number,prompt_1,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.041982199996709824,0.044102245997055436,0.052202299993950874,N/A
p3_find_n_smallest_number,prompt_1,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.44196010002633557,0.4733655929955421,0.5269164000055753,N/A
p3_find_n_smallest_number,prompt_1,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",1000,0.006479599978774786,0.006847366999718361,0.009010099980514497,N/A
p3_find_n_smallest_number,prompt_1,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",10000,0.06562080001458526,0.06774915400135796,0.07934119994752109,N/A
p3_find_n_smallest_number,prompt_1,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",100000,0.8075693999999203,0.8477320779953152,0.955224699981045,N/A
p3_find_n_smallest_number,prompt_1,77,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the size of the array')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_k_indexes = [index for value, index in indexed_array[:arg2]]\n    return smallest_k_indexes""]",1000,0.009729799989145249,0.010429884999757633,0.013899100013077259,N/A
p3_find_n_smallest_number,prompt_1,77,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the size of the array')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_k_indexes = [index for value, index in indexed_array[:arg2]]\n    return smallest_k_indexes""]",10000,0.1537599999574013,0.16001173099735752,0.18214709998574108,N/A
p3_find_n_smallest_number,prompt_1,77,"[""def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the size of the array')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_k_indexes = [index for value, index in indexed_array[:arg2]]\n    return smallest_k_indexes""]",100000,2.2888819000218064,2.377760060998844,2.659139600000344,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    from heapq import nsmallest\n    k_smallest = nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes\narr = [10, 4, 3, 2, 1, 7, 9]\nk = 3\npass']",1000,0.0047713000094518065,0.005088300001225434,0.009488000010605901,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    from heapq import nsmallest\n    k_smallest = nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes\narr = [10, 4, 3, 2, 1, 7, 9]\nk = 3\npass']",10000,0.043561399972531945,0.04649558399745729,0.055315000005066395,N/A
p3_find_n_smallest_number,prompt_1,78,"['def funcImp(arg1, arg2):\n    from heapq import nsmallest\n    k_smallest = nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes\narr = [10, 4, 3, 2, 1, 7, 9]\nk = 3\npass']",100000,0.4509260000195354,0.47804711700067853,0.5381299000000581,N/A
p3_find_n_smallest_number,prompt_1,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr = arg1\n    k = arg2\n    if k <= 0 or not arr:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    k_smallest_values = set(heapq.nsmallest(k, arr))\n    result = []\n    for index, value in enumerate(arr):\n        if value in k_smallest_values:\n            result.append(index)\n            k_smallest_values.remove(value)\n            if len(result) == k:\n                break\n    return result']",1000,0.002946800028439611,0.004007079001166858,0.020640700007788837,N/A
p3_find_n_smallest_number,prompt_1,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr = arg1\n    k = arg2\n    if k <= 0 or not arr:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    k_smallest_values = set(heapq.nsmallest(k, arr))\n    result = []\n    for index, value in enumerate(arr):\n        if value in k_smallest_values:\n            result.append(index)\n            k_smallest_values.remove(value)\n            if len(result) == k:\n                break\n    return result']",10000,0.028409999969881028,0.030336751001887024,0.041860499943140894,N/A
p3_find_n_smallest_number,prompt_1,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr = arg1\n    k = arg2\n    if k <= 0 or not arr:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    k_smallest_values = set(heapq.nsmallest(k, arr))\n    result = []\n    for index, value in enumerate(arr):\n        if value in k_smallest_values:\n            result.append(index)\n            k_smallest_values.remove(value)\n            if len(result) == k:\n                break\n    return result']",100000,0.23728280002251267,0.25229103400197345,0.3361857999698259,N/A
p3_find_n_smallest_number,prompt_1,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in smallest_elements]\n    return indexes']",1000,0.00457509997067973,0.004752010997617617,0.00544779998017475,N/A
p3_find_n_smallest_number,prompt_1,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in smallest_elements]\n    return indexes']",10000,0.04206480004359037,0.04369090299878735,0.047259399958420545,N/A
p3_find_n_smallest_number,prompt_1,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in smallest_elements]\n    return indexes']",100000,0.4442118000006303,0.4712251379998634,0.6323364999843761,N/A
p3_find_n_smallest_number,prompt_1,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indices']",1000,0.0032212999649345875,0.003383100001956336,0.004530499980319291,N/A
p3_find_n_smallest_number,prompt_1,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indices']",10000,0.029373400029726326,0.03079471400124021,0.04020370001671836,N/A
p3_find_n_smallest_number,prompt_1,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indices']",100000,0.29447799996705726,0.3162367040006211,0.436648300033994,N/A
p3_find_n_smallest_number,prompt_1,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, [(val, idx) for idx, val in enumerate(arg1)])\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",1000,0.005372899991925806,0.006268950999365188,0.02405670000007376,N/A
p3_find_n_smallest_number,prompt_1,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, [(val, idx) for idx, val in enumerate(arg1)])\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",10000,0.052202199993189424,0.05621242999797687,0.10000979999313131,N/A
p3_find_n_smallest_number,prompt_1,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, [(val, idx) for idx, val in enumerate(arg1)])\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",100000,0.7072769999504089,0.7540192510007182,0.8832132999668829,N/A
p3_find_n_smallest_number,prompt_1,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest]']",1000,0.0045044999569654465,0.004794260999187827,0.006262300012167543,N/A
p3_find_n_smallest_number,prompt_1,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest]']",10000,0.0429648999706842,0.044914722996763884,0.061964199994690716,N/A
p3_find_n_smallest_number,prompt_1,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest]']",100000,0.4441913000191562,0.47301224599883424,0.6476992999669164,N/A
p3_find_n_smallest_number,prompt_1,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [index for index, value in enumerate(arg1) if value in smallest_elements]\n    return indexes']",1000,0.004699799988884479,0.004863618995877914,0.005560300021898001,N/A
p3_find_n_smallest_number,prompt_1,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [index for index, value in enumerate(arg1) if value in smallest_elements]\n    return indexes']",10000,0.04453559999819845,0.04582538000075147,0.05032380000920966,N/A
p3_find_n_smallest_number,prompt_1,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [index for index, value in enumerate(arg1) if value in smallest_elements]\n    return indexes']",100000,0.4508133999770507,0.4830739930010168,0.5736700000124983,N/A
p3_find_n_smallest_number,prompt_1,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_pairs]\n    return smallest_indexes']",1000,0.004462399985641241,0.004776952001848258,0.006115600001066923,N/A
p3_find_n_smallest_number,prompt_1,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_pairs]\n    return smallest_indexes']",10000,0.04136919998563826,0.044644343997933905,0.08501670003170148,N/A
p3_find_n_smallest_number,prompt_1,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_pairs]\n    return smallest_indexes']",100000,0.4418596000177786,0.47121722299838437,0.5664639000315219,N/A
p3_find_n_smallest_number,prompt_1,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",1000,0.004461699980311096,0.004742387000587769,0.005717599997296929,N/A
p3_find_n_smallest_number,prompt_1,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",10000,0.04204949998529628,0.04402536799723748,0.053740100003778934,N/A
p3_find_n_smallest_number,prompt_1,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",100000,0.4487301000044681,0.47078185200167355,0.5476656000246294,N/A
p3_find_n_smallest_number,prompt_1,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004455799993593246,0.004776761998655275,0.006843999959528446,N/A
p3_find_n_smallest_number,prompt_1,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.04210590000730008,0.044140327999484724,0.059066299989353865,N/A
p3_find_n_smallest_number,prompt_1,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.44434950000140816,0.4720986960019218,0.548632699996233,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return k_smallest_indexes\narray = [7, 2, 5, 3, 9, 8, 1, 6]\nk = 3\npass']",1000,0.008581899979617447,0.009277427999768406,0.013202899950556457,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return k_smallest_indexes\narray = [7, 2, 5, 3, 9, 8, 1, 6]\nk = 3\npass']",10000,0.14209269999992102,0.14783339300134685,0.1623307000263594,N/A
p3_find_n_smallest_number,prompt_1,88,"['def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = list(enumerate(arg1))\n    indexed_array.sort(key=lambda x: x[1])\n    k_smallest_indexes = [indexed_array[i][0] for i in range(arg2)]\n    return k_smallest_indexes\narray = [7, 2, 5, 3, 9, 8, 1, 6]\nk = 3\npass']",100000,2.1339685000129975,2.246550680003129,2.363982099981513,N/A
p3_find_n_smallest_number,prompt_1,89,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes\nif __name__ == '__main__':\n    array = [5, 3, 1, 2, 4]\n    k = 3\n    pass""]",1000,0.004637799982447177,0.004806804999825545,0.006035300029907376,N/A
p3_find_n_smallest_number,prompt_1,89,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes\nif __name__ == '__main__':\n    array = [5, 3, 1, 2, 4]\n    k = 3\n    pass""]",10000,0.041922700009308755,0.04430416700313799,0.060734700004104525,N/A
p3_find_n_smallest_number,prompt_1,89,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes\nif __name__ == '__main__':\n    array = [5, 3, 1, 2, 4]\n    k = 3\n    pass""]",100000,0.44902470003580675,0.4830220740067307,0.7037816000520252,N/A
p3_find_n_smallest_number,prompt_1,90,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be a positive integer less than or equal to the length of arg1')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        while index in indexes:\n            index = arg1.index(num, index + 1)\n        indexes.append(index)\n    return indexes""]",1000,0.0021170999971218407,0.002308486996917054,0.0047351999673992395,N/A
p3_find_n_smallest_number,prompt_1,90,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be a positive integer less than or equal to the length of arg1')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        while index in indexes:\n            index = arg1.index(num, index + 1)\n        indexes.append(index)\n    return indexes""]",10000,0.01671400002669543,0.01801211699785199,0.02416960004484281,N/A
p3_find_n_smallest_number,prompt_1,90,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 should be a positive integer less than or equal to the length of arg1')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        index = arg1.index(num)\n        while index in indexes:\n            index = arg1.index(num, index + 1)\n        indexes.append(index)\n    return indexes""]",100000,0.16275590000441298,0.17225864999869372,0.21197880001273006,N/A
p3_find_n_smallest_number,prompt_1,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(element) for element in k_smallest_elements]\n    return indexes']",1000,0.002112400019541383,0.0022010239999508486,0.0023412000155076385,N/A
p3_find_n_smallest_number,prompt_1,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(element) for element in k_smallest_elements]\n    return indexes']",10000,0.017068799992557615,0.017948876000009478,0.025148999993689358,N/A
p3_find_n_smallest_number,prompt_1,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(element) for element in k_smallest_elements]\n    return indexes']",100000,0.1624005000339821,0.17074283200141507,0.211657399951946,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, v in enumerate(arg1) if v in k_smallest]\n    if len(indexes) > arg2:\n        k_smallest_set = set(k_smallest)\n        indexes = [i for i in indexes if arg1[i] in k_smallest_set]\n    return indexes[:arg2]']",1000,0.004735899972729385,0.005024057000991888,0.010053500009234995,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, v in enumerate(arg1) if v in k_smallest]\n    if len(indexes) > arg2:\n        k_smallest_set = set(k_smallest)\n        indexes = [i for i in indexes if arg1[i] in k_smallest_set]\n    return indexes[:arg2]']",10000,0.04449410003144294,0.04692321299691685,0.056719499989412725,N/A
p3_find_n_smallest_number,prompt_1,92,"['def funcImp(arg1, arg2):\n    import heapq\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, v in enumerate(arg1) if v in k_smallest]\n    if len(indexes) > arg2:\n        k_smallest_set = set(k_smallest)\n        indexes = [i for i in indexes if arg1[i] in k_smallest_set]\n    return indexes[:arg2]']",100000,0.45487539999885485,0.4814939469983801,0.5403384999954142,N/A
p3_find_n_smallest_number,prompt_1,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_k_indices']",1000,0.005205299996305257,0.005466948998509906,0.006685699976515025,N/A
p3_find_n_smallest_number,prompt_1,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_k_indices']",10000,0.06482839997624978,0.06759444600204007,0.09881509997649118,N/A
p3_find_n_smallest_number,prompt_1,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_k_indices']",100000,0.79675960005261,0.8295134960027645,0.91114209999796,N/A
p3_find_n_smallest_number,prompt_1,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",1000,0.0020126000163145363,0.00218778699694667,0.0031287000165320933,N/A
p3_find_n_smallest_number,prompt_1,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",10000,0.016923399991355836,0.018058843996259386,0.027427599998191,N/A
p3_find_n_smallest_number,prompt_1,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        indexes.append(arg1.index(num))\n    return indexes']",100000,0.16213289997540414,0.17158757099707145,0.20409290003590286,N/A
p3_find_n_smallest_number,prompt_1,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    result_indexes = [index for index, value in k_smallest]\n    return result_indexes']",1000,0.00457819999428466,0.0047877890011295676,0.006729300017468631,N/A
p3_find_n_smallest_number,prompt_1,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    result_indexes = [index for index, value in k_smallest]\n    return result_indexes']",10000,0.04221719998167828,0.044429024998098615,0.07009100000141189,N/A
p3_find_n_smallest_number,prompt_1,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    result_indexes = [index for index, value in k_smallest]\n    return result_indexes']",100000,0.4458157999906689,0.4732760899979621,0.5797564999666065,N/A
p3_find_n_smallest_number,prompt_1,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return []\n    k_smallest_elements = heapq.nsmallest(k, arr)\n    k_smallest_indices = [i for i, value in enumerate(arr) if value in k_smallest_elements]\n    return k_smallest_indices[:k]']",1000,0.004771200008690357,0.0049921719980193305,0.007262500002980232,N/A
p3_find_n_smallest_number,prompt_1,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return []\n    k_smallest_elements = heapq.nsmallest(k, arr)\n    k_smallest_indices = [i for i, value in enumerate(arr) if value in k_smallest_elements]\n    return k_smallest_indices[:k]']",10000,0.04367680003633723,0.046267565002199265,0.06296209996799007,N/A
p3_find_n_smallest_number,prompt_1,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if k > len(arr):\n        return []\n    k_smallest_elements = heapq.nsmallest(k, arr)\n    k_smallest_indices = [i for i, value in enumerate(arr) if value in k_smallest_elements]\n    return k_smallest_indices[:k]']",100000,0.44891620002454147,0.4809308970026905,0.5657513000187464,N/A
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_indexes']",1000,0.00977549998788163,0.01038317000027746,0.013861300016287714,N/A
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_indexes']",10000,0.15603100002044812,0.16241620500397402,0.1808150999713689,N/A
p3_find_n_smallest_number,prompt_1,97,"['def funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indexes = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_indexes']",100000,2.284178600006271,2.368659940000507,2.731652699992992,N/A
p3_find_n_smallest_number,prompt_1,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",1000,0.0044849999831058085,0.004766418001963757,0.005567300016991794,N/A
p3_find_n_smallest_number,prompt_1,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",10000,0.04135650000534952,0.044306799999321814,0.05749529995955527,N/A
p3_find_n_smallest_number,prompt_1,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",100000,0.44430720002856106,0.47278884999861476,0.5354262000182644,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    smallest_with_indices = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    result_indices = [index for index, value in smallest_with_indices]\n    return result_indices']",1000,0.00448190001770854,0.004876703994814307,0.008207299979403615,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    smallest_with_indices = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    result_indices = [index for index, value in smallest_with_indices]\n    return result_indices']",10000,0.04149959998903796,0.04419425100029912,0.06608119996963069,N/A
p3_find_n_smallest_number,prompt_1,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    smallest_with_indices = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    result_indices = [index for index, value in smallest_with_indices]\n    return result_indices']",100000,0.4479900000151247,0.47638080500182695,0.6438022999791428,N/A
p3_find_n_smallest_number,prompt_1,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    indexes_set = set()\n    for number in smallest_numbers:\n        for i in range(len(arg1)):\n            if arg1[i] == number and i not in indexes_set:\n                indexes_set.add(i)\n                break\n    return sorted(list(indexes_set))']",1000,0.007587699976284057,0.008010878997156396,0.01092390000121668,N/A
p3_find_n_smallest_number,prompt_1,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    indexes_set = set()\n    for number in smallest_numbers:\n        for i in range(len(arg1)):\n            if arg1[i] == number and i not in indexes_set:\n                indexes_set.add(i)\n                break\n    return sorted(list(indexes_set))']",10000,0.07046610000543296,0.07469309700303711,0.08805160003248602,N/A
p3_find_n_smallest_number,prompt_1,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in smallest_numbers]\n    indexes_set = set()\n    for number in smallest_numbers:\n        for i in range(len(arg1)):\n            if arg1[i] == number and i not in indexes_set:\n                indexes_set.add(i)\n                break\n    return sorted(list(indexes_set))']",100000,0.705055899976287,0.7400731639994774,0.8091960999881849,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes']",1000,0.004623199987690896,0.0048468599992338565,0.005206200003158301,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes']",10000,0.0439456999883987,0.04612593200348783,0.05312620004406199,N/A
p3_find_n_smallest_number,prompt_2,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, val in enumerate(arg1) if val in k_smallest]\n    return indexes']",100000,0.4527373000164516,0.47700224600092045,0.5209850000101142,N/A
p3_find_n_smallest_number,prompt_2,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    indexes = sorted((idx for val, idx in smallest_elements))\n    return indexes']",1000,0.005929199978709221,0.006143527000676841,0.007249300018884242,N/A
p3_find_n_smallest_number,prompt_2,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    indexes = sorted((idx for val, idx in smallest_elements))\n    return indexes']",10000,0.05446680000750348,0.057893312998930926,0.08489120000740513,N/A
p3_find_n_smallest_number,prompt_2,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    indexes = sorted((idx for val, idx in smallest_elements))\n    return indexes']",100000,0.5582813999499194,0.593560910000815,0.7216903999797069,N/A
p3_find_n_smallest_number,prompt_2,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",1000,0.005228299996815622,0.0056166609993670135,0.008045199967455119,N/A
p3_find_n_smallest_number,prompt_2,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",10000,0.06591910001588985,0.0680044179991819,0.0728705000365153,N/A
p3_find_n_smallest_number,prompt_2,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",100000,0.7951690999907441,0.8314151059975847,0.9706359999836423,N/A
p3_find_n_smallest_number,prompt_2,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005296099989209324,0.0055850539979292076,0.007318900024984032,N/A
p3_find_n_smallest_number,prompt_2,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06374249997315928,0.06644151499960571,0.07334639999317005,N/A
p3_find_n_smallest_number,prompt_2,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7738212999538518,0.826827325996128,0.9153541999985464,N/A
p3_find_n_smallest_number,prompt_2,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    initial_indexes = list(range(len(arg1)))\n    k_smallest_indexes = heapq.nsmallest(arg2, initial_indexes, key=lambda i: arg1[i])\n    return k_smallest_indexes']",1000,0.004183099954389036,0.004497246001265011,0.005504000000655651,N/A
p3_find_n_smallest_number,prompt_2,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    initial_indexes = list(range(len(arg1)))\n    k_smallest_indexes = heapq.nsmallest(arg2, initial_indexes, key=lambda i: arg1[i])\n    return k_smallest_indexes']",10000,0.03908590000355616,0.041604719000752084,0.0564680999959819,N/A
p3_find_n_smallest_number,prompt_2,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    initial_indexes = list(range(len(arg1)))\n    k_smallest_indexes = heapq.nsmallest(arg2, initial_indexes, key=lambda i: arg1[i])\n    return k_smallest_indexes']",100000,0.4484791000140831,0.48099794100038706,0.6370757999829948,N/A
p3_find_n_smallest_number,prompt_2,6,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",1000,0.006263799965381622,0.006755521002341993,0.009845099993981421,N/A
p3_find_n_smallest_number,prompt_2,6,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",10000,0.06594790000235662,0.06954197699786163,0.13536060001933947,N/A
p3_find_n_smallest_number,prompt_2,6,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",100000,0.8001345000229776,0.8672309739998308,1.295888399996329,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number k indicating how many smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'arg2 must be between 1 and the length of arg1\')\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return k_smallest_indices']",1000,0.004619799961801618,0.004960087999352254,0.007459600048605353,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number k indicating how many smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'arg2 must be between 1 and the length of arg1\')\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return k_smallest_indices']",10000,0.04243720002705231,0.044721323995036075,0.05504499998642132,N/A
p3_find_n_smallest_number,prompt_2,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number k indicating how many smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'arg2 must be between 1 and the length of arg1\')\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return k_smallest_indices']",100000,0.4447189000202343,0.47432075400196483,0.7157506000366993,N/A
p3_find_n_smallest_number,prompt_2,8,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be larger than the length of the list'\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indexes = [element[1] for element in k_smallest]\n    return k_smallest_indexes""]",1000,0.006254599953535944,0.006743120000464842,0.011085900012403727,N/A
p3_find_n_smallest_number,prompt_2,8,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be larger than the length of the list'\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indexes = [element[1] for element in k_smallest]\n    return k_smallest_indexes""]",10000,0.0657393999863416,0.06963767999608535,0.09036019997438416,N/A
p3_find_n_smallest_number,prompt_2,8,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be larger than the length of the list'\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indexes = [element[1] for element in k_smallest]\n    return k_smallest_indexes""]",100000,0.8101640000240877,0.8593426099984208,1.0586045000236481,N/A
p3_find_n_smallest_number,prompt_2,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result = [index for value, index in k_smallest]\n    return result']",1000,0.005237199948169291,0.005416328000719659,0.006481699994765222,N/A
p3_find_n_smallest_number,prompt_2,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result = [index for value, index in k_smallest]\n    return result']",10000,0.05160580005031079,0.05523711099813226,0.07310700003290549,N/A
p3_find_n_smallest_number,prompt_2,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result = [index for value, index in k_smallest]\n    return result']",100000,0.7090134999598376,0.740351679000305,0.8244322999962606,N/A
p3_find_n_smallest_number,prompt_2,10,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest_with_indices]']",1000,0.004524899995885789,0.004968883004621603,0.012788099993485957,N/A
p3_find_n_smallest_number,prompt_2,10,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest_with_indices]']",10000,0.041875099996104836,0.04425556799862534,0.05672430002596229,N/A
p3_find_n_smallest_number,prompt_2,10,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest_with_indices]']",100000,0.4474051999859512,0.47398801500094123,0.578650799987372,N/A
p3_find_n_smallest_number,prompt_2,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [index for value, index in k_smallest]\n    return indexes']",1000,0.005196399986743927,0.005464190000202507,0.006146800005808473,N/A
p3_find_n_smallest_number,prompt_2,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [index for value, index in k_smallest]\n    return indexes']",10000,0.052826100029051304,0.05561091000039596,0.06919139996170998,N/A
p3_find_n_smallest_number,prompt_2,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [index for value, index in k_smallest]\n    return indexes']",100000,0.7146862000226974,0.7489797580003505,0.8344549000030383,N/A
p3_find_n_smallest_number,prompt_2,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    smallest_numbers = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in smallest_numbers]\n    return indexes""]",1000,0.0020868999999947846,0.0022132229979615657,0.0027925000176765025,N/A
p3_find_n_smallest_number,prompt_2,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    smallest_numbers = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in smallest_numbers]\n    return indexes""]",10000,0.017129699990618974,0.017962426001904532,0.021866599970962852,N/A
p3_find_n_smallest_number,prompt_2,12,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    smallest_numbers = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(num) for num in smallest_numbers]\n    return indexes""]",100000,0.1609469000250101,0.17098555199918336,0.1947737000300549,N/A
p3_find_n_smallest_number,prompt_2,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    smallest_indexes = [idx for val, idx in smallest_k]\n    return smallest_indexes']",1000,0.006296300038229674,0.00679576900030952,0.009227100003045052,N/A
p3_find_n_smallest_number,prompt_2,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    smallest_indexes = [idx for val, idx in smallest_k]\n    return smallest_indexes']",10000,0.06343920005019754,0.06669493300374597,0.0740296000149101,N/A
p3_find_n_smallest_number,prompt_2,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    smallest_indexes = [idx for val, idx in smallest_k]\n    return smallest_indexes']",100000,0.8112147999927402,0.8609114489983767,0.9665217000292614,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[index], index))\n    return [idx for val, idx in min_heap]']",1000,0.002454000001307577,0.002599392999545671,0.002867500006686896,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[index], index))\n    return [idx for val, idx in min_heap]']",10000,0.02344359998824075,0.025319965001544917,0.029766499996185303,N/A
p3_find_n_smallest_number,prompt_2,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for index in range(arg2, len(arg1)):\n        if arg1[index] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[index], index))\n    return [idx for val, idx in min_heap]']",100000,0.2834240999654867,0.29601622600166594,0.33871420001378283,N/A
p3_find_n_smallest_number,prompt_2,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",1000,0.0028303000144660473,0.002977031999616884,0.0035035000182688236,N/A
p3_find_n_smallest_number,prompt_2,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",10000,0.025806400051806122,0.02726392699871212,0.03668119997018948,N/A
p3_find_n_smallest_number,prompt_2,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",100000,0.26063860004069284,0.27588284700119403,0.3510003999690525,N/A
p3_find_n_smallest_number,prompt_2,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        smallest = heapq.heappop(heap)\n        result.append(smallest[1])\n    return result']",1000,0.005176100006792694,0.005471030000480823,0.008231299987528473,N/A
p3_find_n_smallest_number,prompt_2,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        smallest = heapq.heappop(heap)\n        result.append(smallest[1])\n    return result']",10000,0.0673594000400044,0.07056817200034857,0.11041969998041168,N/A
p3_find_n_smallest_number,prompt_2,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        smallest = heapq.heappop(heap)\n        result.append(smallest[1])\n    return result']",100000,0.8047736999578774,0.833684401998762,0.9820868999813683,N/A
p3_find_n_smallest_number,prompt_2,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    return [idx for value, idx in k_smallest]']",1000,0.006271999969612807,0.006728394999518059,0.008542499970644712,N/A
p3_find_n_smallest_number,prompt_2,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    return [idx for value, idx in k_smallest]']",10000,0.06573179998667911,0.06830177799682133,0.07864409999456257,N/A
p3_find_n_smallest_number,prompt_2,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    return [idx for value, idx in k_smallest]']",100000,0.8016434999881312,0.8490132169984281,0.9306413999875076,N/A
p3_find_n_smallest_number,prompt_2,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_counts = {}\n    for num in k_smallest:\n        if num in k_smallest_counts:\n            k_smallest_counts[num] += 1\n        else:\n            k_smallest_counts[num] = 1\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in k_smallest_counts and k_smallest_counts[num] > 0:\n            indexes.append(i)\n            k_smallest_counts[num] -= 1\n            if len(indexes) == arg2:\n                break\n    return indexes']",1000,0.003123299975413829,0.0033317089994670825,0.004331800038926303,N/A
p3_find_n_smallest_number,prompt_2,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_counts = {}\n    for num in k_smallest:\n        if num in k_smallest_counts:\n            k_smallest_counts[num] += 1\n        else:\n            k_smallest_counts[num] = 1\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in k_smallest_counts and k_smallest_counts[num] > 0:\n            indexes.append(i)\n            k_smallest_counts[num] -= 1\n            if len(indexes) == arg2:\n                break\n    return indexes']",10000,0.03574680001474917,0.036999687997158616,0.044049100019037724,N/A
p3_find_n_smallest_number,prompt_2,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    k_smallest_counts = {}\n    for num in k_smallest:\n        if num in k_smallest_counts:\n            k_smallest_counts[num] += 1\n        else:\n            k_smallest_counts[num] = 1\n    indexes = []\n    for i, num in enumerate(arg1):\n        if num in k_smallest_counts and k_smallest_counts[num] > 0:\n            indexes.append(i)\n            k_smallest_counts[num] -= 1\n            if len(indexes) == arg2:\n                break\n    return indexes']",100000,0.28796270000748336,0.29669798000424635,0.33475139999063686,N/A
p3_find_n_smallest_number,prompt_2,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [index for value, index in heap]']",1000,0.0030519000138156116,0.003354561999440193,0.005612100008875132,N/A
p3_find_n_smallest_number,prompt_2,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [index for value, index in heap]']",10000,0.029203200014308095,0.030624296001042238,0.04101270000683144,N/A
p3_find_n_smallest_number,prompt_2,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [index for value, index in heap]']",100000,0.2920744000002742,0.3069678420008859,0.3450171999866143,N/A
p3_find_n_smallest_number,prompt_2,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for _, idx in k_smallest]\n    return result_indexes']",1000,0.005216299963649362,0.00545844899781514,0.007155700004659593,N/A
p3_find_n_smallest_number,prompt_2,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for _, idx in k_smallest]\n    return result_indexes']",10000,0.05319720000261441,0.05542669800284784,0.10089060000609607,N/A
p3_find_n_smallest_number,prompt_2,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for _, idx in k_smallest]\n    return result_indexes']",100000,0.7111788000329398,0.7565146080002887,0.8680959999910556,N/A
p3_find_n_smallest_number,prompt_2,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): A list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest elements in the original list.\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.00769990001572296,0.008040501997456886,0.011368800012860447,N/A
p3_find_n_smallest_number,prompt_2,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): A list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest elements in the original list.\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.08675590000348166,0.09096069199847989,0.1018659999826923,N/A
p3_find_n_smallest_number,prompt_2,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): A list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest elements in the original list.\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,1.0033704999950714,1.0468499509966933,1.0884352999855764,N/A
p3_find_n_smallest_number,prompt_2,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List[int] - The input array\n    :param arg2: int - The number of smallest elements\' indexes to find\n    :return: List[int] - A list of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    return [idx for _, idx in heap]']",1000,0.0022134000319056213,0.0023539149976568295,0.0030060000135563314,N/A
p3_find_n_smallest_number,prompt_2,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List[int] - The input array\n    :param arg2: int - The number of smallest elements\' indexes to find\n    :return: List[int] - A list of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    return [idx for _, idx in heap]']",10000,0.022089599980972707,0.023744712999905458,0.03276249999180436,N/A
p3_find_n_smallest_number,prompt_2,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List[int] - The input array\n    :param arg2: int - The number of smallest elements\' indexes to find\n    :return: List[int] - A list of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[i], i))\n    return [idx for _, idx in heap]']",100000,0.2308251999784261,0.24126762000261806,0.27193530002841726,N/A
p3_find_n_smallest_number,prompt_2,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",1000,0.004709900007583201,0.004981347000575624,0.006911000004038215,N/A
p3_find_n_smallest_number,prompt_2,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",10000,0.04459369997493923,0.04644112799665891,0.056758099992293864,N/A
p3_find_n_smallest_number,prompt_2,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indexes']",100000,0.45363370003178716,0.4796375270036515,0.555961899983231,N/A
p3_find_n_smallest_number,prompt_2,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [idx for idx, val in k_smallest_elements]\n    return indices']",1000,0.004476399975828826,0.004751519002602436,0.005892599991057068,N/A
p3_find_n_smallest_number,prompt_2,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [idx for idx, val in k_smallest_elements]\n    return indices']",10000,0.042103500047232956,0.043944577000802384,0.051557700033299625,N/A
p3_find_n_smallest_number,prompt_2,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [idx for idx, val in k_smallest_elements]\n    return indices']",100000,0.44737519999034703,0.473127505001612,0.5945021999650635,N/A
p3_find_n_smallest_number,prompt_2,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005221300001721829,0.0055437160009751095,0.008794500026851892,N/A
p3_find_n_smallest_number,prompt_2,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06697659997735173,0.06872370699886232,0.07408109999960288,N/A
p3_find_n_smallest_number,prompt_2,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7762786999810487,0.811495266003767,0.9522049000370316,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest]\n    return indices']",1000,0.004592299985233694,0.004861965997260995,0.006807400030083954,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest]\n    return indices']",10000,0.04147399996872991,0.04392615600139834,0.0514854000066407,N/A
p3_find_n_smallest_number,prompt_2,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest]\n    return indices']",100000,0.4435306999948807,0.4751599409990013,0.5567336000385694,N/A
p3_find_n_smallest_number,prompt_2,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        if heap:\n            val, idx = heapq.heappop(heap)\n            result.append(idx)\n    return result']",1000,0.005288100044708699,0.00560004300205037,0.006619299994781613,N/A
p3_find_n_smallest_number,prompt_2,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        if heap:\n            val, idx = heapq.heappop(heap)\n            result.append(idx)\n    return result']",10000,0.06652489997213706,0.06826265000214335,0.07204719999572262,N/A
p3_find_n_smallest_number,prompt_2,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        if heap:\n            val, idx = heapq.heappop(heap)\n            result.append(idx)\n    return result']",100000,0.7771911000018008,0.8123843710002256,0.9631510000326671,N/A
p3_find_n_smallest_number,prompt_2,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number \'k\' representing the count of smallest numbers to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the input list.\n    """"""\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, element in smallest_elements]\n    return indexes']",1000,0.004563900001812726,0.0047388319997116925,0.00533830001950264,N/A
p3_find_n_smallest_number,prompt_2,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number \'k\' representing the count of smallest numbers to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the input list.\n    """"""\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, element in smallest_elements]\n    return indexes']",10000,0.04272239998681471,0.04390121400298085,0.04927540000062436,N/A
p3_find_n_smallest_number,prompt_2,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number \'k\' representing the count of smallest numbers to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the input list.\n    """"""\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, element in smallest_elements]\n    return indexes']",100000,0.44289839995326474,0.46943738899775783,0.5311284000054002,N/A
p3_find_n_smallest_number,prompt_2,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(min(len(min_heap), arg2))]\n    return k_smallest_indices']",1000,0.005199100007303059,0.005452835999312811,0.006251899991184473,N/A
p3_find_n_smallest_number,prompt_2,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(min(len(min_heap), arg2))]\n    return k_smallest_indices']",10000,0.06790600001113489,0.06993614200153388,0.07530359999509528,N/A
p3_find_n_smallest_number,prompt_2,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(min(len(min_heap), arg2))]\n    return k_smallest_indices']",100000,0.7827512000221759,0.8259196700004395,0.926144499971997,N/A
p3_find_n_smallest_number,prompt_2,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    result_indices = [idx for val, idx in k_smallest]\n    return result_indices']",1000,0.0052402999717742205,0.005617938003852032,0.010030800011008978,N/A
p3_find_n_smallest_number,prompt_2,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    result_indices = [idx for val, idx in k_smallest]\n    return result_indices']",10000,0.052428900031372905,0.054327232999494296,0.060984999989159405,N/A
p3_find_n_smallest_number,prompt_2,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    result_indices = [idx for val, idx in k_smallest]\n    return result_indices']",100000,0.7035638999659568,0.7503019870008575,0.9511346999788657,N/A
p3_find_n_smallest_number,prompt_2,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    result = [idx for idx, value in heap]\n    return result']",1000,0.004590800032019615,0.004875260995468125,0.007207099988590926,N/A
p3_find_n_smallest_number,prompt_2,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    result = [idx for idx, value in heap]\n    return result']",10000,0.041675300046335906,0.043979773000464774,0.053008100017905235,N/A
p3_find_n_smallest_number,prompt_2,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    result = [idx for idx, value in heap]\n    return result']",100000,0.4452389000216499,0.47039313400280663,0.560179500025697,N/A
p3_find_n_smallest_number,prompt_2,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005339900031685829,0.005585866004112177,0.006717199983540922,N/A
p3_find_n_smallest_number,prompt_2,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06693590001668781,0.06898689300287515,0.07554179994622245,N/A
p3_find_n_smallest_number,prompt_2,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7883632999728434,0.8286262489954243,1.2143865000107326,N/A
p3_find_n_smallest_number,prompt_2,33,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 must be between 1 and the length of arg1')\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_k = heapq.nsmallest(arg2, heap)\n    return [index for value, index in smallest_k]""]",1000,0.009677099995315075,0.01011146499949973,0.013800600019749254,N/A
p3_find_n_smallest_number,prompt_2,33,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 must be between 1 and the length of arg1')\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_k = heapq.nsmallest(arg2, heap)\n    return [index for value, index in smallest_k]""]",10000,0.10688660002779216,0.114295569001697,0.21301340003265068,N/A
p3_find_n_smallest_number,prompt_2,33,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 must be between 1 and the length of arg1')\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_k = heapq.nsmallest(arg2, heap)\n    return [index for value, index in smallest_k]""]",100000,1.2676558999810368,1.325502000003471,1.4412347000325099,N/A
p3_find_n_smallest_number,prompt_2,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted list.\n    \n    Args:\n    arg1: A list of integers.\n    arg2: An integer, the number of smallest elements to find.\n    \n    Returns:\n    A list of indexes of the k smallest elements in the input list.\n    """"""\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_arr = [(num, index) for index, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_arr, key=lambda x: x[0])\n    return [index for _, index in smallest_elements]']",1000,0.00631449994398281,0.008324360998230987,0.03799230000004172,N/A
p3_find_n_smallest_number,prompt_2,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted list.\n    \n    Args:\n    arg1: A list of integers.\n    arg2: An integer, the number of smallest elements to find.\n    \n    Returns:\n    A list of indexes of the k smallest elements in the input list.\n    """"""\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_arr = [(num, index) for index, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_arr, key=lambda x: x[0])\n    return [index for _, index in smallest_elements]']",10000,0.06443119997857139,0.067356499999878,0.07799590000649914,N/A
p3_find_n_smallest_number,prompt_2,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted list.\n    \n    Args:\n    arg1: A list of integers.\n    arg2: An integer, the number of smallest elements to find.\n    \n    Returns:\n    A list of indexes of the k smallest elements in the input list.\n    """"""\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_arr = [(num, index) for index, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_arr, key=lambda x: x[0])\n    return [index for _, index in smallest_elements]']",100000,0.8086304999887943,0.8449782260018401,0.9699321999796666,N/A
p3_find_n_smallest_number,prompt_2,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",1000,0.005218599981162697,0.005645746996742673,0.009244200016837567,N/A
p3_find_n_smallest_number,prompt_2,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",10000,0.05310379998991266,0.056138678002753295,0.06924360000994056,N/A
p3_find_n_smallest_number,prompt_2,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",100000,0.705130200018175,0.7402285200025653,0.8381219999864697,N/A
p3_find_n_smallest_number,prompt_2,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    indexes = [index for _, index in heap]\n    return indexes']",1000,0.006800599978305399,0.007219162997789681,0.010834299959242344,N/A
p3_find_n_smallest_number,prompt_2,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    indexes = [index for _, index in heap]\n    return indexes']",10000,0.06641299999319017,0.0691447429987602,0.0886626000283286,N/A
p3_find_n_smallest_number,prompt_2,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    indexes = [index for _, index in heap]\n    return indexes']",100000,0.6807495999964885,0.7154745149973314,0.8309897999861278,N/A
p3_find_n_smallest_number,prompt_2,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",1000,0.00508339999942109,0.0054727890033973384,0.0066377000184729695,N/A
p3_find_n_smallest_number,prompt_2,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",10000,0.05222239997237921,0.05486460999993142,0.069344200019259,N/A
p3_find_n_smallest_number,prompt_2,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",100000,0.7086967999930494,0.7503867279971018,0.8892829000251368,N/A
p3_find_n_smallest_number,prompt_2,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): A list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest numbers in arg1.\n    """"""\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [index for _, index in k_smallest]\n    return k_smallest_indexes']",1000,0.006531400023959577,0.007192057999200188,0.014169399975799024,N/A
p3_find_n_smallest_number,prompt_2,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): A list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest numbers in arg1.\n    """"""\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [index for _, index in k_smallest]\n    return k_smallest_indexes']",10000,0.06460059998789802,0.06705400099803228,0.07427039998583496,N/A
p3_find_n_smallest_number,prompt_2,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): A list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest numbers in arg1.\n    """"""\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [index for _, index in k_smallest]\n    return k_smallest_indexes']",100000,0.7974055000231601,0.8642292269988684,0.9834323999821208,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    indexed_list = [(num, i) for i, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, indexed_list)\n    smallest_indexes = [index for num, index in smallest_elements]\n    return smallest_indexes']",1000,0.0051738000474870205,0.00551189900317695,0.008696599979884923,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    indexed_list = [(num, i) for i, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, indexed_list)\n    smallest_indexes = [index for num, index in smallest_elements]\n    return smallest_indexes']",10000,0.05232850002357736,0.05482894899731036,0.05991449998691678,N/A
p3_find_n_smallest_number,prompt_2,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    indexed_list = [(num, i) for i, num in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, indexed_list)\n    smallest_indexes = [index for num, index in smallest_elements]\n    return smallest_indexes']",100000,0.6904775999719277,0.744018461998785,0.9246609999681823,N/A
p3_find_n_smallest_number,prompt_2,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    result = [idx for val, idx in heap]\n    return result']",1000,0.002208000048995018,0.002460111003019847,0.0035453999880701303,N/A
p3_find_n_smallest_number,prompt_2,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    result = [idx for val, idx in heap]\n    return result']",10000,0.022676899970974773,0.024224750003777443,0.03986279998207465,N/A
p3_find_n_smallest_number,prompt_2,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    result = [idx for val, idx in heap]\n    return result']",100000,0.23236279998673126,0.2457045320008183,0.35992260003695264,N/A
p3_find_n_smallest_number,prompt_2,41,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes_of_k_smallest_elements = [index for index, value in k_smallest_elements_with_indices]\n    return indexes_of_k_smallest_elements']",1000,0.004488399950787425,0.004875767001067288,0.006634499994106591,N/A
p3_find_n_smallest_number,prompt_2,41,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes_of_k_smallest_elements = [index for index, value in k_smallest_elements_with_indices]\n    return indexes_of_k_smallest_elements']",10000,0.042427800013683736,0.0441666830010945,0.05337800004053861,N/A
p3_find_n_smallest_number,prompt_2,41,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes_of_k_smallest_elements = [index for index, value in k_smallest_elements_with_indices]\n    return indexes_of_k_smallest_elements']",100000,0.44556919997558,0.4662952930026222,0.5091227000229992,N/A
p3_find_n_smallest_number,prompt_2,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = [index for value, index in k_smallest]\n    return result']",1000,0.009781999979168177,0.010182352002593688,0.010968499991577119,N/A
p3_find_n_smallest_number,prompt_2,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = [index for value, index in k_smallest]\n    return result']",10000,0.10748969996348023,0.11320712100248784,0.15616559999762103,N/A
p3_find_n_smallest_number,prompt_2,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = [index for value, index in k_smallest]\n    return result']",100000,1.2456326000392437,1.3018868840002689,1.4479519000160508,N/A
p3_find_n_smallest_number,prompt_2,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    result = [idx for _, idx in k_smallest]\n    return result']",1000,0.005165300040971488,0.005531165999709629,0.009219200001098216,N/A
p3_find_n_smallest_number,prompt_2,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    result = [idx for _, idx in k_smallest]\n    return result']",10000,0.05281660001492128,0.05693857399804983,0.16612479998730123,N/A
p3_find_n_smallest_number,prompt_2,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    result = [idx for _, idx in k_smallest]\n    return result']",100000,0.7038283000001684,0.7407641280023382,0.7917717000236735,N/A
p3_find_n_smallest_number,prompt_2,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapheapify(min_heap)\n    k_smallest_elements = heapq.nsmallest(k, min_heap)\n    k_smallest_indexes = [idx for value, idx in k_smallest_elements]\n    return k_smallest_indexes']",1000,0,0,0,	 exception: module 'heapq' has no attribute 'heapheapify'
p3_find_n_smallest_number,prompt_2,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapheapify(min_heap)\n    k_smallest_elements = heapq.nsmallest(k, min_heap)\n    k_smallest_indexes = [idx for value, idx in k_smallest_elements]\n    return k_smallest_indexes']",10000,0,0,0,	 exception: module 'heapq' has no attribute 'heapheapify'
p3_find_n_smallest_number,prompt_2,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapheapify(min_heap)\n    k_smallest_elements = heapq.nsmallest(k, min_heap)\n    k_smallest_indexes = [idx for value, idx in k_smallest_elements]\n    return k_smallest_indexes']",100000,0,0,0,	 exception: module 'heapq' has no attribute 'heapheapify'
p3_find_n_smallest_number,prompt_2,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        k_smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return k_smallest_indexes']",1000,0.0076861000270582736,0.008219495997182094,0.012930099968798459,N/A
p3_find_n_smallest_number,prompt_2,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        k_smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return k_smallest_indexes']",10000,0.08701479999581352,0.09144687199906912,0.10773950000293553,N/A
p3_find_n_smallest_number,prompt_2,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        k_smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return k_smallest_indexes']",100000,1.0287456000223756,1.0625519390054978,1.165561399946455,N/A
p3_find_n_smallest_number,prompt_2,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, _ in smallest_elements]\n    return indices']",1000,0.004599299980327487,0.004815450000460259,0.005957099958322942,N/A
p3_find_n_smallest_number,prompt_2,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, _ in smallest_elements]\n    return indices']",10000,0.042546800046693534,0.04401012400048785,0.0482592000043951,N/A
p3_find_n_smallest_number,prompt_2,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        return []\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, _ in smallest_elements]\n    return indices']",100000,0.4439676000038162,0.4736298340029316,0.5781070000375621,N/A
p3_find_n_smallest_number,prompt_2,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",1000,0.006604900001548231,0.007046080000000074,0.010068500007037073,N/A
p3_find_n_smallest_number,prompt_2,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",10000,0.06484149995958433,0.06721070500090719,0.09251049999147654,N/A
p3_find_n_smallest_number,prompt_2,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",100000,0.8032076999661513,0.8461787590006133,0.9390321000246331,N/A
p3_find_n_smallest_number,prompt_2,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): List of integers (the array)\n    arg2 (int): Number of smallest elements to find\n    \n    Returns:\n    list: List of indexes of the k smallest numbers\n    """"""\n    if arg2 > len(arg1):\n        return None\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005021499993745238,0.005494676997186616,0.008420199970714748,N/A
p3_find_n_smallest_number,prompt_2,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): List of integers (the array)\n    arg2 (int): Number of smallest elements to find\n    \n    Returns:\n    list: List of indexes of the k smallest numbers\n    """"""\n    if arg2 > len(arg1):\n        return None\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06634080002550036,0.06913769300095737,0.07901859999401495,N/A
p3_find_n_smallest_number,prompt_2,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): List of integers (the array)\n    arg2 (int): Number of smallest elements to find\n    \n    Returns:\n    list: List of indexes of the k smallest numbers\n    """"""\n    if arg2 > len(arg1):\n        return None\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7704001000383869,0.8112949910009047,0.9856004999601282,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for _, idx in smallest_k]\n    return indexes']",1000,0.005258699995465577,0.005614169001928531,0.008610000018961728,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for _, idx in smallest_k]\n    return indexes']",10000,0.05343519995221868,0.055439987999852745,0.06272530002752319,N/A
p3_find_n_smallest_number,prompt_2,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for _, idx in smallest_k]\n    return indexes']",100000,0.7115818999591284,0.7498328249988845,0.8540937000070699,N/A
p3_find_n_smallest_number,prompt_2,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return smallest_indices']",1000,0.004557199950795621,0.004905794998630881,0.007194699952378869,N/A
p3_find_n_smallest_number,prompt_2,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return smallest_indices']",10000,0.04173580004135147,0.04382856999640353,0.05623270000796765,N/A
p3_find_n_smallest_number,prompt_2,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return smallest_indices']",100000,0.44776539999293163,0.46628655300068206,0.5025008000084199,N/A
p3_find_n_smallest_number,prompt_2,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indices = [index for value, index in k_smallest]\n    return indices']",1000,0.0051104999729432166,0.006017247998970561,0.019825799972750247,N/A
p3_find_n_smallest_number,prompt_2,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indices = [index for value, index in k_smallest]\n    return indices']",10000,0.052731000003404915,0.05494843500026036,0.06580169999506325,N/A
p3_find_n_smallest_number,prompt_2,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indices = [index for value, index in k_smallest]\n    return indices']",100000,0.6911395999486558,0.7475297889969079,0.8263619000208564,N/A
p3_find_n_smallest_number,prompt_2,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(k, indexed_array)\n    indexes_of_k_smallest = [index for value, index in k_smallest]\n    return indexes_of_k_smallest']",1000,0.005286399973556399,0.005493339000386186,0.007369400002062321,N/A
p3_find_n_smallest_number,prompt_2,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(k, indexed_array)\n    indexes_of_k_smallest = [index for value, index in k_smallest]\n    return indexes_of_k_smallest']",10000,0.05270220001693815,0.05571714900084771,0.07649999996647239,N/A
p3_find_n_smallest_number,prompt_2,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(k, indexed_array)\n    indexes_of_k_smallest = [index for value, index in k_smallest]\n    return indexes_of_k_smallest']",100000,0.7042347999522462,0.7530909909971524,0.9137852999847382,N/A
p3_find_n_smallest_number,prompt_2,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for num, idx in k_smallest]\n    return k_smallest_indexes']",1000,0.005253199953585863,0.00558301699871663,0.00874580000527203,N/A
p3_find_n_smallest_number,prompt_2,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for num, idx in k_smallest]\n    return k_smallest_indexes']",10000,0.05181640002410859,0.054866030001430775,0.0679837999632582,N/A
p3_find_n_smallest_number,prompt_2,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for num, idx in k_smallest]\n    return k_smallest_indexes']",100000,0.7144496000255458,0.7565799690003041,0.8361346000456251,N/A
p3_find_n_smallest_number,prompt_2,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in heap]\n    return indices']",1000,0.0045081000425852835,0.004889981005107984,0.008510700019542128,N/A
p3_find_n_smallest_number,prompt_2,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in heap]\n    return indices']",10000,0.04226740001467988,0.044486308999476025,0.05847190000349656,N/A
p3_find_n_smallest_number,prompt_2,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in heap]\n    return indices']",100000,0.4477395999711007,0.46968157599971166,0.5445190999889746,N/A
p3_find_n_smallest_number,prompt_2,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest]']",1000,0.004554099985398352,0.005338104004622437,0.014294199994765222,N/A
p3_find_n_smallest_number,prompt_2,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest]']",10000,0.04257729998789728,0.04577439700369723,0.09723770001437515,N/A
p3_find_n_smallest_number,prompt_2,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in smallest]']",100000,0.4459663999732584,0.4831423780001933,0.895818299963139,N/A
p3_find_n_smallest_number,prompt_2,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005258099990896881,0.0056422859989106655,0.0088926000171341,N/A
p3_find_n_smallest_number,prompt_2,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06487329996889457,0.06848128399637061,0.10757470002863556,N/A
p3_find_n_smallest_number,prompt_2,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7800160000333562,0.8161286419979297,0.9010639999760315,N/A
p3_find_n_smallest_number,prompt_2,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    result = [idx for _, idx in heap]\n    return result']",1000,0.0022749000345356762,0.0024147460039239377,0.0031949999975040555,N/A
p3_find_n_smallest_number,prompt_2,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    result = [idx for _, idx in heap]\n    return result']",10000,0.02243589999852702,0.026138252999517136,0.09049469995079562,N/A
p3_find_n_smallest_number,prompt_2,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    result = [idx for _, idx in heap]\n    return result']",100000,0.23077279998688027,0.25115113500563896,0.5594622999778949,N/A
p3_find_n_smallest_number,prompt_2,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_and_values = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indices_and_values)\n    return [idx for val, idx in k_smallest]']",1000,0.0050642000278458,0.005907188001438044,0.011484199960250407,N/A
p3_find_n_smallest_number,prompt_2,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_and_values = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indices_and_values)\n    return [idx for val, idx in k_smallest]']",10000,0.052685000002384186,0.05602647900406737,0.09875770000508055,N/A
p3_find_n_smallest_number,prompt_2,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indices_and_values = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indices_and_values)\n    return [idx for val, idx in k_smallest]']",100000,0.7163146999664605,0.7532943029975285,0.9100473999860696,N/A
p3_find_n_smallest_number,prompt_2,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indices = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indices.append(heapq.heappop(heap)[1])\n    return smallest_indices']",1000,0.007683800009544939,0.00812504899862688,0.010933900019153953,N/A
p3_find_n_smallest_number,prompt_2,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indices = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indices.append(heapq.heappop(heap)[1])\n    return smallest_indices']",10000,0.08651120000286028,0.09032765700132586,0.13809670001501217,N/A
p3_find_n_smallest_number,prompt_2,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indices = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indices.append(heapq.heappop(heap)[1])\n    return smallest_indices']",100000,0.9924067000392824,1.0359420749964192,1.181382399983704,N/A
p3_find_n_smallest_number,prompt_2,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",1000,0.005226199980825186,0.005643876995891333,0.010766599967610091,N/A
p3_find_n_smallest_number,prompt_2,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",10000,0.0674208999844268,0.0702607369987527,0.08151580003323033,N/A
p3_find_n_smallest_number,prompt_2,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",100000,0.7864155000424944,0.8414016930008075,0.9649474000325426,N/A
p3_find_n_smallest_number,prompt_2,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif value < -heap[0][0]:\n            heapq.heapreplace(heap, (-value, index))\n    result = [index for negative_value, index in heap]\n    result.sort()\n    return result']",1000,0.0040086000226438046,0.004266312997788191,0.005334200046490878,N/A
p3_find_n_smallest_number,prompt_2,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif value < -heap[0][0]:\n            heapq.heapreplace(heap, (-value, index))\n    result = [index for negative_value, index in heap]\n    result.sort()\n    return result']",10000,0.03947699995478615,0.04089171899657231,0.0541852000169456,N/A
p3_find_n_smallest_number,prompt_2,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif value < -heap[0][0]:\n            heapq.heapreplace(heap, (-value, index))\n    result = [index for negative_value, index in heap]\n    result.sort()\n    return result']",100000,0.39501690003089607,0.41998474099731536,0.5116847999743186,N/A
p3_find_n_smallest_number,prompt_2,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_k]\n    return indexes']",1000,0.0044519000221043825,0.004783408995717764,0.005535600008442998,N/A
p3_find_n_smallest_number,prompt_2,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_k]\n    return indexes']",10000,0.042582000023685396,0.04412276900256984,0.04867119999835268,N/A
p3_find_n_smallest_number,prompt_2,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_k]\n    return indexes']",100000,0.4471654000226408,0.4801084090012591,0.5788021999760531,N/A
p3_find_n_smallest_number,prompt_2,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [idx for idx, val in smallest_numbers]\n    return smallest_indexes']",1000,0.0044720000005327165,0.004807943001505919,0.006396999990101904,N/A
p3_find_n_smallest_number,prompt_2,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [idx for idx, val in smallest_numbers]\n    return smallest_indexes']",10000,0.04164360003778711,0.04494720800314098,0.12050939997425303,N/A
p3_find_n_smallest_number,prompt_2,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_numbers = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [idx for idx, val in smallest_numbers]\n    return smallest_indexes']",100000,0.4413762000040151,0.4694035489985254,0.5503528999979608,N/A
p3_find_n_smallest_number,prompt_2,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    indexes = [idx for val, idx in heapq.nsmallest(arg2, min_heap)]\n    indexes.sort()\n    return indexes']",1000,0.0023227999918162823,0.002503335998044349,0.0037172999582253397,N/A
p3_find_n_smallest_number,prompt_2,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    indexes = [idx for val, idx in heapq.nsmallest(arg2, min_heap)]\n    indexes.sort()\n    return indexes']",10000,0.022701999987475574,0.02382817999459803,0.02861869998741895,N/A
p3_find_n_smallest_number,prompt_2,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    indexes = [idx for val, idx in heapq.nsmallest(arg2, min_heap)]\n    indexes.sort()\n    return indexes']",100000,0.23275099997408688,0.24596404100069777,0.2783791999681853,N/A
p3_find_n_smallest_number,prompt_2,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.004583100031595677,0.0048214930028188975,0.006077900005038828,N/A
p3_find_n_smallest_number,prompt_2,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.04273520002607256,0.04431814300187398,0.056733000034000725,N/A
p3_find_n_smallest_number,prompt_2,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.44521430000895634,0.470286107994616,0.6122438000165857,N/A
p3_find_n_smallest_number,prompt_2,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [item[1] for item in k_smallest]\n    return result_indexes']",1000,0.006232500018086284,0.006830705000902526,0.009384100034367293,N/A
p3_find_n_smallest_number,prompt_2,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [item[1] for item in k_smallest]\n    return result_indexes']",10000,0.06483799999114126,0.06826375399832614,0.12704910000320524,N/A
p3_find_n_smallest_number,prompt_2,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [item[1] for item in k_smallest]\n    return result_indexes']",100000,0.8032980000134557,0.8461478300037562,0.9392826000112109,N/A
p3_find_n_smallest_number,prompt_2,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements]\n    return smallest_indices']",1000,0.004454499983694404,0.004896596997859888,0.00677690003067255,N/A
p3_find_n_smallest_number,prompt_2,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements]\n    return smallest_indices']",10000,0.041696099971886724,0.044493478001095356,0.056126899959053844,N/A
p3_find_n_smallest_number,prompt_2,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements]\n    return smallest_indices']",100000,0.44409289996838197,0.4681926610006485,0.5173692000098526,N/A
p3_find_n_smallest_number,prompt_2,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return sorted(smallest_indexes)']",1000,0.005211999989114702,0.005505295000621118,0.006786399986594915,N/A
p3_find_n_smallest_number,prompt_2,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return sorted(smallest_indexes)']",10000,0.0656031999969855,0.06788623699860181,0.07892940001329407,N/A
p3_find_n_smallest_number,prompt_2,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return sorted(smallest_indexes)']",100000,0.7885091000352986,0.8295304969954305,0.9591566999442875,N/A
p3_find_n_smallest_number,prompt_2,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for val, idx in k_smallest]\n    return indexes']",1000,0.0052226000116206706,0.005439540998195298,0.008184799982700497,N/A
p3_find_n_smallest_number,prompt_2,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for val, idx in k_smallest]\n    return indexes']",10000,0.05198910000035539,0.055147941000177524,0.07140060001984239,N/A
p3_find_n_smallest_number,prompt_2,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for val, idx in k_smallest]\n    return indexes']",100000,0.7083498000283726,0.7443123350001406,0.839567499991972,N/A
p3_find_n_smallest_number,prompt_2,70,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",1000,0.00230089999968186,0.002563137004035525,0.004749500018078834,N/A
p3_find_n_smallest_number,prompt_2,70,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",10000,0.02259579999372363,0.024030840001651087,0.031225300044752657,N/A
p3_find_n_smallest_number,prompt_2,70,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",100000,0.23262689996045083,0.24408434899989515,0.2734043999807909,N/A
p3_find_n_smallest_number,prompt_2,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",1000,0.005040000018198043,0.005560412999475375,0.008809100021608174,N/A
p3_find_n_smallest_number,prompt_2,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",10000,0.06433130003279075,0.06720370999828447,0.07391149998875335,N/A
p3_find_n_smallest_number,prompt_2,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",100000,0.7816940000047907,0.8291831860039384,0.9062272000010125,N/A
p3_find_n_smallest_number,prompt_2,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in smallest_k]']",1000,0.0052066000062040985,0.005833544000633992,0.011333600035868585,N/A
p3_find_n_smallest_number,prompt_2,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in smallest_k]']",10000,0.0526281000347808,0.05559831799939275,0.06687479995889589,N/A
p3_find_n_smallest_number,prompt_2,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in smallest_k]']",100000,0.7017347000073642,0.7475757189985598,0.8612169999978505,N/A
p3_find_n_smallest_number,prompt_2,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in min_heap]\n    return indexes']",1000,0.00461530004395172,0.004789342001313344,0.005579999997280538,N/A
p3_find_n_smallest_number,prompt_2,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in min_heap]\n    return indexes']",10000,0.04217949998565018,0.04480749100272078,0.09007660002680495,N/A
p3_find_n_smallest_number,prompt_2,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in min_heap]\n    return indexes']",100000,0.44657919998280704,0.4709336320013972,0.5109816000331193,N/A
p3_find_n_smallest_number,prompt_2,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",1000,0.005078499962110072,0.0056257779971929265,0.008272300008684397,N/A
p3_find_n_smallest_number,prompt_2,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",10000,0.06624849996296689,0.06962672000110615,0.07353799999691546,N/A
p3_find_n_smallest_number,prompt_2,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",100000,0.7872258999850601,0.8282755510008428,0.9192668999894522,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, zip(arg1, range(len(arg1))))\n    indexes = [index for _, index in k_smallest]\n    return indexes']",1000,0.003334100008942187,0.003540209998609498,0.009014400013256818,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, zip(arg1, range(len(arg1))))\n    indexes = [index for _, index in k_smallest]\n    return indexes']",10000,0.029071500001009554,0.031165594999329187,0.03783719998318702,N/A
p3_find_n_smallest_number,prompt_2,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest = heapq.nsmallest(arg2, zip(arg1, range(len(arg1))))\n    indexes = [index for _, index in k_smallest]\n    return indexes']",100000,0.31390389997977763,0.33511334400333,0.48416470002848655,N/A
p3_find_n_smallest_number,prompt_2,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result = [idx for val, idx in smallest_k]\n    return result']",1000,0.0070266000111587346,0.007594092996441759,0.00913399999262765,N/A
p3_find_n_smallest_number,prompt_2,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result = [idx for val, idx in smallest_k]\n    return result']",10000,0.08613680000416934,0.08961636399908457,0.09835359995486215,N/A
p3_find_n_smallest_number,prompt_2,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result = [idx for val, idx in smallest_k]\n    return result']",100000,1.0389284000266343,1.0865998539957218,1.1933463999885134,N/A
p3_find_n_smallest_number,prompt_2,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    index_num_pairs = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_num_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [index for _, index in k_smallest_pairs]\n    return k_smallest_indexes']",1000,0.006488299986813217,0.006853687001857907,0.010158299992326647,N/A
p3_find_n_smallest_number,prompt_2,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    index_num_pairs = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_num_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [index for _, index in k_smallest_pairs]\n    return k_smallest_indexes']",10000,0.06606209999881685,0.06794987400004175,0.08401140000205487,N/A
p3_find_n_smallest_number,prompt_2,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    index_num_pairs = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_num_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [index for _, index in k_smallest_pairs]\n    return k_smallest_indexes']",100000,0.7988323999452405,0.8508100979996379,0.9275896999752149,N/A
p3_find_n_smallest_number,prompt_2,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for _, idx in sorted(heap)]']",1000,0.0028827000060118735,0.0030619769939221443,0.003525499952957034,N/A
p3_find_n_smallest_number,prompt_2,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for _, idx in sorted(heap)]']",10000,0.029508300009183586,0.03068449800310191,0.03972269996302202,N/A
p3_find_n_smallest_number,prompt_2,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for _, idx in sorted(heap)]']",100000,0.29810890002408996,0.3157039630023064,0.3912335999775678,N/A
p3_find_n_smallest_number,prompt_2,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_elements]']",1000,0.006982299964874983,0.00759944100107532,0.009984900010749698,N/A
p3_find_n_smallest_number,prompt_2,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_elements]']",10000,0.0826048000017181,0.0892470369982766,0.10937980003654957,N/A
p3_find_n_smallest_number,prompt_2,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or not arg1 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_elements = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_elements]']",100000,1.0467857999610715,1.095909600002924,1.3012196000199765,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_k_indexes']",1000,0.0051927000167779624,0.005549927997053601,0.008850099984556437,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_k_indexes']",10000,0.06693849997827783,0.06881605899776332,0.07295209995936602,N/A
p3_find_n_smallest_number,prompt_2,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_k_indexes']",100000,0.7741065999725834,0.8513857270014705,1.368487700005062,N/A
p3_find_n_smallest_number,prompt_2,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        else:\n            heapq.heappushpop(heap, (-value, index))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",1000,0.00665090000256896,0.007156623002374545,0.012186800013296306,N/A
p3_find_n_smallest_number,prompt_2,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        else:\n            heapq.heappushpop(heap, (-value, index))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",10000,0.06637270003557205,0.06878113400074654,0.07845430000452325,N/A
p3_find_n_smallest_number,prompt_2,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        else:\n            heapq.heappushpop(heap, (-value, index))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",100000,0.6760171999922022,0.7162798270001076,1.0344985999981873,N/A
p3_find_n_smallest_number,prompt_2,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:k])]\n    heapq.heapify(min_heap)\n    for idx in range(k, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",1000,0.0022811999660916626,0.002429937003180385,0.0031165999826043844,N/A
p3_find_n_smallest_number,prompt_2,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:k])]\n    heapq.heapify(min_heap)\n    for idx in range(k, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",10000,0.02288619999308139,0.024153306002845057,0.029257699963636696,N/A
p3_find_n_smallest_number,prompt_2,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:k])]\n    heapq.heapify(min_heap)\n    for idx in range(k, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",100000,0.23129939998034388,0.2435708030022215,0.3357045999728143,N/A
p3_find_n_smallest_number,prompt_2,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_pairs]\n    return indexes']",1000,0.0044510000152513385,0.004807863002642989,0.006127399974502623,N/A
p3_find_n_smallest_number,prompt_2,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_pairs]\n    return indexes']",10000,0.04145090002566576,0.0437522610015003,0.047655000002123415,N/A
p3_find_n_smallest_number,prompt_2,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_pairs]\n    return indexes']",100000,0.43992070003878325,0.4680644139990909,0.5509880000026897,N/A
p3_find_n_smallest_number,prompt_2,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_elements = [(num, index) for index, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_elements)\n    return [index for _, index in k_smallest_elements]']",1000,0.005164699978195131,0.0055636309966212135,0.007252899988088757,N/A
p3_find_n_smallest_number,prompt_2,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_elements = [(num, index) for index, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_elements)\n    return [index for _, index in k_smallest_elements]']",10000,0.052064499992411584,0.056131579998182135,0.07285469997441396,N/A
p3_find_n_smallest_number,prompt_2,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_elements = [(num, index) for index, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_elements)\n    return [index for _, index in k_smallest_elements]']",100000,0.6988128999946639,0.750040390000795,0.8749483999563381,N/A
p3_find_n_smallest_number,prompt_2,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for val, idx in k_smallest]\n    return result_indexes']",1000,0.005328100000042468,0.005598618996446021,0.007229500042740256,N/A
p3_find_n_smallest_number,prompt_2,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for val, idx in k_smallest]\n    return result_indexes']",10000,0.052808100008405745,0.05530637999996543,0.08398310001939535,N/A
p3_find_n_smallest_number,prompt_2,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for val, idx in k_smallest]\n    return result_indexes']",100000,0.709888499986846,0.7450490170012927,0.8083719999995083,N/A
p3_find_n_smallest_number,prompt_2,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    min_elements = heapq.nsmallest(k, arg1)\n    indexes = []\n    for elem in min_elements:\n        indexes.append(arg1.index(elem))\n    return indexes']",1000,0.0021086999913677573,0.0021913430007407444,0.0025872999685816467,N/A
p3_find_n_smallest_number,prompt_2,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    min_elements = heapq.nsmallest(k, arg1)\n    indexes = []\n    for elem in min_elements:\n        indexes.append(arg1.index(elem))\n    return indexes']",10000,0.017353600007481873,0.018225421000970528,0.02790729998378083,N/A
p3_find_n_smallest_number,prompt_2,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    min_elements = heapq.nsmallest(k, arg1)\n    indexes = []\n    for elem in min_elements:\n        indexes.append(arg1.index(elem))\n    return indexes']",100000,0.16228040005080402,0.1714260430005379,0.20923059998312965,N/A
p3_find_n_smallest_number,prompt_2,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [idx for _, idx in k_smallest]']",1000,0.0051392000168561935,0.005568056003539823,0.009177699976135045,N/A
p3_find_n_smallest_number,prompt_2,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [idx for _, idx in k_smallest]']",10000,0.05369640002027154,0.05618266200064682,0.06590919999871403,N/A
p3_find_n_smallest_number,prompt_2,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [idx for _, idx in k_smallest]']",100000,0.7100959999952465,0.747727387000923,0.8334568000282161,N/A
p3_find_n_smallest_number,prompt_2,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    indices = [idx for val, idx in k_smallest]\n    return indices']",1000,0.007250200025737286,0.007625721002696082,0.009390800027176738,N/A
p3_find_n_smallest_number,prompt_2,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    indices = [idx for val, idx in k_smallest]\n    return indices']",10000,0.0853983000270091,0.08930328699585516,0.1095480999792926,N/A
p3_find_n_smallest_number,prompt_2,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    indices = [idx for val, idx in k_smallest]\n    return indices']",100000,1.0579074999550357,1.1037380759988447,1.2578931999742053,N/A
p3_find_n_smallest_number,prompt_2,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return sorted(k_smallest_indexes)']",1000,0.005210199975408614,0.00555410900269635,0.009140600042883307,N/A
p3_find_n_smallest_number,prompt_2,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return sorted(k_smallest_indexes)']",10000,0.06693929998436943,0.06997411400196142,0.07490859995596111,N/A
p3_find_n_smallest_number,prompt_2,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return sorted(k_smallest_indexes)']",100000,0.7970656999968924,0.8272050609986763,0.9802900000358932,N/A
p3_find_n_smallest_number,prompt_2,90,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, indexed_arr, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_tuples]\n    return k_smallest_indexes']",1000,0.006488099985290319,0.006822945996536873,0.010471399989910424,N/A
p3_find_n_smallest_number,prompt_2,90,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, indexed_arr, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_tuples]\n    return k_smallest_indexes']",10000,0.06477060000179335,0.06773587299860083,0.08157260000007227,N/A
p3_find_n_smallest_number,prompt_2,90,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, indexed_arr, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_tuples]\n    return k_smallest_indexes']",100000,0.8006083000218496,0.8416270029969746,0.9104261000175029,N/A
p3_find_n_smallest_number,prompt_2,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'Invalid value for k\')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for val, idx in k_smallest_elements]\n    return k_smallest_indexes']",1000,0.005182199995033443,0.005555657004006207,0.006222900003194809,N/A
p3_find_n_smallest_number,prompt_2,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'Invalid value for k\')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for val, idx in k_smallest_elements]\n    return k_smallest_indexes']",10000,0.052804999984800816,0.05512677300255746,0.06694220000645146,N/A
p3_find_n_smallest_number,prompt_2,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError(\'Invalid value for k\')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for val, idx in k_smallest_elements]\n    return k_smallest_indexes']",100000,0.7026284000021406,0.7470778770028846,0.9084210000000894,N/A
p3_find_n_smallest_number,prompt_2,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes = [item[1] for item in k_smallest]\n    return indexes']",1000,0.006496800051536411,0.006738002000492998,0.00801099999807775,N/A
p3_find_n_smallest_number,prompt_2,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes = [item[1] for item in k_smallest]\n    return indexes']",10000,0.06841479998547584,0.0713933559996076,0.07918439997592941,N/A
p3_find_n_smallest_number,prompt_2,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes = [item[1] for item in k_smallest]\n    return indexes']",100000,0.806466200039722,0.8588286070025061,1.003949299978558,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        if len(heap) < k:\n            heapq.heappush(heap, (-num, idx))\n        elif -num > heap[0][0]:\n            heapq.heappushpop(heap, (-num, idx))\n    result = [idx for _, idx in heap]\n    return sorted(result)']",1000,0.004525500000454485,0.004759856000891887,0.006503199983853847,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        if len(heap) < k:\n            heapq.heappush(heap, (-num, idx))\n        elif -num > heap[0][0]:\n            heapq.heappushpop(heap, (-num, idx))\n    result = [idx for _, idx in heap]\n    return sorted(result)']",10000,0.04287720000138506,0.04475282800209243,0.05113660002825782,N/A
p3_find_n_smallest_number,prompt_2,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        if len(heap) < k:\n            heapq.heappush(heap, (-num, idx))\n        elif -num > heap[0][0]:\n            heapq.heappushpop(heap, (-num, idx))\n    result = [idx for _, idx in heap]\n    return sorted(result)']",100000,0.44039310002699494,0.4651307560032001,0.5105841999757104,N/A
p3_find_n_smallest_number,prompt_2,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The value k, indicating the number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",1000,0.005103300034534186,0.005432286003488116,0.007443399983458221,N/A
p3_find_n_smallest_number,prompt_2,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The value k, indicating the number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",10000,0.05300130002433434,0.05528327599982731,0.06667789997300133,N/A
p3_find_n_smallest_number,prompt_2,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The value k, indicating the number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",100000,0.7137637000414543,0.7471561099984683,0.9551914000185207,N/A
p3_find_n_smallest_number,prompt_2,95,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes_of_smallest = [index for index, value in smallest_elements]\n    return indexes_of_smallest""]",1000,0.0045328999985940754,0.004944196999422275,0.00705250003375113,N/A
p3_find_n_smallest_number,prompt_2,95,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes_of_smallest = [index for index, value in smallest_elements]\n    return indexes_of_smallest""]",10000,0.04236399999354035,0.044025774002657274,0.049274499993771315,N/A
p3_find_n_smallest_number,prompt_2,95,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the length of the array')\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes_of_smallest = [index for index, value in smallest_elements]\n    return indexes_of_smallest""]",100000,0.4463178000296466,0.47170419100148137,0.5572768999845721,N/A
p3_find_n_smallest_number,prompt_2,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(len(arg1), arg2)\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, indexed_array, key=lambda x: x[0])\n    smallest_indices = [element[1] for element in smallest_elements]\n    return smallest_indices']",1000,0.006483400007709861,0.006811615001643076,0.008602000016253442,N/A
p3_find_n_smallest_number,prompt_2,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(len(arg1), arg2)\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, indexed_array, key=lambda x: x[0])\n    smallest_indices = [element[1] for element in smallest_elements]\n    return smallest_indices']",10000,0.06486929999664426,0.06760318899992854,0.07774909998988733,N/A
p3_find_n_smallest_number,prompt_2,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(len(arg1), arg2)\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, indexed_array, key=lambda x: x[0])\n    smallest_indices = [element[1] for element in smallest_elements]\n    return smallest_indices']",100000,0.8066639000317082,0.8477168629999505,0.9420903000282124,N/A
p3_find_n_smallest_number,prompt_2,97,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be between 1 and the length of the list')\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indices = [index for _, index in heap]\n    return indices""]",1000,0.0030787999858148396,0.0033027150022098793,0.003743499983102083,N/A
p3_find_n_smallest_number,prompt_2,97,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be between 1 and the length of the list')\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indices = [index for _, index in heap]\n    return indices""]",10000,0.028515300014987588,0.030384548000292853,0.03504229994723573,N/A
p3_find_n_smallest_number,prompt_2,97,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be between 1 and the length of the list')\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indices = [index for _, index in heap]\n    return indices""]",100000,0.2942252000211738,0.3125191590015311,0.42838599998503923,N/A
p3_find_n_smallest_number,prompt_2,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or not arg1:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(k, heap)\n    indices = [idx for value, idx in k_smallest]\n    return indices']",1000,0.005240000027697533,0.005546282001305371,0.007136100030038506,N/A
p3_find_n_smallest_number,prompt_2,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or not arg1:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(k, heap)\n    indices = [idx for value, idx in k_smallest]\n    return indices']",10000,0.052102800051216036,0.056183153001475146,0.1460901999962516,N/A
p3_find_n_smallest_number,prompt_2,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or not arg1:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(k, heap)\n    indices = [idx for value, idx in k_smallest]\n    return indices']",100000,0.6965854000300169,0.7498909790016478,0.878478400001768,N/A
p3_find_n_smallest_number,prompt_2,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in smallest_k]']",1000,0.005064899974968284,0.0054467619973002,0.0067192999995313585,N/A
p3_find_n_smallest_number,prompt_2,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in smallest_k]']",10000,0.05227290000766516,0.056598231999087145,0.07142919994657859,N/A
p3_find_n_smallest_number,prompt_2,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in smallest_k]']",100000,0.6996481000096537,0.7357151480024914,0.8388090999796987,N/A
p3_find_n_smallest_number,prompt_2,100,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest']",1000,0.0030938000418245792,0.0033783339994261042,0.0045541999861598015,N/A
p3_find_n_smallest_number,prompt_2,100,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest']",10000,0.02889689995208755,0.030352128997910767,0.03659580001840368,N/A
p3_find_n_smallest_number,prompt_2,100,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest']",100000,0.293059199990239,0.31251515400130303,0.44383730000117794,N/A
p3_find_n_smallest_number,prompt_3,1,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (List[int]): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    List[int]: The indexes of the k smallest elements in the list.\n    """"""\n    k_smallest_values = nsmallest(arg2, arg1)\n    k_smallest_indexes = [i for i, val in enumerate(arg1) if val in k_smallest_values]\n    return k_smallest_indexes[:arg2]']",1000,0.004593899997416884,0.005107673999737017,0.008826400036923587,N/A
p3_find_n_smallest_number,prompt_3,1,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (List[int]): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    List[int]: The indexes of the k smallest elements in the list.\n    """"""\n    k_smallest_values = nsmallest(arg2, arg1)\n    k_smallest_indexes = [i for i, val in enumerate(arg1) if val in k_smallest_values]\n    return k_smallest_indexes[:arg2]']",10000,0.044016200001351535,0.04666753700235859,0.06633849994977936,N/A
p3_find_n_smallest_number,prompt_3,1,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (List[int]): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    List[int]: The indexes of the k smallest elements in the list.\n    """"""\n    k_smallest_values = nsmallest(arg2, arg1)\n    k_smallest_indexes = [i for i, val in enumerate(arg1) if val in k_smallest_values]\n    return k_smallest_indexes[:arg2]']",100000,0.4519050999660976,0.47987859099695923,0.5476221999851987,N/A
p3_find_n_smallest_number,prompt_3,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    return [index for value, index in k_smallest]']",1000,0.005112199985887855,0.005544372003641911,0.008050099946558475,N/A
p3_find_n_smallest_number,prompt_3,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    return [index for value, index in k_smallest]']",10000,0.05252890003612265,0.056222427001339385,0.07047179999062791,N/A
p3_find_n_smallest_number,prompt_3,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    return [index for value, index in k_smallest]']",100000,0.6957446999731474,0.7378801539976848,0.8118892000056803,N/A
p3_find_n_smallest_number,prompt_3,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004595700011122972,0.004863831001566723,0.0062055999878793955,N/A
p3_find_n_smallest_number,prompt_3,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.043140800029505044,0.044998257997795006,0.057900400017388165,N/A
p3_find_n_smallest_number,prompt_3,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.4476555000292137,0.47497678400191945,0.5378076999913901,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, number in enumerate(arg1):\n        heapq.heappush(heap, (number, index))\n    smallest_k_elements = heapq.nsmallest(arg2, heap)\n    indexes = [index for _, index in smallest_k_elements]\n    return indexes']",1000,0.009336200018879026,0.010157694000517949,0.01484870002605021,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, number in enumerate(arg1):\n        heapq.heappush(heap, (number, index))\n    smallest_k_elements = heapq.nsmallest(arg2, heap)\n    indexes = [index for _, index in smallest_k_elements]\n    return indexes']",10000,0.10625419998541474,0.11138247499766293,0.13107790000503883,N/A
p3_find_n_smallest_number,prompt_3,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, number in enumerate(arg1):\n        heapq.heappush(heap, (number, index))\n    smallest_k_elements = heapq.nsmallest(arg2, heap)\n    indexes = [index for _, index in smallest_k_elements]\n    return indexes']",100000,1.292533400002867,1.350637857001275,1.6576577000087127,N/A
p3_find_n_smallest_number,prompt_3,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for neg_val, idx in heap]']",1000,0.00283429998671636,0.0030823610012885184,0.005162400018889457,N/A
p3_find_n_smallest_number,prompt_3,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for neg_val, idx in heap]']",10000,0.02580370003124699,0.02724397100158967,0.03652560000773519,N/A
p3_find_n_smallest_number,prompt_3,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -heap[0][0] > arg1[idx]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[idx], idx))\n    return [idx for neg_val, idx in heap]']",100000,0.26054550003027543,0.30008141400292515,0.7252194000175223,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest_indices']",1000,0.0032053999602794647,0.0033751869999105112,0.007910899992566556,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest_indices']",10000,0.028739699977450073,0.030447587002418005,0.04259460000321269,N/A
p3_find_n_smallest_number,prompt_3,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest_indices']",100000,0.29490430001169443,0.31294702499813865,0.383277699991595,N/A
p3_find_n_smallest_number,prompt_3,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_k]\n    return indices']",1000,0.004515999986324459,0.004792494000284932,0.007424500014167279,N/A
p3_find_n_smallest_number,prompt_3,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_k]\n    return indices']",10000,0.041479600011371076,0.04370491900364868,0.05046689999289811,N/A
p3_find_n_smallest_number,prompt_3,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_k]\n    return indices']",100000,0.44504319998668507,0.46934499799564944,0.5034131000284106,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""\n    This function returns the indexes of the k smallest elements in the list arg1.\n    \n    :param arg1: List of integers.\n    :param arg2: Number of smallest elements to find.\n    :return: List of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    array_with_indexes = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, array_with_indexes, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in k_smallest]\n    return smallest_indexes']",1000,0.0064691000152379274,0.006851727002649568,0.010289400001056492,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""\n    This function returns the indexes of the k smallest elements in the list arg1.\n    \n    :param arg1: List of integers.\n    :param arg2: Number of smallest elements to find.\n    :return: List of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    array_with_indexes = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, array_with_indexes, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in k_smallest]\n    return smallest_indexes']",10000,0.06447330000810325,0.06689522399916313,0.07781250000698492,N/A
p3_find_n_smallest_number,prompt_3,8,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    """"""\n    This function returns the indexes of the k smallest elements in the list arg1.\n    \n    :param arg1: List of integers.\n    :param arg2: Number of smallest elements to find.\n    :return: List of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    array_with_indexes = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, array_with_indexes, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in k_smallest]\n    return smallest_indexes']",100000,0.8014424000284635,0.8620391679985915,1.2214265000075102,N/A
p3_find_n_smallest_number,prompt_3,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    - arg1: List of integers\n    - arg2: Integer representing \'k\', the number of smallest elements to find\n\n    Returns:\n    - List of indices of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for idx, val in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-val, idx))\n        elif val < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-val, idx))\n    indices = [idx for _, idx in max_heap]\n    return indices']",1000,0.004175699956249446,0.004478719001053832,0.008708300010766834,N/A
p3_find_n_smallest_number,prompt_3,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    - arg1: List of integers\n    - arg2: Integer representing \'k\', the number of smallest elements to find\n\n    Returns:\n    - List of indices of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for idx, val in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-val, idx))\n        elif val < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-val, idx))\n    indices = [idx for _, idx in max_heap]\n    return indices']",10000,0.038464700046461076,0.04099830400024075,0.05527920002350584,N/A
p3_find_n_smallest_number,prompt_3,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    - arg1: List of integers\n    - arg2: Integer representing \'k\', the number of smallest elements to find\n\n    Returns:\n    - List of indices of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for idx, val in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-val, idx))\n        elif val < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-val, idx))\n    indices = [idx for _, idx in max_heap]\n    return indices']",100000,0.39277639996726066,0.4194889360043453,0.4783760000136681,N/A
p3_find_n_smallest_number,prompt_3,10,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 (k) must be between 1 and the length of arg1 inclusive')\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    k_smallest_indexes = [index for _, index in k_smallest_pairs]\n    return k_smallest_indexes""]",1000,0.005235400050878525,0.005472324002184905,0.006911800010129809,N/A
p3_find_n_smallest_number,prompt_3,10,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 (k) must be between 1 and the length of arg1 inclusive')\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    k_smallest_indexes = [index for _, index in k_smallest_pairs]\n    return k_smallest_indexes""]",10000,0.05237029999261722,0.05469150699733291,0.06374959996901453,N/A
p3_find_n_smallest_number,prompt_3,10,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('arg2 (k) must be between 1 and the length of arg1 inclusive')\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    k_smallest_indexes = [index for _, index in k_smallest_pairs]\n    return k_smallest_indexes""]",100000,0.6958494000136852,0.7416296729986789,0.8107351000071503,N/A
p3_find_n_smallest_number,prompt_3,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.007785399968270212,0.008187532999436371,0.010878600005526096,N/A
p3_find_n_smallest_number,prompt_3,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.0871340999729,0.09205388200061862,0.10587080003460869,N/A
p3_find_n_smallest_number,prompt_3,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.9976307000033557,1.043709965000162,1.1650162999867462,N/A
p3_find_n_smallest_number,prompt_3,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004524499992839992,0.004868761998368427,0.009651000029407442,N/A
p3_find_n_smallest_number,prompt_3,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.042681300023104995,0.04409566199814435,0.05468470003688708,N/A
p3_find_n_smallest_number,prompt_3,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.44615540001541376,0.47413191799947524,0.5243008999968879,N/A
p3_find_n_smallest_number,prompt_3,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",1000,0.004556900006718934,0.005009993006824516,0.00768220005556941,N/A
p3_find_n_smallest_number,prompt_3,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",10000,0.04340189998038113,0.046107785999774935,0.05699579999782145,N/A
p3_find_n_smallest_number,prompt_3,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest]\n    return indices']",100000,0.45282679999945685,0.48160323799587784,0.6830329999793321,N/A
p3_find_n_smallest_number,prompt_3,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",1000,0.005210600036662072,0.0054699819954112175,0.0064771000179462135,N/A
p3_find_n_smallest_number,prompt_3,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",10000,0.06770090002100915,0.06979726900055538,0.07946669997181743,N/A
p3_find_n_smallest_number,prompt_3,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",100000,0.7885017999797128,0.8437525159999495,1.076569400029257,N/A
p3_find_n_smallest_number,prompt_3,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = heapq.nsmallest(arg2, arg1)\n    result = []\n    for num in heap:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",1000,0.0020330999977886677,0.0022281030024169013,0.0037684999988414347,N/A
p3_find_n_smallest_number,prompt_3,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = heapq.nsmallest(arg2, arg1)\n    result = []\n    for num in heap:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",10000,0.020696300023701042,0.022783898996422067,0.029040599998552352,N/A
p3_find_n_smallest_number,prompt_3,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = heapq.nsmallest(arg2, arg1)\n    result = []\n    for num in heap:\n        index = arg1.index(num)\n        result.append(index)\n    return result']",100000,0.16157639998709783,0.17346818100020756,0.26466799998888746,N/A
p3_find_n_smallest_number,prompt_3,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_values = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_values)\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",1000,0.005252400005701929,0.005451966003747657,0.00621840002713725,N/A
p3_find_n_smallest_number,prompt_3,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_values = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_values)\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",10000,0.05251220002537593,0.054940392000135035,0.06270760000916198,N/A
p3_find_n_smallest_number,prompt_3,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_values = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_values)\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",100000,0.7021329999552108,0.7381179639988114,0.8491248000063933,N/A
p3_find_n_smallest_number,prompt_3,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [index for index, value in k_smallest_elements]\n    return k_smallest_indexes']",1000,0.00453959999140352,0.004856652003363706,0.007821200008038431,N/A
p3_find_n_smallest_number,prompt_3,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [index for index, value in k_smallest_elements]\n    return k_smallest_indexes']",10000,0.042128900007810444,0.04418369400140364,0.051339700003154576,N/A
p3_find_n_smallest_number,prompt_3,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [index for index, value in k_smallest_elements]\n    return k_smallest_indexes']",100000,0.45079699996858835,0.47416491799987853,0.5743331999983639,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in min_heap]\n    indexes.sort()\n    return indexes']",1000,0.0024499999708496034,0.0026380850007990376,0.0034509000252000988,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in min_heap]\n    indexes.sort()\n    return indexes']",10000,0.02445530000841245,0.025513596000964752,0.028528900002129376,N/A
p3_find_n_smallest_number,prompt_3,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in min_heap]\n    indexes.sort()\n    return indexes']",100000,0.28586409997660667,0.29866931099968497,0.3349426999920979,N/A
p3_find_n_smallest_number,prompt_3,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    if k <= 0:\n        return []\n    min_heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(k):\n        _, index = heapq.heappop(min_heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",1000,0.005016100010834634,0.005249142000102438,0.008206799975596368,N/A
p3_find_n_smallest_number,prompt_3,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    if k <= 0:\n        return []\n    min_heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(k):\n        _, index = heapq.heappop(min_heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",10000,0.06608469999628142,0.0685616120020859,0.0771377999917604,N/A
p3_find_n_smallest_number,prompt_3,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = min(arg2, len(arg1))\n    if k <= 0:\n        return []\n    min_heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(k):\n        _, index = heapq.heappop(min_heap)\n        smallest_indexes.append(index)\n    return smallest_indexes']",100000,0.7711538000148721,0.792168018000666,0.93658169999253,N/A
p3_find_n_smallest_number,prompt_3,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The array to find the k smallest numbers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_indexes = [index for value, index in k_smallest]\n    return k_indexes']",1000,0.006505099998321384,0.006945587998488918,0.013553500000853091,N/A
p3_find_n_smallest_number,prompt_3,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The array to find the k smallest numbers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_indexes = [index for value, index in k_smallest]\n    return k_indexes']",10000,0.06571999995503575,0.06834776899660938,0.0798932000179775,N/A
p3_find_n_smallest_number,prompt_3,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The array to find the k smallest numbers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_indexes = [index for value, index in k_smallest]\n    return k_indexes']",100000,0.8087553000077605,0.841592536996468,0.9197232000296935,N/A
p3_find_n_smallest_number,prompt_3,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, _ in k_smallest]\n    return indices']",1000,0.00444029999198392,0.00492686299723573,0.008486800012178719,N/A
p3_find_n_smallest_number,prompt_3,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, _ in k_smallest]\n    return indices']",10000,0.04165110003668815,0.045432950000395066,0.09083699999609962,N/A
p3_find_n_smallest_number,prompt_3,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [i for i, _ in k_smallest]\n    return indices']",100000,0.4538326000329107,0.4719967790006194,0.5397892000037245,N/A
p3_find_n_smallest_number,prompt_3,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest_elements = [index for index, value in smallest_elements_with_indices]\n    return indices_of_smallest_elements']",1000,0.0046449999790638685,0.004808294998365454,0.006609699979890138,N/A
p3_find_n_smallest_number,prompt_3,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest_elements = [index for index, value in smallest_elements_with_indices]\n    return indices_of_smallest_elements']",10000,0.042501999996602535,0.044165807000244965,0.05185469996649772,N/A
p3_find_n_smallest_number,prompt_3,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest_elements = [index for index, value in smallest_elements_with_indices]\n    return indices_of_smallest_elements']",100000,0.4519240000518039,0.47771248000324706,0.7259788999799639,N/A
p3_find_n_smallest_number,prompt_3,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_list = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    indexes = [item[0] for item in k_smallest]\n    return indexes']",1000,0.005284600018057972,0.005501428997959011,0.006410399975720793,N/A
p3_find_n_smallest_number,prompt_3,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_list = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    indexes = [item[0] for item in k_smallest]\n    return indexes']",10000,0.053911899973172694,0.05649059799965471,0.07422059995587915,N/A
p3_find_n_smallest_number,prompt_3,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_list = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    indexes = [item[0] for item in k_smallest]\n    return indexes']",100000,0.6939520000014454,0.7449499399994965,0.8919868000084534,N/A
p3_find_n_smallest_number,prompt_3,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers (the unsorted array).\n    :param arg2: Integer (the number k).\n    :return: List of indexes of the k smallest numbers.\n    """"""\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [idx for _, idx in k_smallest]\n    return result_indexes']",1000,0.006483200006186962,0.007084295999957249,0.01397010002983734,N/A
p3_find_n_smallest_number,prompt_3,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers (the unsorted array).\n    :param arg2: Integer (the number k).\n    :return: List of indexes of the k smallest numbers.\n    """"""\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [idx for _, idx in k_smallest]\n    return result_indexes']",10000,0.06467900000279769,0.06761393700027839,0.0727698000264354,N/A
p3_find_n_smallest_number,prompt_3,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers (the unsorted array).\n    :param arg2: Integer (the number k).\n    :return: List of indexes of the k smallest numbers.\n    """"""\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [idx for _, idx in k_smallest]\n    return result_indexes']",100000,0.8136765000526793,0.853464372001472,0.9529875000007451,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indices = [pair[1] for pair in k_smallest]\n    return indices']",1000,0.005268800014164299,0.005697958002565428,0.007383699994534254,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indices = [pair[1] for pair in k_smallest]\n    return indices']",10000,0.053199200017843395,0.05557114000082947,0.06470170000102371,N/A
p3_find_n_smallest_number,prompt_3,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indices = [pair[1] for pair in k_smallest]\n    return indices']",100000,0.7036132999928668,0.7383849569997983,0.7914874000125565,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Return the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arg1)\n    k_smallest_indices = [item[1] for item in k_smallest]\n    return k_smallest_indices']",1000,0.005190900003071874,0.005714012002572417,0.00980830000480637,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Return the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arg1)\n    k_smallest_indices = [item[1] for item in k_smallest]\n    return k_smallest_indices']",10000,0.05274710000958294,0.055467072998872026,0.07090900000184774,N/A
p3_find_n_smallest_number,prompt_3,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Return the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_arg1 = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arg1)\n    k_smallest_indices = [item[1] for item in k_smallest]\n    return k_smallest_indices']",100000,0.7001380999572575,0.7350257489952492,0.8968887999653816,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest]']",1000,0.00457220000680536,0.004835809001815505,0.007236500037834048,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest]']",10000,0.04250300000421703,0.04429248400090728,0.05000719998497516,N/A
p3_find_n_smallest_number,prompt_3,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, value in k_smallest]']",100000,0.45204199996078387,0.47319438800041097,0.5198178999708034,N/A
p3_find_n_smallest_number,prompt_3,28,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise ValueError('arg1 must be a list and arg2 must be an integer.')\n    if arg2 <= 0:\n        raise ValueError('arg2 must be a positive integer.')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 must be less than or equal to the length of arg1.')\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest = [index for index, _ in smallest_elements_with_indices]\n    return indices_of_smallest""]",1000,0.004626100009772927,0.004882344000507146,0.006859000015538186,N/A
p3_find_n_smallest_number,prompt_3,28,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise ValueError('arg1 must be a list and arg2 must be an integer.')\n    if arg2 <= 0:\n        raise ValueError('arg2 must be a positive integer.')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 must be less than or equal to the length of arg1.')\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest = [index for index, _ in smallest_elements_with_indices]\n    return indices_of_smallest""]",10000,0.04299719998380169,0.04430502800096292,0.052704300032928586,N/A
p3_find_n_smallest_number,prompt_3,28,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not isinstance(arg2, int):\n        raise ValueError('arg1 must be a list and arg2 must be an integer.')\n    if arg2 <= 0:\n        raise ValueError('arg2 must be a positive integer.')\n    if arg2 > len(arg1):\n        raise ValueError('arg2 must be less than or equal to the length of arg1.')\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest = [index for index, _ in smallest_elements_with_indices]\n    return indices_of_smallest""]",100000,0.4485751999891363,0.47401439800160006,0.6374054999905638,N/A
p3_find_n_smallest_number,prompt_3,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.00522559997625649,0.005516970998723991,0.006924299988895655,N/A
p3_find_n_smallest_number,prompt_3,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06598940002731979,0.06894100199977402,0.07401930005289614,N/A
p3_find_n_smallest_number,prompt_3,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7711617000168189,0.7998688780009979,0.8383214000496082,N/A
p3_find_n_smallest_number,prompt_3,30,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.0011654000263661146,0.0013923279987648129,0.004949500027578324,N/A
p3_find_n_smallest_number,prompt_3,30,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.010100799961946905,0.017563398996717296,0.05351610004436225,N/A
p3_find_n_smallest_number,prompt_3,30,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.22281179996207356,0.450627583998139,0.7323870999971405,N/A
p3_find_n_smallest_number,prompt_3,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    smallest_indices = [item[1] for item in max_heap]\n    return smallest_indices']",1000,0.00284019997343421,0.0030147319991374387,0.0035468999994918704,N/A
p3_find_n_smallest_number,prompt_3,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    smallest_indices = [item[1] for item in max_heap]\n    return smallest_indices']",10000,0.02635459997691214,0.02738509799761232,0.029925099981483072,N/A
p3_find_n_smallest_number,prompt_3,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    smallest_indices = [item[1] for item in max_heap]\n    return smallest_indices']",100000,0.26313289999961853,0.27960341099998914,0.33881330001167953,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in heap]\n    indexes.sort()\n    return indexes']",1000,0.0023198999697342515,0.0024706679984228684,0.003555299947038293,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in heap]\n    indexes.sort()\n    return indexes']",10000,0.022678399982396513,0.023904828999657183,0.03207120002480224,N/A
p3_find_n_smallest_number,prompt_3,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in heap]\n    indexes.sort()\n    return indexes']",100000,0.23339330003364012,0.24758486499777063,0.27644780004629865,N/A
p3_find_n_smallest_number,prompt_3,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for val, idx in k_smallest_with_indices]\n    return k_smallest_indices']",1000,0.0052844000165350735,0.005537741999141872,0.006647699978202581,N/A
p3_find_n_smallest_number,prompt_3,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for val, idx in k_smallest_with_indices]\n    return k_smallest_indices']",10000,0.0523539999849163,0.055961455999640745,0.06930670002475381,N/A
p3_find_n_smallest_number,prompt_3,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for val, idx in k_smallest_with_indices]\n    return k_smallest_indices']",100000,0.7096362999873236,0.7573326639964943,1.2406345999916084,N/A
p3_find_n_smallest_number,prompt_3,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes""]",1000,0.00453959999140352,0.004810432000667788,0.005792599986307323,N/A
p3_find_n_smallest_number,prompt_3,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes""]",10000,0.04191580001497641,0.04419046299997717,0.05432480003219098,N/A
p3_find_n_smallest_number,prompt_3,34,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('arg2 cannot be greater than the length of arg1')\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes""]",100000,0.4498565000249073,0.47568356999894607,0.914633699983824,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indexes']",1000,0.005251999944448471,0.005539808994508348,0.00639609998324886,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indexes']",10000,0.06712360004894435,0.06872500799712725,0.0736806999775581,N/A
p3_find_n_smallest_number,prompt_3,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indexes']",100000,0.8135455999872647,0.8375306550000096,0.8911027999711223,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indices of the k smallest numbers.\n    """"""\n    if arg2 > len(arg1) or arg2 <= 0:\n        raise ValueError(\'The value of k should be in the range 1 to the length of the list\')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest_pairs]']",1000,0.005225899978540838,0.005534247003379278,0.006764499994460493,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indices of the k smallest numbers.\n    """"""\n    if arg2 > len(arg1) or arg2 <= 0:\n        raise ValueError(\'The value of k should be in the range 1 to the length of the list\')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest_pairs]']",10000,0.05210850003641099,0.05581133699975908,0.09600479999789968,N/A
p3_find_n_smallest_number,prompt_3,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indices of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indices of the k smallest numbers.\n    """"""\n    if arg2 > len(arg1) or arg2 <= 0:\n        raise ValueError(\'The value of k should be in the range 1 to the length of the list\')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest_pairs]']",100000,0.7125853000325151,0.7460648399969796,0.9179966999799944,N/A
p3_find_n_smallest_number,prompt_3,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.005210199975408614,0.005550223996979184,0.008957199985161424,N/A
p3_find_n_smallest_number,prompt_3,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.06769070000154898,0.06962831300043035,0.09006560000125319,N/A
p3_find_n_smallest_number,prompt_3,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,0.7947715999907814,0.8169769760000054,0.8723844999913126,N/A
p3_find_n_smallest_number,prompt_3,38,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for number in k_smallest:\n        index = arg1.index(number)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.0011624000035226345,0.0013017459999537094,0.004890700045507401,N/A
p3_find_n_smallest_number,prompt_3,38,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for number in k_smallest:\n        index = arg1.index(number)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.010435400006826967,0.017633417000179178,0.06311240000650287,N/A
p3_find_n_smallest_number,prompt_3,38,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for number in k_smallest:\n        index = arg1.index(number)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.22347420000005513,0.44949465100071395,0.661270999989938,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",1000,0.0023074999917298555,0.0025168119987938552,0.004314900026656687,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",10000,0.02300929999910295,0.024175564001197927,0.03044079995015636,N/A
p3_find_n_smallest_number,prompt_3,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return None\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",100000,0.23732070002006367,0.24767014700104484,0.289876600028947,N/A
p3_find_n_smallest_number,prompt_3,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -heap[0][0] > num:\n            heapq.heappushpop(heap, (-num, i))\n    indices = sorted([index for _, index in heap])\n    return indices']",1000,0.004150399996433407,0.004369643998797983,0.0054632999817840755,N/A
p3_find_n_smallest_number,prompt_3,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -heap[0][0] > num:\n            heapq.heappushpop(heap, (-num, i))\n    indices = sorted([index for _, index in heap])\n    return indices']",10000,0.04000069998437539,0.04167793800123036,0.04835370002547279,N/A
p3_find_n_smallest_number,prompt_3,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -heap[0][0] > num:\n            heapq.heappushpop(heap, (-num, i))\n    indices = sorted([index for _, index in heap])\n    return indices']",100000,0.40446279995376244,0.42373415700218175,0.47215300000971183,N/A
p3_find_n_smallest_number,prompt_3,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",1000,0.004598700033966452,0.004950354006723501,0.006772199994884431,N/A
p3_find_n_smallest_number,prompt_3,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",10000,0.04220530000748113,0.044719125998672095,0.05486249999376014,N/A
p3_find_n_smallest_number,prompt_3,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes']",100000,0.44741580000845715,0.4741967099992326,0.5781535999849439,N/A
p3_find_n_smallest_number,prompt_3,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    smallest_indexes = [idx for _, idx in heap]\n    return smallest_indexes']",1000,0.0027138000004924834,0.0029007350007304923,0.0034592999727465212,N/A
p3_find_n_smallest_number,prompt_3,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    smallest_indexes = [idx for _, idx in heap]\n    return smallest_indexes']",10000,0.025675499986391515,0.027378089997801,0.0351407999987714,N/A
p3_find_n_smallest_number,prompt_3,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    smallest_indexes = [idx for _, idx in heap]\n    return smallest_indexes']",100000,0.26663209998514503,0.27875628100067845,0.366941999993287,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result_indexes = [index for _, index in k_smallest]\n    return result_indexes']",1000,0.008317300002090633,0.009361012003500946,0.01723730005323887,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result_indexes = [index for _, index in k_smallest]\n    return result_indexes']",10000,0.09835149999707937,0.10292243199772201,0.12768320000031963,N/A
p3_find_n_smallest_number,prompt_3,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result_indexes = [index for _, index in k_smallest]\n    return result_indexes']",100000,1.1636235999758355,1.2073420029995032,1.2979611000046134,N/A
p3_find_n_smallest_number,prompt_3,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest]\n    return indices']",1000,0.004614200035575777,0.004843040998093784,0.0061234000022523105,N/A
p3_find_n_smallest_number,prompt_3,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest]\n    return indices']",10000,0.0429275999777019,0.044447226999327544,0.050747300032526255,N/A
p3_find_n_smallest_number,prompt_3,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest]\n    return indices']",100000,0.4499702000175603,0.4728640679968521,0.5831082999939099,N/A
p3_find_n_smallest_number,prompt_3,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",1000,0.005136899999342859,0.005716801999951713,0.011829700029920787,N/A
p3_find_n_smallest_number,prompt_3,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",10000,0.05244679999304935,0.05534040799946524,0.07088730001123622,N/A
p3_find_n_smallest_number,prompt_3,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",100000,0.6988180000334978,0.7426342530030524,0.8122559000039473,N/A
p3_find_n_smallest_number,prompt_3,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",1000,0.00592349999351427,0.006285330000682734,0.011347000021487474,N/A
p3_find_n_smallest_number,prompt_3,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",10000,0.05542520002927631,0.05763097199902404,0.08328590000746772,N/A
p3_find_n_smallest_number,prompt_3,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, ((val, idx) for idx, val in enumerate(arg1)))\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",100000,0.5544104999862611,0.5875159160030308,0.6574836000218056,N/A
p3_find_n_smallest_number,prompt_3,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    return [index for _, index in k_smallest]']",1000,0.00967780000064522,0.01024336700211279,0.0165493999957107,N/A
p3_find_n_smallest_number,prompt_3,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    return [index for _, index in k_smallest]']",10000,0.10970029997406527,0.11323376899585127,0.14212310005677864,N/A
p3_find_n_smallest_number,prompt_3,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    return [index for _, index in k_smallest]']",100000,1.2715611000312492,1.3281640319962753,1.4912176000070758,N/A
p3_find_n_smallest_number,prompt_3,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [index for index, value in k_smallest_pairs]\n    return k_smallest_indexes']",1000,0.004596900020260364,0.0048144119995413345,0.006540599977597594,N/A
p3_find_n_smallest_number,prompt_3,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [index for index, value in k_smallest_pairs]\n    return k_smallest_indexes']",10000,0.042353999975603074,0.0444937539997045,0.05213159997947514,N/A
p3_find_n_smallest_number,prompt_3,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_pairs = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    k_smallest_indexes = [index for index, value in k_smallest_pairs]\n    return k_smallest_indexes']",100000,0.4467816000105813,0.4725366449996363,0.5472723999992013,N/A
p3_find_n_smallest_number,prompt_3,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_k]']",1000,0.00504479999653995,0.005468537001870572,0.007366599980741739,N/A
p3_find_n_smallest_number,prompt_3,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_k]']",10000,0.053111699991859496,0.055799051001667974,0.06289419997483492,N/A
p3_find_n_smallest_number,prompt_3,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, heap)\n    return [idx for val, idx in smallest_k]']",100000,0.7092219000332989,0.7490100120013813,0.8860477000125684,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((value, index) for index, value in enumerate(arg1)))\n    smallest_indexes = [element[1] for element in smallest_elements]\n    return smallest_indexes']",1000,0.0057137999683618546,0.006138788002426736,0.007436299987602979,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((value, index) for index, value in enumerate(arg1)))\n    smallest_indexes = [element[1] for element in smallest_elements]\n    return smallest_indexes']",10000,0.05432190001010895,0.05715277999697719,0.07048870000289753,N/A
p3_find_n_smallest_number,prompt_3,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(arg2, ((value, index) for index, value in enumerate(arg1)))\n    smallest_indexes = [element[1] for element in smallest_elements]\n    return smallest_indexes']",100000,0.5649083000025712,0.588014074001112,0.8202287000021897,N/A
p3_find_n_smallest_number,prompt_3,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",1000,0.004389400011859834,0.0047574079985497515,0.007900900032836944,N/A
p3_find_n_smallest_number,prompt_3,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",10000,0.041647100006230175,0.04428023000073154,0.06365690001985058,N/A
p3_find_n_smallest_number,prompt_3,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in k_smallest]\n    return indices']",100000,0.44334470003377646,0.4697922360006487,0.5326793999993242,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes_of_k_smallest = [idx for _, idx in k_smallest_elements]\n    return indexes_of_k_smallest']",1000,0.006252899998798966,0.006956072998582386,0.012193300004582852,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes_of_k_smallest = [idx for _, idx in k_smallest_elements]\n    return indexes_of_k_smallest']",10000,0.06474270002217963,0.06848273899697233,0.08169650001218542,N/A
p3_find_n_smallest_number,prompt_3,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes_of_k_smallest = [idx for _, idx in k_smallest_elements]\n    return indexes_of_k_smallest']",100000,0.7958488999865949,0.8394591839972417,0.924978099996224,N/A
p3_find_n_smallest_number,prompt_3,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",1000,0.005149300035554916,0.005564286001608707,0.008347099996171892,N/A
p3_find_n_smallest_number,prompt_3,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",10000,0.05279210000298917,0.056047690000850706,0.06649950001155958,N/A
p3_find_n_smallest_number,prompt_3,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",100000,0.7114117000019178,0.7434141020005336,0.7998516000225209,N/A
p3_find_n_smallest_number,prompt_3,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in min_heap]\n    return indexes']",1000,0.00227719999384135,0.0024258799996459855,0.0030400999821722507,N/A
p3_find_n_smallest_number,prompt_3,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in min_heap]\n    return indexes']",10000,0.022250000038184226,0.023592329000239262,0.028847999987192452,N/A
p3_find_n_smallest_number,prompt_3,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    indexes = [idx for val, idx in min_heap]\n    return indexes']",100000,0.23282729997299612,0.24571826200233773,0.37834579998161644,N/A
p3_find_n_smallest_number,prompt_3,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest = [index for value, index in smallest_with_indices]\n    return indices_of_smallest']",1000,0.004587399947922677,0.004833045998238959,0.007501099957153201,N/A
p3_find_n_smallest_number,prompt_3,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest = [index for value, index in smallest_with_indices]\n    return indices_of_smallest']",10000,0.04228460002923384,0.04449036300065927,0.07423250004649162,N/A
p3_find_n_smallest_number,prompt_3,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_smallest = [index for value, index in smallest_with_indices]\n    return indices_of_smallest']",100000,0.44661660003475845,0.4694724329991732,0.588252299989108,N/A
p3_find_n_smallest_number,prompt_3,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i in range(min(len(arg1), arg2)):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arg1[i], i))\n    indices = [index for _, index in min_heap]\n    indices.sort()\n    return indices']",1000,0.0031060000183060765,0.003283732001436874,0.0045128000201657414,N/A
p3_find_n_smallest_number,prompt_3,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i in range(min(len(arg1), arg2)):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arg1[i], i))\n    indices = [index for _, index in min_heap]\n    indices.sort()\n    return indices']",10000,0.029588600038550794,0.032417781000258404,0.1381355000194162,N/A
p3_find_n_smallest_number,prompt_3,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for i in range(min(len(arg1), arg2)):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arg1[i], i))\n    indices = [index for _, index in min_heap]\n    indices.sort()\n    return indices']",100000,0.30103680002503097,0.3151389130030293,0.3767830000142567,N/A
p3_find_n_smallest_number,prompt_3,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [element[0] for element in smallest_elements]\n    return indexes']",1000,0.004594199999701232,0.004812064999132417,0.005442399997264147,N/A
p3_find_n_smallest_number,prompt_3,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [element[0] for element in smallest_elements]\n    return indexes']",10000,0.041872400033753365,0.04408245899772737,0.05039669998222962,N/A
p3_find_n_smallest_number,prompt_3,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [element[0] for element in smallest_elements]\n    return indexes']",100000,0.4441559999831952,0.470689152002451,0.5452323000063188,N/A
p3_find_n_smallest_number,prompt_3,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    indexes = [index for _, index in min_heap]\n    indexes.sort()\n    return indexes']",1000,0.0024281999794766307,0.0025641769979847595,0.002845299954060465,N/A
p3_find_n_smallest_number,prompt_3,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    indexes = [index for _, index in min_heap]\n    indexes.sort()\n    return indexes']",10000,0.023393500014208257,0.02490131700236816,0.03158509999047965,N/A
p3_find_n_smallest_number,prompt_3,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    indexes = [index for _, index in min_heap]\n    indexes.sort()\n    return indexes']",100000,0.2845810999860987,0.30010877099644856,0.39070400001946837,N/A
p3_find_n_smallest_number,prompt_3,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_elements]\n    return smallest_indexes']",1000,0.004549699951894581,0.004818584999302402,0.006547799974214286,N/A
p3_find_n_smallest_number,prompt_3,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_elements]\n    return smallest_indexes']",10000,0.042325899994466454,0.04488841799320653,0.057823199953418225,N/A
p3_find_n_smallest_number,prompt_3,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_elements]\n    return smallest_indexes']",100000,0.4479933999828063,0.47437723199895115,0.5257786000147462,N/A
p3_find_n_smallest_number,prompt_3,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_with_indices = heapq.nsmallest(arg2, min_heap)\n    k_smallest_indices = [idx for num, idx in k_smallest_with_indices]\n    return k_smallest_indices']",1000,0.007252699986565858,0.008059277003630995,0.01155650004511699,N/A
p3_find_n_smallest_number,prompt_3,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_with_indices = heapq.nsmallest(arg2, min_heap)\n    k_smallest_indices = [idx for num, idx in k_smallest_with_indices]\n    return k_smallest_indices']",10000,0.08575210004346445,0.09048639000044205,0.12147910002386197,N/A
p3_find_n_smallest_number,prompt_3,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_with_indices = heapq.nsmallest(arg2, min_heap)\n    k_smallest_indices = [idx for num, idx in k_smallest_with_indices]\n    return k_smallest_indices']",100000,1.0358763000112958,1.0904115009994713,1.5491950000287034,N/A
p3_find_n_smallest_number,prompt_3,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers `arg1` and an integer `arg2` representing the number of smallest elements to find.\n    It returns a list of indexes of the k smallest numbers in the `arg1`.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",1000,0.005190700001548976,0.005477845998248085,0.00684210000326857,N/A
p3_find_n_smallest_number,prompt_3,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers `arg1` and an integer `arg2` representing the number of smallest elements to find.\n    It returns a list of indexes of the k smallest numbers in the `arg1`.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",10000,0.06399629998486489,0.06795792399439961,0.07745490001980215,N/A
p3_find_n_smallest_number,prompt_3,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function takes an unsorted list of integers `arg1` and an integer `arg2` representing the number of smallest elements to find.\n    It returns a list of indexes of the k smallest numbers in the `arg1`.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",100000,0.7906117999809794,0.8218146899977,0.9339032999705523,N/A
p3_find_n_smallest_number,prompt_3,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function returns the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i in range(min(len(arg1), arg2)):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    return [index for value, index in min_heap]']",1000,0.002255600003991276,0.002427072002319619,0.004376400029286742,N/A
p3_find_n_smallest_number,prompt_3,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function returns the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i in range(min(len(arg1), arg2)):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    return [index for value, index in min_heap]']",10000,0.022441099979914725,0.02385788899497129,0.041311000008136034,N/A
p3_find_n_smallest_number,prompt_3,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function returns the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (list of int): The input list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i in range(min(len(arg1), arg2)):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[i], i))\n    return [index for value, index in min_heap]']",100000,0.23518909997073933,0.24871888999943623,0.36235549999400973,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (List[int]): The list of integers to search.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    List[int]: The indexes of the k smallest numbers in the list.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    paired_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, paired_list)\n    return [idx for val, idx in k_smallest_pairs]']",1000,0.005137500003911555,0.005555349002243019,0.008372200012672693,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (List[int]): The list of integers to search.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    List[int]: The indexes of the k smallest numbers in the list.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    paired_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, paired_list)\n    return [idx for val, idx in k_smallest_pairs]']",10000,0.05294619995402172,0.056166798002668654,0.06958250002935529,N/A
p3_find_n_smallest_number,prompt_3,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (List[int]): The list of integers to search.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    List[int]: The indexes of the k smallest numbers in the list.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    paired_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, paired_list)\n    return [idx for val, idx in k_smallest_pairs]']",100000,0.7092487000045367,0.7456469249998918,1.1191007000161335,N/A
p3_find_n_smallest_number,prompt_3,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    k_smallest_indexes = [idx for val, idx in k_smallest]\n    return k_smallest_indexes']",1000,0.005053000000771135,0.00557696700154338,0.011331800022162497,N/A
p3_find_n_smallest_number,prompt_3,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    k_smallest_indexes = [idx for val, idx in k_smallest]\n    return k_smallest_indexes']",10000,0.05318210000405088,0.05494155000022147,0.05881219997536391,N/A
p3_find_n_smallest_number,prompt_3,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    k_smallest_indexes = [idx for val, idx in k_smallest]\n    return k_smallest_indexes']",100000,0.7126972999540158,0.7458405079995282,0.9265682999975979,N/A
p3_find_n_smallest_number,prompt_3,65,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('The value of k (arg2) must be between 1 and the length of arg1.')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes = [index for value, index in k_smallest_with_indices]\n    return indexes""]",1000,0.006501100026071072,0.006936919001745991,0.008938099956139922,N/A
p3_find_n_smallest_number,prompt_3,65,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('The value of k (arg2) must be between 1 and the length of arg1.')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes = [index for value, index in k_smallest_with_indices]\n    return indexes""]",10000,0.06529609998688102,0.06864336100057698,0.08371959999203682,N/A
p3_find_n_smallest_number,prompt_3,65,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('The value of k (arg2) must be between 1 and the length of arg1.')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indexes = [index for value, index in k_smallest_with_indices]\n    return indexes""]",100000,0.8109829999739304,0.8421689759992296,0.8958503999747336,N/A
p3_find_n_smallest_number,prompt_3,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    array = arg1\n    if k >= len(array):\n        return list(range(len(array)))\n    indexed_array = [(val, idx) for idx, val in enumerate(array)]\n    k_smallest = heapq.nsmallest(k, indexed_array, key=lambda x: x[0])\n    result_indices = [idx for val, idx in k_smallest]\n    return result_indices']",1000,0.00627610000083223,0.006946607996942475,0.009981099981814623,N/A
p3_find_n_smallest_number,prompt_3,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    array = arg1\n    if k >= len(array):\n        return list(range(len(array)))\n    indexed_array = [(val, idx) for idx, val in enumerate(array)]\n    k_smallest = heapq.nsmallest(k, indexed_array, key=lambda x: x[0])\n    result_indices = [idx for val, idx in k_smallest]\n    return result_indices']",10000,0.06626509997295216,0.06896008800074924,0.07866830000421032,N/A
p3_find_n_smallest_number,prompt_3,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    array = arg1\n    if k >= len(array):\n        return list(range(len(array)))\n    indexed_array = [(val, idx) for idx, val in enumerate(array)]\n    k_smallest = heapq.nsmallest(k, indexed_array, key=lambda x: x[0])\n    result_indices = [idx for val, idx in k_smallest]\n    return result_indices']",100000,0.804451199946925,0.8430234879965428,0.8942714000004344,N/A
p3_find_n_smallest_number,prompt_3,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_with_indexes = heapq.nsmallest(arg2, indexed_list)\n    return [idx for val, idx in smallest_with_indexes]']",1000,0.0052476999699138105,0.005625548000680282,0.009788699971977621,N/A
p3_find_n_smallest_number,prompt_3,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_with_indexes = heapq.nsmallest(arg2, indexed_list)\n    return [idx for val, idx in smallest_with_indexes]']",10000,0.05258990003494546,0.05557393500057515,0.06583650002721697,N/A
p3_find_n_smallest_number,prompt_3,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_with_indexes = heapq.nsmallest(arg2, indexed_list)\n    return [idx for val, idx in smallest_with_indexes]']",100000,0.7065275000059046,0.7519892450002953,0.9039816999575123,N/A
p3_find_n_smallest_number,prompt_3,68,"['import heapq\n\ndef funcImp(arg1, k):\n    if k <= 0 or not arg1:\n        return []\n    min_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    result = [index for index, value in min_elements]\n    return result']",1000,0.00460029998794198,0.004976493996218778,0.007724200026132166,N/A
p3_find_n_smallest_number,prompt_3,68,"['import heapq\n\ndef funcImp(arg1, k):\n    if k <= 0 or not arg1:\n        return []\n    min_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    result = [index for index, value in min_elements]\n    return result']",10000,0.042912500037346035,0.045590494998614305,0.06202159996610135,N/A
p3_find_n_smallest_number,prompt_3,68,"['import heapq\n\ndef funcImp(arg1, k):\n    if k <= 0 or not arg1:\n        return []\n    min_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    result = [index for index, value in min_elements]\n    return result']",100000,0.4505141999688931,0.4739008989959257,0.5205969999660738,N/A
p3_find_n_smallest_number,prompt_3,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",1000,0.009672300016973168,0.00999666299961973,0.011308400018606335,N/A
p3_find_n_smallest_number,prompt_3,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",10000,0.1082458000164479,0.1116520150040742,0.12359259999357164,N/A
p3_find_n_smallest_number,prompt_3,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",100000,1.288029599993024,1.3362420840008418,1.5242785000009462,N/A
p3_find_n_smallest_number,prompt_3,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(value, idx) for idx, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for value, idx in smallest_k]\n    return indexes']",1000,0.00638119998620823,0.00683081999537535,0.007870899979025126,N/A
p3_find_n_smallest_number,prompt_3,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(value, idx) for idx, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for value, idx in smallest_k]\n    return indexes']",10000,0.06467460002750158,0.0678281959996093,0.08832849998725578,N/A
p3_find_n_smallest_number,prompt_3,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(value, idx) for idx, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    indexes = [idx for value, idx in smallest_k]\n    return indexes']",100000,0.8114992000046186,0.8475249959994108,0.9487387000117451,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for num, idx in sorted(min_heap)]']",1000,0.002298200037330389,0.0025061170011758806,0.005799400038085878,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for num, idx in sorted(min_heap)]']",10000,0.022912400017958134,0.024149389998638072,0.028068099985830486,N/A
p3_find_n_smallest_number,prompt_3,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for num, idx in sorted(min_heap)]']",100000,0.2342210999922827,0.24654089000017848,0.28000400000019,N/A
p3_find_n_smallest_number,prompt_3,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in heap]']",1000,0.004594199999701232,0.00479006499517709,0.005439499975182116,N/A
p3_find_n_smallest_number,prompt_3,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in heap]']",10000,0.042297800013329834,0.044086476000375116,0.047558799968101084,N/A
p3_find_n_smallest_number,prompt_3,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in heap]']",100000,0.4523555999621749,0.47200719300075433,0.5227209000149742,N/A
p3_find_n_smallest_number,prompt_3,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest_indices']",1000,0.0032092000474222004,0.0033672580047277734,0.004195399989839643,N/A
p3_find_n_smallest_number,prompt_3,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest_indices']",10000,0.029282899980898947,0.030416265999665484,0.0359032999840565,N/A
p3_find_n_smallest_number,prompt_3,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return k_smallest_indices']",100000,0.29537780000828207,0.31342917799949643,0.3503430000273511,N/A
p3_find_n_smallest_number,prompt_3,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005317699979059398,0.005761296001146547,0.010867300035897642,N/A
p3_find_n_smallest_number,prompt_3,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06830520002404228,0.07062570199545007,0.0780384999816306,N/A
p3_find_n_smallest_number,prompt_3,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7852621000492945,0.8087182599958033,0.9717682999907993,N/A
p3_find_n_smallest_number,prompt_3,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an \n    unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input array.\n    arg2 (int): The number k, specifying the number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    result = [idx for val, idx in heap]\n    return result']",1000,0.0027782999677583575,0.0030134679982438684,0.004593999998178333,N/A
p3_find_n_smallest_number,prompt_3,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an \n    unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input array.\n    arg2 (int): The number k, specifying the number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    result = [idx for val, idx in heap]\n    return result']",10000,0.026433899998664856,0.027591334995813666,0.03540900000371039,N/A
p3_find_n_smallest_number,prompt_3,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    This function finds the indexes of the k smallest numbers in an \n    unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input array.\n    arg2 (int): The number k, specifying the number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest elements.\n    """"""\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    result = [idx for val, idx in heap]\n    return result']",100000,0.26427679997868836,0.27937130200327376,0.3617292999988422,N/A
p3_find_n_smallest_number,prompt_3,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.0053875999874435365,0.005643624993390404,0.007265399966854602,N/A
p3_find_n_smallest_number,prompt_3,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.06777629995485768,0.06985509900201578,0.08942959998967126,N/A
p3_find_n_smallest_number,prompt_3,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.7949749999679625,0.8184078410029179,0.8752033000346273,N/A
p3_find_n_smallest_number,prompt_3,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.0045532999793067575,0.004813129999674857,0.006411100039258599,N/A
p3_find_n_smallest_number,prompt_3,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.04216059995815158,0.04410729100287426,0.05399119999492541,N/A
p3_find_n_smallest_number,prompt_3,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.44542469998123124,0.47119713500025684,0.5332619000109844,N/A
p3_find_n_smallest_number,prompt_3,78,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        raise ValueError('k should be in the range of 1 to the length of the list')\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes""]",1000,0.0044804000062868,0.004813383999280631,0.006215000001247972,N/A
p3_find_n_smallest_number,prompt_3,78,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        raise ValueError('k should be in the range of 1 to the length of the list')\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes""]",10000,0.0418550000176765,0.04384880800382234,0.054830500041134655,N/A
p3_find_n_smallest_number,prompt_3,78,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        raise ValueError('k should be in the range of 1 to the length of the list')\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in smallest_elements]\n    return indexes""]",100000,0.4452191999880597,0.46932428400730714,0.5542467999621294,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n        else:\n            heapq.heappush(heap, (arg1[i], i))\n            heapq.heappop(heap)\n    return [idx for val, idx in heap]']",1000,0.006264900031965226,0.006691040000296198,0.010010000027250499,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n        else:\n            heapq.heappush(heap, (arg1[i], i))\n            heapq.heappop(heap)\n    return [idx for val, idx in heap]']",10000,0.06117949995677918,0.06394014500372577,0.07756220002193004,N/A
p3_find_n_smallest_number,prompt_3,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[i], i))\n        else:\n            heapq.heappush(heap, (arg1[i], i))\n            heapq.heappop(heap)\n    return [idx for val, idx in heap]']",100000,0.6222425000160001,0.6515953609999269,0.7299513000180013,N/A
p3_find_n_smallest_number,prompt_3,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    for idx, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, idx))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, idx))\n    return [idx for _, idx in heap]']",1000,0.0045956000103615224,0.004860780001617968,0.008434400020632893,N/A
p3_find_n_smallest_number,prompt_3,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    for idx, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, idx))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, idx))\n    return [idx for _, idx in heap]']",10000,0.04372549999970943,0.045947905997745696,0.056484000000637025,N/A
p3_find_n_smallest_number,prompt_3,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    for idx, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, idx))\n        elif -num > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, idx))\n    return [idx for _, idx in heap]']",100000,0.44197430001804605,0.47120793199748734,0.5892106000101194,N/A
p3_find_n_smallest_number,prompt_3,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_numbers = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.0053601000108756125,0.0056282169988844544,0.007230399991385639,N/A
p3_find_n_smallest_number,prompt_3,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_numbers = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.053840900014620274,0.0561097859981237,0.06885010004043579,N/A
p3_find_n_smallest_number,prompt_3,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_numbers = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_numbers, key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.6961292000487447,0.7449623729998711,0.8441278000245802,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappushpop(heap, (-value, index))\n    indexes = [index for neg_value, index in heap]\n    return sorted(indexes)']",1000,0.004010200034826994,0.004336798001313582,0.005961499991826713,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappushpop(heap, (-value, index))\n    indexes = [index for neg_value, index in heap]\n    return sorted(indexes)']",10000,0.03947279998101294,0.04155841899744701,0.06263010000111535,N/A
p3_find_n_smallest_number,prompt_3,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappushpop(heap, (-value, index))\n    indexes = [index for neg_value, index in heap]\n    return sorted(indexes)']",100000,0.40316740004345775,0.428979145999765,0.4973939000046812,N/A
p3_find_n_smallest_number,prompt_3,83,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the number of elements in the array')\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        value = arg1[idx]\n        if value < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (value, idx))\n    smallest_k_indices = [idx for value, idx in min_heap]\n    return smallest_k_indices""]",1000,0.002432500012218952,0.0026297259953571486,0.0040490999817848206,N/A
p3_find_n_smallest_number,prompt_3,83,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the number of elements in the array')\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        value = arg1[idx]\n        if value < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (value, idx))\n    smallest_k_indices = [idx for value, idx in min_heap]\n    return smallest_k_indices""]",10000,0.02441070001805201,0.02599967500602361,0.03174930001841858,N/A
p3_find_n_smallest_number,prompt_3,83,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the number of elements in the array')\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        value = arg1[idx]\n        if value < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (value, idx))\n    smallest_k_indices = [idx for value, idx in min_heap]\n    return smallest_k_indices""]",100000,0.2565987999550998,0.27063857900269794,0.32139110000571236,N/A
p3_find_n_smallest_number,prompt_3,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return indexes']",1000,0.005243599996902049,0.005516730000381358,0.007693600025959313,N/A
p3_find_n_smallest_number,prompt_3,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return indexes']",10000,0.06831020000390708,0.06984046299767215,0.07493200001772493,N/A
p3_find_n_smallest_number,prompt_3,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return indexes']",100000,0.7855676999897696,0.8230942990008043,0.9241920000058599,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.005230800015851855,0.005520543999737128,0.007678399968426675,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.06763649999629706,0.07000372300040908,0.07938109996030107,N/A
p3_find_n_smallest_number,prompt_3,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list: A list of indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.7967944999691099,0.8302816049964167,1.1955200000084005,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indices']",1000,0.0031796999974176288,0.003436054000048898,0.005163099966011941,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indices']",10000,0.02904809999745339,0.03038924699591007,0.03917060000821948,N/A
p3_find_n_smallest_number,prompt_3,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_indices']",100000,0.2950842000427656,0.3166599280020455,0.6022264999919571,N/A
p3_find_n_smallest_number,prompt_3,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[idx], idx))\n    result = [idx for _, idx in heap]\n    return sorted(result)']",1000,0.0024711000151000917,0.0026172000012593343,0.0030061000143177807,N/A
p3_find_n_smallest_number,prompt_3,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[idx], idx))\n    result = [idx for _, idx in heap]\n    return sorted(result)']",10000,0.024072000000160187,0.025353574003092946,0.03176839998923242,N/A
p3_find_n_smallest_number,prompt_3,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heappushpop(heap, (arg1[idx], idx))\n    result = [idx for _, idx in heap]\n    return sorted(result)']",100000,0.28371879999758676,0.296303272000514,0.3306132000288926,N/A
p3_find_n_smallest_number,prompt_3,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    index_val_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_val_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indexes']",1000,0.006453600013628602,0.006806644000462257,0.008219300012569875,N/A
p3_find_n_smallest_number,prompt_3,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    index_val_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_val_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indexes']",10000,0.0645904999691993,0.06849750699941069,0.08137289999285713,N/A
p3_find_n_smallest_number,prompt_3,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    index_val_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_val_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indexes']",100000,0.8038251000107266,0.8392233079992002,0.9181667999946512,N/A
p3_find_n_smallest_number,prompt_3,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, index = heapq.heappop(heap)\n        k_smallest_indexes.append(index)\n    return k_smallest_indexes']",1000,0.005095499975141138,0.005512736001983285,0.008311700017657131,N/A
p3_find_n_smallest_number,prompt_3,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, index = heapq.heappop(heap)\n        k_smallest_indexes.append(index)\n    return k_smallest_indexes']",10000,0.06543879996752366,0.0686592010007007,0.0774933000211604,N/A
p3_find_n_smallest_number,prompt_3,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, index = heapq.heappop(heap)\n        k_smallest_indexes.append(index)\n    return k_smallest_indexes']",100000,0.763615200005006,0.8121310189983342,1.1104588999878615,N/A
p3_find_n_smallest_number,prompt_3,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for value, index in heap]\n    return indices']",1000,0.004596700018737465,0.004813506997306831,0.0057419000077061355,N/A
p3_find_n_smallest_number,prompt_3,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for value, index in heap]\n    return indices']",10000,0.04200329998275265,0.043755563999293375,0.05469520000042394,N/A
p3_find_n_smallest_number,prompt_3,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for value, index in heap]\n    return indices']",100000,0.4501181999803521,0.4761229679972166,0.8505814999807626,N/A
p3_find_n_smallest_number,prompt_3,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for val, idx in heap]']",1000,0.0022036999580450356,0.0023954149993369355,0.0032863999949768186,N/A
p3_find_n_smallest_number,prompt_3,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for val, idx in heap]']",10000,0.02252779999980703,0.023874272999819368,0.029897800006438047,N/A
p3_find_n_smallest_number,prompt_3,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    return [idx for val, idx in heap]']",100000,0.23282709997147322,0.24698843400052284,0.39475590002257377,N/A
p3_find_n_smallest_number,prompt_3,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indices']",1000,0.0062689000042155385,0.006872672002064064,0.010091800009831786,N/A
p3_find_n_smallest_number,prompt_3,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indices']",10000,0.0662360999849625,0.0694548310036771,0.1149845999898389,N/A
p3_find_n_smallest_number,prompt_3,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indices']",100000,0.8055246000294574,0.8399938929994823,0.9073329999810085,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        if heap:\n            smallest = heapq.heappop(heap)\n            result.append(smallest[1])\n    return result']",1000,0.005117099964991212,0.005351926999283023,0.006383500003721565,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        if heap:\n            smallest = heapq.heappop(heap)\n            result.append(smallest[1])\n    return result']",10000,0.06798100000014529,0.069666179997148,0.07236290001310408,N/A
p3_find_n_smallest_number,prompt_3,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        if heap:\n            smallest = heapq.heappop(heap)\n            result.append(smallest[1])\n    return result']",100000,0.7744752000435255,0.8004874359985115,0.8462413999950513,N/A
p3_find_n_smallest_number,prompt_3,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_indices = []\n    smallest_elements = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(smallest_elements, (value, index))\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(smallest_elements)[1])\n    return smallest_indices']",1000,0.007771300035528839,0.008262933999649249,0.011134999978821725,N/A
p3_find_n_smallest_number,prompt_3,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_indices = []\n    smallest_elements = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(smallest_elements, (value, index))\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(smallest_elements)[1])\n    return smallest_indices']",10000,0.0860419999808073,0.08984881199896336,0.10912100004497916,N/A
p3_find_n_smallest_number,prompt_3,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_indices = []\n    smallest_elements = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(smallest_elements, (value, index))\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(smallest_elements)[1])\n    return smallest_indices']",100000,0.9946625999873504,1.044571116999723,1.1008750000037253,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    return [idx for _, idx in heapq.nsmallest(arg2, min_heap)]']",1000,0.0024271999718621373,0.002709267002646811,0.0054994000238366425,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    return [idx for _, idx in heapq.nsmallest(arg2, min_heap)]']",10000,0.024207099981140345,0.025467077999492174,0.03588769998168573,N/A
p3_find_n_smallest_number,prompt_3,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    return [idx for _, idx in heapq.nsmallest(arg2, min_heap)]']",100000,0.28814179997425526,0.3001833970018197,0.3724768999963999,N/A
p3_find_n_smallest_number,prompt_3,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return sorted(smallest_indices)']",1000,0.005106199998408556,0.005551244006492198,0.007956700050272048,N/A
p3_find_n_smallest_number,prompt_3,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return sorted(smallest_indices)']",10000,0.06618390005314723,0.0688891269970918,0.07523409998975694,N/A
p3_find_n_smallest_number,prompt_3,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return sorted(smallest_indices)']",100000,0.7742103999480605,0.8046585420030169,1.1214218000532128,N/A
p3_find_n_smallest_number,prompt_3,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        k_smallest_indices.append(idx)\n    return k_smallest_indices']",1000,0.005061900010332465,0.005433625000878237,0.006935600016731769,N/A
p3_find_n_smallest_number,prompt_3,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        k_smallest_indices.append(idx)\n    return k_smallest_indices']",10000,0.06622999999672174,0.0689316050009802,0.09285119996638969,N/A
p3_find_n_smallest_number,prompt_3,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        k_smallest_indices.append(idx)\n    return k_smallest_indices']",100000,0.7754463999881409,0.8095392880000872,1.0225751000107266,N/A
p3_find_n_smallest_number,prompt_3,98,"['from heapq import nsmallest\nfrom heapq import heapify\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = nsmallest(arg2, indexed_list)\n    result = [idx for val, idx in k_smallest]\n    return result']",1000,0.005247500026598573,0.005539818999823183,0.008950599993113428,N/A
p3_find_n_smallest_number,prompt_3,98,"['from heapq import nsmallest\nfrom heapq import heapify\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = nsmallest(arg2, indexed_list)\n    result = [idx for val, idx in k_smallest]\n    return result']",10000,0.052848300023470074,0.055215085001545955,0.06314270000439137,N/A
p3_find_n_smallest_number,prompt_3,98,"['from heapq import nsmallest\nfrom heapq import heapify\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = nsmallest(arg2, indexed_list)\n    result = [idx for val, idx in k_smallest]\n    return result']",100000,0.6962056999909692,0.7428154500026721,0.7976883000228554,N/A
p3_find_n_smallest_number,prompt_3,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Args:\n    - arg1: list of integers (the input array)\n    - arg2: integer (k, the number of smallest elements to find)\n    \n    Returns:\n    - list of integers (indexes of the k smallest elements)\n    """"""\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [idx for value, idx in smallest_k_tuples]\n    return result_indexes']",1000,0.006491200008895248,0.006895361000206321,0.01032530004158616,N/A
p3_find_n_smallest_number,prompt_3,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Args:\n    - arg1: list of integers (the input array)\n    - arg2: integer (k, the number of smallest elements to find)\n    \n    Returns:\n    - list of integers (indexes of the k smallest elements)\n    """"""\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [idx for value, idx in smallest_k_tuples]\n    return result_indexes']",10000,0.06504539999878034,0.06804055600252468,0.07492079999065027,N/A
p3_find_n_smallest_number,prompt_3,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Args:\n    - arg1: list of integers (the input array)\n    - arg2: integer (k, the number of smallest elements to find)\n    \n    Returns:\n    - list of integers (indexes of the k smallest elements)\n    """"""\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k_tuples = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [idx for value, idx in smallest_k_tuples]\n    return result_indexes']",100000,0.8027425000327639,0.8293658170034177,0.8772722000139765,N/A
p3_find_n_smallest_number,prompt_3,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n\n    def find_k_smallest_indices(array, k):\n        indexed_array = [(val, idx) for idx, val in enumerate(array)]\n        smallest = heapq.nsmallest(k, indexed_array)\n        smallest_indices = [idx for val, idx in smallest]\n        return smallest_indices\n    return find_k_smallest_indices(arg1, arg2)']",1000,0.0050888999830931425,0.005506480002077296,0.007159600034356117,N/A
p3_find_n_smallest_number,prompt_3,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n\n    def find_k_smallest_indices(array, k):\n        indexed_array = [(val, idx) for idx, val in enumerate(array)]\n        smallest = heapq.nsmallest(k, indexed_array)\n        smallest_indices = [idx for val, idx in smallest]\n        return smallest_indices\n    return find_k_smallest_indices(arg1, arg2)']",10000,0.05265500000678003,0.05509365600009915,0.06605770002352074,N/A
p3_find_n_smallest_number,prompt_3,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n\n    def find_k_smallest_indices(array, k):\n        indexed_array = [(val, idx) for idx, val in enumerate(array)]\n        smallest = heapq.nsmallest(k, indexed_array)\n        smallest_indices = [idx for val, idx in smallest]\n        return smallest_indices\n    return find_k_smallest_indices(arg1, arg2)']",100000,0.7005962000112049,0.7371457330032718,0.7745372000499628,N/A
p3_find_n_smallest_number,prompt_4,1,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    smallest_elements_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_k_smallest = [index for index, element in smallest_elements_with_indices]\n    return indices_of_k_smallest']",1000,0.004609099996741861,0.004861061000265181,0.00683909998042509,N/A
p3_find_n_smallest_number,prompt_4,1,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    smallest_elements_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_k_smallest = [index for index, element in smallest_elements_with_indices]\n    return indices_of_k_smallest']",10000,0.041979100031312555,0.04436928800190799,0.05382039997493848,N/A
p3_find_n_smallest_number,prompt_4,1,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    smallest_elements_with_indices = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices_of_k_smallest = [index for index, element in smallest_elements_with_indices]\n    return indices_of_k_smallest']",100000,0.44634740002220497,0.471097145996755,0.548562900046818,N/A
p3_find_n_smallest_number,prompt_4,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.00520940002752468,0.00552677099884022,0.009785000002011657,N/A
p3_find_n_smallest_number,prompt_4,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.06705640000291169,0.06929835499962791,0.07151270000031218,N/A
p3_find_n_smallest_number,prompt_4,2,"['import heapq\nfrom typing import List\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.8005961999879219,0.8374837859964464,0.9040648000082001,N/A
p3_find_n_smallest_number,prompt_4,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes_of_k_smallest = [idx for value, idx in k_smallest]\n    return indexes_of_k_smallest']",1000,0.0052631000289693475,0.0056199799978639935,0.008540200011339039,N/A
p3_find_n_smallest_number,prompt_4,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes_of_k_smallest = [idx for value, idx in k_smallest]\n    return indexes_of_k_smallest']",10000,0.052579699957277626,0.055430242997827006,0.06319680000888184,N/A
p3_find_n_smallest_number,prompt_4,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes_of_k_smallest = [idx for value, idx in k_smallest]\n    return indexes_of_k_smallest']",100000,0.7023349999799393,0.7447138080006698,0.8063695000018924,N/A
p3_find_n_smallest_number,prompt_4,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for val, idx in k_smallest]\n    return indexes']",1000,0.007297899981494993,0.007721520995837636,0.012312999984715134,N/A
p3_find_n_smallest_number,prompt_4,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for val, idx in k_smallest]\n    return indexes']",10000,0.08553320000646636,0.0905275530036306,0.11306380003225058,N/A
p3_find_n_smallest_number,prompt_4,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    indexes = [idx for val, idx in k_smallest]\n    return indexes']",100000,1.043802699947264,1.0831889649957884,1.270534300012514,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr_with_index = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(arr_with_index)\n    k_smallest_idx = [heapq.heappop(arr_with_index)[1] for _ in range(arg2)]\n    return k_smallest_idx']",1000,0.005222100007813424,0.0054432439990341665,0.006523000018205494,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr_with_index = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(arr_with_index)\n    k_smallest_idx = [heapq.heappop(arr_with_index)[1] for _ in range(arg2)]\n    return k_smallest_idx']",10000,0.06416609999723732,0.06679548399872147,0.08226299996022135,N/A
p3_find_n_smallest_number,prompt_4,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr_with_index = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(arr_with_index)\n    k_smallest_idx = [heapq.heappop(arr_with_index)[1] for _ in range(arg2)]\n    return k_smallest_idx']",100000,0.7725327999796718,0.801629289003904,0.8653033000300638,N/A
p3_find_n_smallest_number,prompt_4,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    result = [index for _, index in heap]\n    return result']",1000,0.004015399958007038,0.004263946002465673,0.004877900006249547,N/A
p3_find_n_smallest_number,prompt_4,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    result = [index for _, index in heap]\n    return result']",10000,0.038715200033038855,0.04110588600102347,0.04905560001498088,N/A
p3_find_n_smallest_number,prompt_4,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif num < -heap[0][0]:\n            heapq.heappushpop(heap, (-num, i))\n    result = [index for _, index in heap]\n    return result']",100000,0.39879110001493245,0.42076856699888593,0.4818554999656044,N/A
p3_find_n_smallest_number,prompt_4,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indices = []\n    for _ in range(arg2):\n        smallest_k_indices.append(heapq.heappop(heap)[1])\n    return smallest_k_indices']",1000,0.005197099992074072,0.00547890400106553,0.006600299966521561,N/A
p3_find_n_smallest_number,prompt_4,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indices = []\n    for _ in range(arg2):\n        smallest_k_indices.append(heapq.heappop(heap)[1])\n    return smallest_k_indices']",10000,0.06663259997731075,0.06941863600048237,0.07673750002868474,N/A
p3_find_n_smallest_number,prompt_4,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_k_indices = []\n    for _ in range(arg2):\n        smallest_k_indices.append(heapq.heappop(heap)[1])\n    return smallest_k_indices']",100000,0.8105679000145756,0.835731072006165,0.9417067000176758,N/A
p3_find_n_smallest_number,prompt_4,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    indexes = [idx for num, idx in k_smallest]\n    return indexes']",1000,0.007255800010170788,0.007774677001289092,0.013294800010044128,N/A
p3_find_n_smallest_number,prompt_4,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    indexes = [idx for num, idx in k_smallest]\n    return indexes']",10000,0.08648589998483658,0.08971204599831253,0.09914329997263849,N/A
p3_find_n_smallest_number,prompt_4,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    indexes = [idx for num, idx in k_smallest]\n    return indexes']",100000,1.032262200023979,1.0820391129975906,1.290139699995052,N/A
p3_find_n_smallest_number,prompt_4,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",1000,0.007830100017599761,0.012537171001313255,0.02843340003164485,N/A
p3_find_n_smallest_number,prompt_4,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",10000,0.08673720003571361,0.0981073810037924,0.1791215999983251,N/A
p3_find_n_smallest_number,prompt_4,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(heap, (num, i))\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indexes']",100000,1.0134983000461943,1.0514867109979968,1.2895444000023417,N/A
p3_find_n_smallest_number,prompt_4,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-value, i) for i, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",1000,0.0027461000136099756,0.0030210130015620963,0.004520700022112578,N/A
p3_find_n_smallest_number,prompt_4,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-value, i) for i, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",10000,0.02636779996100813,0.027617109997663647,0.033948600001167506,N/A
p3_find_n_smallest_number,prompt_4,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-value, i) for i, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",100000,0.2652327999821864,0.27783345700299833,0.3113547000102699,N/A
p3_find_n_smallest_number,prompt_4,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(k, heap)\n    indices = [item[1] for item in k_smallest]\n    return indices']",1000,0.007018100004643202,0.007742913000984117,0.013000599981751293,N/A
p3_find_n_smallest_number,prompt_4,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(k, heap)\n    indices = [item[1] for item in k_smallest]\n    return indices']",10000,0.08484069997211918,0.08895279999938793,0.09268490003887564,N/A
p3_find_n_smallest_number,prompt_4,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(k, heap)\n    indices = [item[1] for item in k_smallest]\n    return indices']",100000,1.0351680999738164,1.084085276001133,1.2548585000331514,N/A
p3_find_n_smallest_number,prompt_4,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        val, idx = heapq.heappop(min_heap)\n        indexes.append(idx)\n    return indexes']",1000,0.00521530001424253,0.005631226996774786,0.011744799965526909,N/A
p3_find_n_smallest_number,prompt_4,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        val, idx = heapq.heappop(min_heap)\n        indexes.append(idx)\n    return indexes']",10000,0.06665439996868372,0.06798304200696294,0.07333169999765232,N/A
p3_find_n_smallest_number,prompt_4,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        val, idx = heapq.heappop(min_heap)\n        indexes.append(idx)\n    return indexes']",100000,0.8033243999816477,0.8421396939974511,0.9225955000147223,N/A
p3_find_n_smallest_number,prompt_4,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indices']",1000,0.005349899991415441,0.0057036329986294735,0.008161100035067648,N/A
p3_find_n_smallest_number,prompt_4,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indices']",10000,0.06635079998522997,0.0679987160017481,0.07154259999515489,N/A
p3_find_n_smallest_number,prompt_4,13,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indices']",100000,0.8023743000230752,0.8306207480008015,0.8930852999910712,N/A
p3_find_n_smallest_number,prompt_4,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (list of int): The list of integers to process.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest integers in the list.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    indexes = [index for value, index in k_smallest]\n    return indexes']",1000,0.007178599946200848,0.007584437999175861,0.010129100002814084,N/A
p3_find_n_smallest_number,prompt_4,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (list of int): The list of integers to process.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest integers in the list.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    indexes = [index for value, index in k_smallest]\n    return indexes']",10000,0.08460520004155114,0.08806990700017195,0.10820570000214502,N/A
p3_find_n_smallest_number,prompt_4,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted list.\n\n    Parameters:\n    arg1 (list of int): The list of integers to process.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest integers in the list.\n    """"""\n    if arg2 <= 0:\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest = heapq.nsmallest(arg2, min_heap)\n    indexes = [index for value, index in k_smallest]\n    return indexes']",100000,1.002133700007107,1.0564448910043576,1.2676373000140302,N/A
p3_find_n_smallest_number,prompt_4,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.00506989995483309,0.0054840010014595465,0.007315700000617653,N/A
p3_find_n_smallest_number,prompt_4,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06746540003223345,0.06961916999949608,0.07623419997980818,N/A
p3_find_n_smallest_number,prompt_4,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7716918999794871,0.7968776390014682,0.93681679997826,N/A
p3_find_n_smallest_number,prompt_4,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for val, idx in k_smallest]\n    return k_smallest_indices']",1000,0.005234799988102168,0.005831759997527115,0.015280400053597987,N/A
p3_find_n_smallest_number,prompt_4,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for val, idx in k_smallest]\n    return k_smallest_indices']",10000,0.053379200049676,0.05639555099594872,0.06731229997240007,N/A
p3_find_n_smallest_number,prompt_4,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indices = [idx for val, idx in k_smallest]\n    return k_smallest_indices']",100000,0.7074349000467919,0.7438650710007642,0.8036379999830388,N/A
p3_find_n_smallest_number,prompt_4,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.005145000002812594,0.005564166004187427,0.008895899984054267,N/A
p3_find_n_smallest_number,prompt_4,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.06777619995409623,0.0693957260006573,0.07286169996950775,N/A
p3_find_n_smallest_number,prompt_4,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.7773853999678977,0.8075109399983194,0.868652299977839,N/A
p3_find_n_smallest_number,prompt_4,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    result = []\n    for _ in range(arg2):\n        if min_heap:\n            smallest = heapq.heappop(min_heap)\n            result.append(smallest[1])\n    return result']",1000,0.007716599968262017,0.008529499003197999,0.028771599987521768,N/A
p3_find_n_smallest_number,prompt_4,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    result = []\n    for _ in range(arg2):\n        if min_heap:\n            smallest = heapq.heappop(min_heap)\n            result.append(smallest[1])\n    return result']",10000,0.08848330000182614,0.09394538399588782,0.14705650001997128,N/A
p3_find_n_smallest_number,prompt_4,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    result = []\n    for _ in range(arg2):\n        if min_heap:\n            smallest = heapq.heappop(min_heap)\n            result.append(smallest[1])\n    return result']",100000,1.0013093000161462,1.036643960000365,1.2466880999854766,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif -min_heap[0][0] > num:\n            heapq.heapreplace(min_heap, (-num, index))\n    smallest_indices = [index for _, index in min_heap]\n    return sorted(smallest_indices)']",1000,0.004126200044993311,0.004422805000212975,0.007176099985372275,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif -min_heap[0][0] > num:\n            heapq.heapreplace(min_heap, (-num, index))\n    smallest_indices = [index for _, index in min_heap]\n    return sorted(smallest_indices)']",10000,0.03982509998604655,0.041806002003140746,0.05004269996425137,N/A
p3_find_n_smallest_number,prompt_4,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif -min_heap[0][0] > num:\n            heapq.heapreplace(min_heap, (-num, index))\n    smallest_indices = [index for _, index in min_heap]\n    return sorted(smallest_indices)']",100000,0.4083715999731794,0.4282222399988677,0.5511127000208944,N/A
p3_find_n_smallest_number,prompt_4,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    smallest_indices = [idx for _, idx in heap]\n    return smallest_indices']",1000,0.0022324000019580126,0.002398582003661431,0.002785800024867058,N/A
p3_find_n_smallest_number,prompt_4,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    smallest_indices = [idx for _, idx in heap]\n    return smallest_indices']",10000,0.022753199969884008,0.023861979002831504,0.033615500025916845,N/A
p3_find_n_smallest_number,prompt_4,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    smallest_indices = [idx for _, idx in heap]\n    return smallest_indices']",100000,0.23656310001388192,0.249844110000995,0.29128529998706654,N/A
p3_find_n_smallest_number,prompt_4,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    k_smallest_indices = [index for num, index in min_heap]\n    return k_smallest_indices']",1000,0.011978399998042732,0.012417147997184656,0.019639500009361655,N/A
p3_find_n_smallest_number,prompt_4,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    k_smallest_indices = [index for num, index in min_heap]\n    return k_smallest_indices']",10000,0.11887609999394044,0.12415820999827702,0.14364510000450537,N/A
p3_find_n_smallest_number,prompt_4,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    k_smallest_indices = [index for num, index in min_heap]\n    return k_smallest_indices']",100000,1.193203100003302,1.2563518559996738,1.4189965999685228,N/A
p3_find_n_smallest_number,prompt_4,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",1000,0.006308500014711171,0.006841614998993464,0.008858999994117767,N/A
p3_find_n_smallest_number,prompt_4,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",10000,0.06421670003328472,0.06797326399711892,0.09531140001490712,N/A
p3_find_n_smallest_number,prompt_4,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",100000,0.7983060000115074,0.8433124650036916,0.942818499985151,N/A
p3_find_n_smallest_number,prompt_4,23,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be between 1 and the length of the array')\n    arr_with_indices = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, arr_with_indices)\n    k_smallest_indices = [index for _, index in k_smallest_with_indices]\n    return k_smallest_indices""]",1000,0.00512039999011904,0.005533770004985854,0.007581499987281859,N/A
p3_find_n_smallest_number,prompt_4,23,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be between 1 and the length of the array')\n    arr_with_indices = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, arr_with_indices)\n    k_smallest_indices = [index for _, index in k_smallest_with_indices]\n    return k_smallest_indices""]",10000,0.05344899999909103,0.056691025003092366,0.0650947000249289,N/A
p3_find_n_smallest_number,prompt_4,23,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be between 1 and the length of the array')\n    arr_with_indices = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_with_indices = heapq.nsmallest(arg2, arr_with_indices)\n    k_smallest_indices = [index for _, index in k_smallest_with_indices]\n    return k_smallest_indices""]",100000,0.7101554999826476,0.7407047939993209,0.8024124000221491,N/A
p3_find_n_smallest_number,prompt_4,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in smallest_elements]\n    return smallest_indexes']",1000,0.00651770003605634,0.006893878002883867,0.008555400010664016,N/A
p3_find_n_smallest_number,prompt_4,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in smallest_elements]\n    return smallest_indexes']",10000,0.06580540002323687,0.06832881200010889,0.07894289999967441,N/A
p3_find_n_smallest_number,prompt_4,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in smallest_elements]\n    return smallest_indexes']",100000,0.8037761999876238,0.840450179996551,0.9201017000013962,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    - arg1: List[int], the input array.\n    - arg2: int, the number of smallest elements to find.\n    \n    Returns:\n    - List[int], the indexes of the k smallest numbers.\n    """"""\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [idx for value, idx in k_smallest]\n    return smallest_indexes']",1000,0.006467600003816187,0.006880709999240935,0.010413699958007783,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    - arg1: List[int], the input array.\n    - arg2: int, the number of smallest elements to find.\n    \n    Returns:\n    - List[int], the indexes of the k smallest numbers.\n    """"""\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [idx for value, idx in k_smallest]\n    return smallest_indexes']",10000,0.06604850001167506,0.06880935799970757,0.08525050000753254,N/A
p3_find_n_smallest_number,prompt_4,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    - arg1: List[int], the input array.\n    - arg2: int, the number of smallest elements to find.\n    \n    Returns:\n    - List[int], the indexes of the k smallest numbers.\n    """"""\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [idx for value, idx in k_smallest]\n    return smallest_indexes']",100000,0.804924399999436,0.8402864079980645,0.9296890000114217,N/A
p3_find_n_smallest_number,prompt_4,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",1000,0.007050400017760694,0.007699918001308106,0.013931300025433302,N/A
p3_find_n_smallest_number,prompt_4,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",10000,0.0848017000243999,0.08930328899936285,0.10717899998417124,N/A
p3_find_n_smallest_number,prompt_4,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",100000,1.0329767999937758,1.078069308999693,1.170189600030426,N/A
p3_find_n_smallest_number,prompt_4,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.005194900033529848,0.005706421000650152,0.008210100000724196,N/A
p3_find_n_smallest_number,prompt_4,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.06830740004079416,0.07014855499961413,0.0765434000059031,N/A
p3_find_n_smallest_number,prompt_4,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.795343900041189,0.8199298140004976,0.9027622999856248,N/A
p3_find_n_smallest_number,prompt_4,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    k_smallest_indices = [index for index, value in k_smallest_pairs]\n    return k_smallest_indices']",1000,0.005305699945893139,0.005676027004956268,0.010299900022801012,N/A
p3_find_n_smallest_number,prompt_4,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    k_smallest_indices = [index for index, value in k_smallest_pairs]\n    return k_smallest_indices']",10000,0.053726700018160045,0.05730296999798156,0.10908790002577007,N/A
p3_find_n_smallest_number,prompt_4,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = list(enumerate(arg1))\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[1])\n    k_smallest_indices = [index for index, value in k_smallest_pairs]\n    return k_smallest_indices']",100000,0.6929988999618217,0.753145760995103,1.1353417999926023,N/A
p3_find_n_smallest_number,prompt_4,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indices']",1000,0.005217399972025305,0.005517579998704605,0.008929400006309152,N/A
p3_find_n_smallest_number,prompt_4,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indices']",10000,0.06623320002108812,0.06851393000339158,0.0793349000159651,N/A
p3_find_n_smallest_number,prompt_4,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return k_smallest_indices']",100000,0.787291600019671,0.8129235600022366,0.895048999984283,N/A
p3_find_n_smallest_number,prompt_4,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest integers to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest integers in the array.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",1000,0.005205900000873953,0.005529979000566527,0.008382600033655763,N/A
p3_find_n_smallest_number,prompt_4,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest integers to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest integers in the array.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",10000,0.0651433999883011,0.06803986899729353,0.07581169996410608,N/A
p3_find_n_smallest_number,prompt_4,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest integers to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest integers in the array.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",100000,0.7705837999819778,0.8065091219986789,0.9875471999985166,N/A
p3_find_n_smallest_number,prompt_4,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i in range(min(arg2, len(arg1))):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    result = [index for _, index in min_heap]\n    return result']",1000,0.002411800029221922,0.0026178430003346875,0.003518100013025105,N/A
p3_find_n_smallest_number,prompt_4,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i in range(min(arg2, len(arg1))):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    result = [index for _, index in min_heap]\n    return result']",10000,0.02365109999664128,0.02533243500161916,0.0335637999814935,N/A
p3_find_n_smallest_number,prompt_4,31,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i in range(min(arg2, len(arg1))):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    result = [index for _, index in min_heap]\n    return result']",100000,0.28734899999108166,0.30128218500001824,0.35811870003817603,N/A
p3_find_n_smallest_number,prompt_4,32,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in k_smallest:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.0011337999603711069,0.0012896210001781582,0.004724099999293685,N/A
p3_find_n_smallest_number,prompt_4,32,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in k_smallest:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.01057709997985512,0.017441817998769694,0.05180780001683161,N/A
p3_find_n_smallest_number,prompt_4,32,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in k_smallest:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.22248840000247583,0.4473595869971905,0.7261017999844626,N/A
p3_find_n_smallest_number,prompt_4,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the \'arg2\' smallest numbers in an unsorted list \'arg1\'.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",1000,0.0052063000039197505,0.005568213003571145,0.007980700000189245,N/A
p3_find_n_smallest_number,prompt_4,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the \'arg2\' smallest numbers in an unsorted list \'arg1\'.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",10000,0.06775869999546558,0.06947319099504966,0.07635779998963699,N/A
p3_find_n_smallest_number,prompt_4,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Find the indexes of the \'arg2\' smallest numbers in an unsorted list \'arg1\'.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",100000,0.8018243999686092,0.833233519999776,0.8642346999840811,N/A
p3_find_n_smallest_number,prompt_4,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",1000,0.0052239999640733,0.005556397999753244,0.006988400011323392,N/A
p3_find_n_smallest_number,prompt_4,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",10000,0.06782489997567609,0.0695137460035039,0.07383310003206134,N/A
p3_find_n_smallest_number,prompt_4,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indices']",100000,0.7972941999905743,0.8185492350027198,0.8761369999847375,N/A
p3_find_n_smallest_number,prompt_4,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_elements = [heapq.heappop(heap) for _ in range(arg2)]\n    indices = [pair[1] for pair in k_smallest_elements]\n    return indices']",1000,0.005210899980738759,0.005486646000645123,0.007873700000345707,N/A
p3_find_n_smallest_number,prompt_4,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_elements = [heapq.heappop(heap) for _ in range(arg2)]\n    indices = [pair[1] for pair in k_smallest_elements]\n    return indices']",10000,0.06737689999863505,0.06946112599864136,0.07628530001966283,N/A
p3_find_n_smallest_number,prompt_4,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_elements = [heapq.heappop(heap) for _ in range(arg2)]\n    indices = [pair[1] for pair in k_smallest_elements]\n    return indices']",100000,0.774653300002683,0.8154093500011368,0.9038893000106327,N/A
p3_find_n_smallest_number,prompt_4,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return smallest_indices']",1000,0.004604199959430844,0.0048205870011588554,0.006973600015044212,N/A
p3_find_n_smallest_number,prompt_4,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return smallest_indices']",10000,0.042023499961942434,0.04442251299798954,0.0604581999941729,N/A
p3_find_n_smallest_number,prompt_4,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    smallest_elements_with_indices = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indices = [index for index, value in smallest_elements_with_indices]\n    return smallest_indices']",100000,0.4466634000418708,0.47541774199751674,0.5758041000226513,N/A
p3_find_n_smallest_number,prompt_4,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for _, idx in heap]']",1000,0.0030889000045135617,0.0032833300012862308,0.004228200006764382,N/A
p3_find_n_smallest_number,prompt_4,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for _, idx in heap]']",10000,0.02897450001910329,0.031398791999090465,0.045260799990501255,N/A
p3_find_n_smallest_number,prompt_4,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for _, idx in heap]']",100000,0.3023827000288293,0.3159475119988201,0.349367999995593,N/A
p3_find_n_smallest_number,prompt_4,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List[int] - The input unsorted array\n    :param arg2: int - The number of smallest numbers to find\n    :return: List[int] - The list of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_elements = heapq.nsmallest(arg2, min_heap)\n    smallest_indexes = [idx for _, idx in smallest_elements]\n    return smallest_indexes']",1000,0.0072132000350393355,0.007739810001803562,0.010378200036939234,N/A
p3_find_n_smallest_number,prompt_4,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List[int] - The input unsorted array\n    :param arg2: int - The number of smallest numbers to find\n    :return: List[int] - The list of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_elements = heapq.nsmallest(arg2, min_heap)\n    smallest_indexes = [idx for _, idx in smallest_elements]\n    return smallest_indexes']",10000,0.08732220000820234,0.0900832810025895,0.09764170000562444,N/A
p3_find_n_smallest_number,prompt_4,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    :param arg1: List[int] - The input unsorted array\n    :param arg2: int - The number of smallest numbers to find\n    :return: List[int] - The list of indexes of the k smallest numbers\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_elements = heapq.nsmallest(arg2, min_heap)\n    smallest_indexes = [idx for _, idx in smallest_elements]\n    return smallest_indexes']",100000,1.036957300035283,1.0757060250017094,1.1681138999992982,N/A
p3_find_n_smallest_number,prompt_4,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest elements in the original array.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",1000,0.005204200046136975,0.00554751499730628,0.008559799985960126,N/A
p3_find_n_smallest_number,prompt_4,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest elements in the original array.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",10000,0.06754710001405329,0.06907460499962326,0.07147829997120425,N/A
p3_find_n_smallest_number,prompt_4,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The unsorted array.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest elements in the original array.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",100000,0.7888288000249304,0.8325784789992031,0.9798222000245005,N/A
p3_find_n_smallest_number,prompt_4,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        raise ValueError('k should be less than or equal to the length of the array')\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, heap)\n    indices = [idx for val, idx in smallest_elements]\n    return indices""]",1000,0.005087300029117614,0.005613408001372591,0.008035200007725507,N/A
p3_find_n_smallest_number,prompt_4,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        raise ValueError('k should be less than or equal to the length of the array')\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, heap)\n    indices = [idx for val, idx in smallest_elements]\n    return indices""]",10000,0.052587299956940114,0.05602127100224607,0.07129380002152175,N/A
p3_find_n_smallest_number,prompt_4,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k > len(arg1):\n        raise ValueError('k should be less than or equal to the length of the array')\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(k, heap)\n    indices = [idx for val, idx in smallest_elements]\n    return indices""]",100000,0.7053573000011966,0.7437544750020606,0.794598699954804,N/A
p3_find_n_smallest_number,prompt_4,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        index = arg1.index(element)\n        while index in indexes:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n    return indexes']",1000,0.002089399960823357,0.0023005860019475223,0.003684600000269711,N/A
p3_find_n_smallest_number,prompt_4,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        index = arg1.index(element)\n        while index in indexes:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n    return indexes']",10000,0.017301600018981844,0.01795437900000252,0.028677200025413185,N/A
p3_find_n_smallest_number,prompt_4,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        index = arg1.index(element)\n        while index in indexes:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n    return indexes']",100000,0.1625161999836564,0.17134764500136954,0.2398799000075087,N/A
p3_find_n_smallest_number,prompt_4,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    indexes = [element[1] for element in k_smallest]\n    return indexes']",1000,0.007260599988512695,0.007673722000909038,0.009114000014960766,N/A
p3_find_n_smallest_number,prompt_4,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    indexes = [element[1] for element in k_smallest]\n    return indexes']",10000,0.08783979999134317,0.09023882899840828,0.1158341999980621,N/A
p3_find_n_smallest_number,prompt_4,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    indexes = [element[1] for element in k_smallest]\n    return indexes']",100000,1.0490108000230975,1.0755623510014265,1.1241324999718927,N/A
p3_find_n_smallest_number,prompt_4,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return result']",1000,0.005164200032595545,0.0056338940013665705,0.009486399998422712,N/A
p3_find_n_smallest_number,prompt_4,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return result']",10000,0.06527170003391802,0.06726159700367135,0.07336519996169955,N/A
p3_find_n_smallest_number,prompt_4,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, i) for i, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return result']",100000,0.7942163000116125,0.8250332630006596,0.9635760000091977,N/A
p3_find_n_smallest_number,prompt_4,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_indices = [idx for num, idx in heapq.nsmallest(arg2, indexed_list)]\n    return k_smallest_indices']",1000,0.005145000002812594,0.00548861000163015,0.007080800016410649,N/A
p3_find_n_smallest_number,prompt_4,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_indices = [idx for num, idx in heapq.nsmallest(arg2, indexed_list)]\n    return k_smallest_indices']",10000,0.05225070001324639,0.054829866000218316,0.07344960002228618,N/A
p3_find_n_smallest_number,prompt_4,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_indices = [idx for num, idx in heapq.nsmallest(arg2, indexed_list)]\n    return k_smallest_indices']",100000,0.7026287000044249,0.7337565200024982,0.7859536000178196,N/A
p3_find_n_smallest_number,prompt_4,45,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [element[1] for element in k_smallest]\n    return smallest_indexes']",1000,0.006438300013542175,0.006861009998247027,0.008075100020505488,N/A
p3_find_n_smallest_number,prompt_4,45,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [element[1] for element in k_smallest]\n    return smallest_indexes']",10000,0.06585189996985719,0.06833117200352717,0.0784286999842152,N/A
p3_find_n_smallest_number,prompt_4,45,"['import heapq\nfrom typing import List, Tuple\n\ndef funcImp(arg1: List[int], arg2: int) -> List[int]:\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    smallest_indexes = [element[1] for element in k_smallest]\n    return smallest_indexes']",100000,0.8069642999907956,0.8398134350031614,0.9451158000156283,N/A
p3_find_n_smallest_number,prompt_4,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in the unsorted array arg1.\n    :param arg1: List[int] - List of integers (unsorted array).\n    :param arg2: int - k, the number of smallest elements required.\n    :return: List[int] - List of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]']",1000,0.005077400011941791,0.00548793800000567,0.0072524999850429595,N/A
p3_find_n_smallest_number,prompt_4,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in the unsorted array arg1.\n    :param arg1: List[int] - List of integers (unsorted array).\n    :param arg2: int - k, the number of smallest elements required.\n    :return: List[int] - List of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]']",10000,0.0532241000328213,0.056040200000861656,0.0679901999537833,N/A
p3_find_n_smallest_number,prompt_4,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Returns the indexes of the k smallest numbers in the unsorted array arg1.\n    :param arg1: List[int] - List of integers (unsorted array).\n    :param arg2: int - k, the number of smallest elements required.\n    :return: List[int] - List of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]']",100000,0.7055015999940224,0.7377547160029644,0.8397983000031672,N/A
p3_find_n_smallest_number,prompt_4,47,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        indexes.extend([i for i, x in enumerate(arg1) if x == num])\n    return indexes[:arg2]""]",1000,0.009908400010317564,0.010455810996936633,0.012446600012481213,N/A
p3_find_n_smallest_number,prompt_4,47,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        indexes.extend([i for i, x in enumerate(arg1) if x == num])\n    return indexes[:arg2]""]",10000,0.10037459997693077,0.10570795900013763,0.13097420003032312,N/A
p3_find_n_smallest_number,prompt_4,47,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        indexes.extend([i for i, x in enumerate(arg1) if x == num])\n    return indexes[:arg2]""]",100000,1.034417700022459,1.087319299999508,1.2222668000031263,N/A
p3_find_n_smallest_number,prompt_4,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(elem, idx) for idx, elem in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    k_smallest_indices.sort()\n    return k_smallest_indices']",1000,0.005343299999367446,0.005646839996334165,0.006796000001486391,N/A
p3_find_n_smallest_number,prompt_4,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(elem, idx) for idx, elem in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    k_smallest_indices.sort()\n    return k_smallest_indices']",10000,0.06585830001858994,0.0687251280003693,0.0713850999600254,N/A
p3_find_n_smallest_number,prompt_4,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(elem, idx) for idx, elem in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    k_smallest_indices.sort()\n    return k_smallest_indices']",100000,0.7713467999710701,0.8069999740016647,0.8873976999893785,N/A
p3_find_n_smallest_number,prompt_4,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        value, idx = heapq.heappop(heap)\n        result.append(idx)\n    return result']",1000,0.004972999973688275,0.005486503998399712,0.010506399965379387,N/A
p3_find_n_smallest_number,prompt_4,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        value, idx = heapq.heappop(heap)\n        result.append(idx)\n    return result']",10000,0.06441869999980554,0.06637844699842389,0.06873889995040372,N/A
p3_find_n_smallest_number,prompt_4,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, idx) for idx, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(arg2):\n        value, idx = heapq.heappop(heap)\n        result.append(idx)\n    return result']",100000,0.7930018999613822,0.819987057003309,0.9468476999900304,N/A
p3_find_n_smallest_number,prompt_4,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_val_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_val_pairs)\n    k_smallest_indices = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indices']",1000,0.005100599955767393,0.005715757997240872,0.009610600012820214,N/A
p3_find_n_smallest_number,prompt_4,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_val_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_val_pairs)\n    k_smallest_indices = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indices']",10000,0.05346329999156296,0.05608095000090543,0.06546789995627478,N/A
p3_find_n_smallest_number,prompt_4,50,"['import heapq\n\ndef funcImp(arg1, arg2):\n    index_val_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, index_val_pairs)\n    k_smallest_indices = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indices']",100000,0.7040734000038356,0.7481026840000413,1.0182540999958292,N/A
p3_find_n_smallest_number,prompt_4,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for _, idx in k_smallest_pairs]\n    return result_indexes']",1000,0.005283799953758717,0.0061197069997433575,0.014600299997255206,N/A
p3_find_n_smallest_number,prompt_4,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for _, idx in k_smallest_pairs]\n    return result_indexes']",10000,0.05277340003522113,0.06474005500262138,0.16663680004421622,N/A
p3_find_n_smallest_number,prompt_4,51,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The unsorted array of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [idx for _, idx in k_smallest_pairs]\n    return result_indexes']",100000,0.7113726999959908,0.7484752809948987,0.864956000004895,N/A
p3_find_n_smallest_number,prompt_4,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for value, index in heap]\n    result.sort()\n    return result']",1000,0.0028282999992370605,0.0031325729971285908,0.0050534000038169324,N/A
p3_find_n_smallest_number,prompt_4,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for value, index in heap]\n    result.sort()\n    return result']",10000,0.02578460000222549,0.027094932004692963,0.031918900029268116,N/A
p3_find_n_smallest_number,prompt_4,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for value, index in heap]\n    result.sort()\n    return result']",100000,0.26893149997340515,0.2829985060048057,0.3389321999857202,N/A
p3_find_n_smallest_number,prompt_4,53,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",1000,0.004570199991576374,0.004762350997771137,0.005667900026310235,N/A
p3_find_n_smallest_number,prompt_4,53,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",10000,0.041596699971705675,0.04503536699747201,0.08327880001161247,N/A
p3_find_n_smallest_number,prompt_4,53,"['from heapq import nsmallest\n\ndef funcImp(arg1, arg2):\n    k_smallest = nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [index for index, value in k_smallest]\n    return indexes']",100000,0.4486060999915935,0.4723598499962827,0.5545084999757819,N/A
p3_find_n_smallest_number,prompt_4,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.005109800025820732,0.005530910007073544,0.007435400038957596,N/A
p3_find_n_smallest_number,prompt_4,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.06626849999884143,0.06868920799926855,0.08022480004001409,N/A
p3_find_n_smallest_number,prompt_4,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.7873859000392258,0.8121223170059966,0.8748444999800995,N/A
p3_find_n_smallest_number,prompt_4,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.005124999966938049,0.005482308003120124,0.007777800026815385,N/A
p3_find_n_smallest_number,prompt_4,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.06670320004923269,0.06837993799883407,0.0723100999603048,N/A
p3_find_n_smallest_number,prompt_4,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.7789439999614842,0.8075593189994106,0.8944229999906383,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",1000,0.007339400006458163,0.007737944000400603,0.010701999999582767,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",10000,0.08659740001894534,0.09010016400483437,0.11375199997564778,N/A
p3_find_n_smallest_number,prompt_4,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest = heapq.nsmallest(arg2, heap)\n    return [index for value, index in k_smallest]']",100000,1.043371699983254,1.0804505029984284,1.2073837000061758,N/A
p3_find_n_smallest_number,prompt_4,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for value, index in smallest_k]\n    return indexes']",1000,0.00518410000950098,0.0056111210031667726,0.010315800027456135,N/A
p3_find_n_smallest_number,prompt_4,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for value, index in smallest_k]\n    return indexes']",10000,0.0531852999702096,0.055571066999109464,0.061497699993196875,N/A
p3_find_n_smallest_number,prompt_4,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for value, index in smallest_k]\n    return indexes']",100000,0.7078445999650285,0.7401229469955433,0.7871946999803185,N/A
p3_find_n_smallest_number,prompt_4,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.007679799979086965,0.008313002004870213,0.015022700012195855,N/A
p3_find_n_smallest_number,prompt_4,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.08838720002677292,0.09342219200043474,0.1424815999926068,N/A
p3_find_n_smallest_number,prompt_4,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n\n    Parameters:\n    arg1 (list of int): The list of integers.\n    arg2 (int): The number of smallest elements to find.\n\n    Returns:\n    list: A list of indexes of the k smallest elements.\n    """"""\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.9807076000142843,1.0239366169983988,1.0987080999766476,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = []\n    for _ in range(arg2):\n        k_smallest_indices.append(heapq.heappop(min_heap)[1])\n    return k_smallest_indices']",1000,0.005087299970909953,0.00567015900160186,0.00986310001462698,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = []\n    for _ in range(arg2):\n        k_smallest_indices.append(heapq.heappop(min_heap)[1])\n    return k_smallest_indices']",10000,0.06761700002243742,0.06931228699628264,0.07388320000609383,N/A
p3_find_n_smallest_number,prompt_4,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = []\n    for _ in range(arg2):\n        k_smallest_indices.append(heapq.heappop(min_heap)[1])\n    return k_smallest_indices']",100000,0.7923284000135027,0.8432205579977017,0.8991653999546543,N/A
p3_find_n_smallest_number,prompt_4,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]']",1000,0.005271599977277219,0.005495002000243403,0.006674000003840774,N/A
p3_find_n_smallest_number,prompt_4,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]']",10000,0.052471800008788705,0.05544599100307096,0.07225430000107735,N/A
p3_find_n_smallest_number,prompt_4,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]']",100000,0.7039442000095733,0.7429470949998358,0.7925646000076085,N/A
p3_find_n_smallest_number,prompt_4,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (num, i))\n        elif num < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (num, i))\n    result = [index for _, index in min_heap]\n    return sorted(result, key=lambda x: (arg1[x], x))']",1000,0.003878299961797893,0.004189680998097174,0.007283099985215813,N/A
p3_find_n_smallest_number,prompt_4,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (num, i))\n        elif num < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (num, i))\n    result = [index for _, index in min_heap]\n    return sorted(result, key=lambda x: (arg1[x], x))']",10000,0.036942999984603375,0.040462369002052585,0.10358340002130717,N/A
p3_find_n_smallest_number,prompt_4,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (num, i))\n        elif num < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (num, i))\n    result = [index for _, index in min_heap]\n    return sorted(result, key=lambda x: (arg1[x], x))']",100000,0.4215171000105329,0.44886092900298535,0.5050734999822453,N/A
p3_find_n_smallest_number,prompt_4,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in k_smallest]']",1000,0.005239700025413185,0.005544114999938756,0.0073785000131465495,N/A
p3_find_n_smallest_number,prompt_4,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in k_smallest]']",10000,0.0524975000298582,0.05512222500052303,0.06355050002457574,N/A
p3_find_n_smallest_number,prompt_4,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [idx for val, idx in k_smallest]']",100000,0.7060691000078805,0.74093727800122,0.8377801000024192,N/A
p3_find_n_smallest_number,prompt_4,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",1000,0.0027584999916143715,0.003017355002230033,0.004520799964666367,N/A
p3_find_n_smallest_number,prompt_4,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",10000,0.026354300032835454,0.02727274300297722,0.029717699973843992,N/A
p3_find_n_smallest_number,prompt_4,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",100000,0.2644311999902129,0.2799415430019144,0.3246311999973841,N/A
p3_find_n_smallest_number,prompt_4,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",1000,0.004897200036793947,0.005128721999935806,0.0068913999712094665,N/A
p3_find_n_smallest_number,prompt_4,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",10000,0.0651001000078395,0.06717710299999453,0.07732470001792535,N/A
p3_find_n_smallest_number,prompt_4,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",100000,0.7771951999748126,0.798652675000485,0.85255439998582,N/A
p3_find_n_smallest_number,prompt_4,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_nums, key=lambda x: x[0])\n    indices = [index for _, index in k_smallest]\n    return indices']",1000,0.006475800008047372,0.006877449001185596,0.012567900004796684,N/A
p3_find_n_smallest_number,prompt_4,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_nums, key=lambda x: x[0])\n    indices = [index for _, index in k_smallest]\n    return indices']",10000,0.06389849999686703,0.06667738599819131,0.0834055999876,N/A
p3_find_n_smallest_number,prompt_4,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_nums = [(num, i) for i, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_nums, key=lambda x: x[0])\n    indices = [index for _, index in k_smallest]\n    return indices']",100000,0.7997403999906965,0.8409100469964323,0.9644913999945857,N/A
p3_find_n_smallest_number,prompt_4,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])\n    return [idx for val, idx in smallest_k]']",1000,0.008649000024888664,0.009112296001403593,0.011698200018145144,N/A
p3_find_n_smallest_number,prompt_4,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])\n    return [idx for val, idx in smallest_k]']",10000,0.09786340000573546,0.10405986500380095,0.22584170004120097,N/A
p3_find_n_smallest_number,prompt_4,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])\n    return [idx for val, idx in smallest_k]']",100000,1.2007898000301793,1.2329877039958956,1.4243748000008054,N/A
p3_find_n_smallest_number,prompt_4,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Returns the indices of the \'arg2\' smallest elements in the list \'arg1\'\n    \n    :param arg1: List of integers\n    :param arg2: Integer specifying the number of smallest elements to find\n    :return: List of indices of the \'arg2\' smallest elements in \'arg1\'\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, idx))\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.007694300031289458,0.00816180899972096,0.011886399996001273,N/A
p3_find_n_smallest_number,prompt_4,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Returns the indices of the \'arg2\' smallest elements in the list \'arg1\'\n    \n    :param arg1: List of integers\n    :param arg2: Integer specifying the number of smallest elements to find\n    :return: List of indices of the \'arg2\' smallest elements in \'arg1\'\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, idx))\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.0861185000394471,0.09040514699881896,0.13614489999599755,N/A
p3_find_n_smallest_number,prompt_4,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Returns the indices of the \'arg2\' smallest elements in the list \'arg1\'\n    \n    :param arg1: List of integers\n    :param arg2: Integer specifying the number of smallest elements to find\n    :return: List of indices of the \'arg2\' smallest elements in \'arg1\'\n    """"""\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, idx))\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,1.0141731000039726,1.0384869689977494,1.1203042999841273,N/A
p3_find_n_smallest_number,prompt_4,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for value, index in smallest_k]\n    return indexes']",1000,0.005321100004948676,0.005616936000878922,0.008258200017735362,N/A
p3_find_n_smallest_number,prompt_4,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for value, index in smallest_k]\n    return indexes']",10000,0.05282189999707043,0.05632010800356511,0.09244590002344921,N/A
p3_find_n_smallest_number,prompt_4,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_list)\n    indexes = [index for value, index in smallest_k]\n    return indexes']",100000,0.6978093000361696,0.7411999499989906,0.9188294999767095,N/A
p3_find_n_smallest_number,prompt_4,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    smallest_indexes = [idx for val, idx in smallest_pairs]\n    return smallest_indexes']",1000,0.00505969999358058,0.005558879998279736,0.011338400014210492,N/A
p3_find_n_smallest_number,prompt_4,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    smallest_indexes = [idx for val, idx in smallest_pairs]\n    return smallest_indexes']",10000,0.052434900018852204,0.05491836700064596,0.05846440000459552,N/A
p3_find_n_smallest_number,prompt_4,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    smallest_indexes = [idx for val, idx in smallest_pairs]\n    return smallest_indexes']",100000,0.6995978999766521,0.7406899989984231,0.8091421000426635,N/A
p3_find_n_smallest_number,prompt_4,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest]\n    return smallest_indexes']",1000,0.004572100006043911,0.004866995999473147,0.008314199978485703,N/A
p3_find_n_smallest_number,prompt_4,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest]\n    return smallest_indexes']",10000,0.04210109997075051,0.044082885001553225,0.04911860002903268,N/A
p3_find_n_smallest_number,prompt_4,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest]\n    return smallest_indexes']",100000,0.44465620000846684,0.4697728369984543,0.5704102999879979,N/A
p3_find_n_smallest_number,prompt_4,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",1000,0.0022160999942570925,0.0024091400002362205,0.00281949999043718,N/A
p3_find_n_smallest_number,prompt_4,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",10000,0.022383000003173947,0.0240397049987223,0.030711599974893034,N/A
p3_find_n_smallest_number,prompt_4,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",100000,0.23520370002370328,0.2477810440014582,0.294461700017564,N/A
p3_find_n_smallest_number,prompt_4,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",1000,0.005199599952902645,0.005498443997930735,0.0068313999800011516,N/A
p3_find_n_smallest_number,prompt_4,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",10000,0.06814950000261888,0.06985099100216757,0.0721983999828808,N/A
p3_find_n_smallest_number,prompt_4,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indexes = []\n    for _ in range(arg2):\n        _, idx = heapq.heappop(min_heap)\n        k_smallest_indexes.append(idx)\n    return k_smallest_indexes']",100000,0.7795068000559695,0.8190475979982875,0.9433085999917239,N/A
p3_find_n_smallest_number,prompt_4,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.007680399983655661,0.008296594000421464,0.013804799993522465,N/A
p3_find_n_smallest_number,prompt_4,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.08656689996132627,0.09071049599733669,0.1073026999947615,N/A
p3_find_n_smallest_number,prompt_4,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,1.0212129999999888,1.0677989180001897,1.5086796999676153,N/A
p3_find_n_smallest_number,prompt_4,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (val, idx))\n    indexes = [index for _, index in heapq.nsmallest(arg2, min_heap)]\n    return sorted(indexes)']",1000,0.0025641999673098326,0.0027250370004912837,0.0032860999926924706,N/A
p3_find_n_smallest_number,prompt_4,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (val, idx))\n    indexes = [index for _, index in heapq.nsmallest(arg2, min_heap)]\n    return sorted(indexes)']",10000,0.025275500025600195,0.02681070399528835,0.036632100003771484,N/A
p3_find_n_smallest_number,prompt_4,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (val, idx))\n    indexes = [index for _, index in heapq.nsmallest(arg2, min_heap)]\n    return sorted(indexes)']",100000,0.25308470003074035,0.26572095199953766,0.3029781000223011,N/A
p3_find_n_smallest_number,prompt_4,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return sorted([index for value, index in min_heap])']",1000,0.002264500013552606,0.0024064049986191093,0.0030391999753192067,N/A
p3_find_n_smallest_number,prompt_4,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return sorted([index for value, index in min_heap])']",10000,0.022893099987413734,0.02447049700189382,0.03845460002776235,N/A
p3_find_n_smallest_number,prompt_4,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return sorted([index for value, index in min_heap])']",100000,0.2346397999790497,0.2489529229979962,0.34320470003876835,N/A
p3_find_n_smallest_number,prompt_4,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    index_and_values = [(val, idx) for idx, val in enumerate(arg1)]\n    min_k_elements = heapq.nsmallest(arg2, index_and_values)\n    k_smallest_indexes = [idx for val, idx in min_k_elements]\n    return k_smallest_indexes']",1000,0.0052429999923333526,0.005579608998377807,0.007993699982762337,N/A
p3_find_n_smallest_number,prompt_4,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    index_and_values = [(val, idx) for idx, val in enumerate(arg1)]\n    min_k_elements = heapq.nsmallest(arg2, index_and_values)\n    k_smallest_indexes = [idx for val, idx in min_k_elements]\n    return k_smallest_indexes']",10000,0.051617100019939244,0.05484291799890343,0.062343399971723557,N/A
p3_find_n_smallest_number,prompt_4,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    index_and_values = [(val, idx) for idx, val in enumerate(arg1)]\n    min_k_elements = heapq.nsmallest(arg2, index_and_values)\n    k_smallest_indexes = [idx for val, idx in min_k_elements]\n    return k_smallest_indexes']",100000,0.7000230999547057,0.7419933519989718,1.114811900013592,N/A
p3_find_n_smallest_number,prompt_4,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in k_smallest]\n    return indexes']",1000,0.004655600001569837,0.005062001998885535,0.0090096999774687,N/A
p3_find_n_smallest_number,prompt_4,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in k_smallest]\n    return indexes']",10000,0.04204359999857843,0.045655779998051,0.13993059995118529,N/A
p3_find_n_smallest_number,prompt_4,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [idx for idx, val in k_smallest]\n    return indexes']",100000,0.45203340001171455,0.47728173100273125,0.5421473000315018,N/A
p3_find_n_smallest_number,prompt_4,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input unsorted array.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for val, idx in k_smallest]\n    return result_indexes']",1000,0.005195499979890883,0.005616678998921998,0.00836059998255223,N/A
p3_find_n_smallest_number,prompt_4,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input unsorted array.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for val, idx in k_smallest]\n    return result_indexes']",10000,0.053256999992299825,0.05708743000461254,0.06652150000445545,N/A
p3_find_n_smallest_number,prompt_4,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Finds the indexes of the k smallest numbers in an unsorted array.\n    \n    Parameters:\n    arg1 (list of int): The input unsorted array.\n    arg2 (int): The number of smallest elements to find.\n    \n    Returns:\n    list of int: The indexes of the k smallest numbers in the array.\n    """"""\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for val, idx in k_smallest]\n    return result_indexes']",100000,0.7100235000252724,0.7524301270011347,1.0508568999939598,N/A
p3_find_n_smallest_number,prompt_4,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, arg1)\n    smallest_set = set(smallest)\n    result = []\n    for idx, num in enumerate(arg1):\n        if num in smallest_set:\n            result.append(idx)\n            smallest_set.remove(num)\n            if len(result) == arg2:\n                break\n    return result']",1000,0.0029531000182032585,0.0031896320055238903,0.0051303000072948635,N/A
p3_find_n_smallest_number,prompt_4,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, arg1)\n    smallest_set = set(smallest)\n    result = []\n    for idx, num in enumerate(arg1):\n        if num in smallest_set:\n            result.append(idx)\n            smallest_set.remove(num)\n            if len(result) == arg2:\n                break\n    return result']",10000,0.028720100002828985,0.030401411005295812,0.03535129997180775,N/A
p3_find_n_smallest_number,prompt_4,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    smallest = heapq.nsmallest(arg2, arg1)\n    smallest_set = set(smallest)\n    result = []\n    for idx, num in enumerate(arg1):\n        if num in smallest_set:\n            result.append(idx)\n            smallest_set.remove(num)\n            if len(result) == arg2:\n                break\n    return result']",100000,0.23931650002487004,0.2532974590023514,0.3097778999945149,N/A
p3_find_n_smallest_number,prompt_4,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_arg1 = list(enumerate(arg1))\n    min_heap = indexed_arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][1]:\n            heapq.heappushpop(min_heap, (i, arg1[i]))\n    smallest_indexes = [idx for idx, val in min_heap]\n    return sorted(smallest_indexes)']",1000,0.004099800018593669,0.004462526998249814,0.007020900025963783,N/A
p3_find_n_smallest_number,prompt_4,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_arg1 = list(enumerate(arg1))\n    min_heap = indexed_arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][1]:\n            heapq.heappushpop(min_heap, (i, arg1[i]))\n    smallest_indexes = [idx for idx, val in min_heap]\n    return sorted(smallest_indexes)']",10000,0.04538989998400211,0.04760189899650868,0.05862720002187416,N/A
p3_find_n_smallest_number,prompt_4,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_arg1 = list(enumerate(arg1))\n    min_heap = indexed_arg1[:arg2]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][1]:\n            heapq.heappushpop(min_heap, (i, arg1[i]))\n    smallest_indexes = [idx for idx, val in min_heap]\n    return sorted(smallest_indexes)']",100000,0.6342516000149772,0.679551181999268,0.7327296999865212,N/A
p3_find_n_smallest_number,prompt_4,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    result = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    for _ in range(arg2):\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",1000,0.00775019999127835,0.00823812400107272,0.012137600046116859,N/A
p3_find_n_smallest_number,prompt_4,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    result = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    for _ in range(arg2):\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",10000,0.08712890004971996,0.09258649400202558,0.19279780000215396,N/A
p3_find_n_smallest_number,prompt_4,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    result = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    for _ in range(arg2):\n        result.append(heapq.heappop(min_heap)[1])\n    return result']",100000,1.027468400017824,1.0609599830006482,1.1635355000034906,N/A
p3_find_n_smallest_number,prompt_4,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    k_smallest_heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [elem[0] for elem in k_smallest_heap]\n    return indexes']",1000,0.004580900014843792,0.004824594999663531,0.006269599951338023,N/A
p3_find_n_smallest_number,prompt_4,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    k_smallest_heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [elem[0] for elem in k_smallest_heap]\n    return indexes']",10000,0.04192819999298081,0.044790832998114635,0.058678100001998246,N/A
p3_find_n_smallest_number,prompt_4,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    k_smallest_heap = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indexes = [elem[0] for elem in k_smallest_heap]\n    return indexes']",100000,0.45034679997479543,0.4752930309949443,0.5846120999776758,N/A
p3_find_n_smallest_number,prompt_4,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indexes:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n    return indexes']",1000,0.00205060001462698,0.0022110480011906476,0.0032179999980144203,N/A
p3_find_n_smallest_number,prompt_4,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indexes:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n    return indexes']",10000,0.017189099977258593,0.018287495998083613,0.028768700023647398,N/A
p3_find_n_smallest_number,prompt_4,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        while index in indexes:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n    return indexes']",100000,0.16290190001018345,0.17178712900378743,0.20147249998990446,N/A
p3_find_n_smallest_number,prompt_4,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_idxs = []\n    for _ in range(arg2):\n        smallest_idxs.append(heapq.heappop(heap)[1])\n    return smallest_idxs']",1000,0.005328300001565367,0.005586572996107862,0.006411399983335286,N/A
p3_find_n_smallest_number,prompt_4,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_idxs = []\n    for _ in range(arg2):\n        smallest_idxs.append(heapq.heappop(heap)[1])\n    return smallest_idxs']",10000,0.06752219999907538,0.06941461599839385,0.07654380000894889,N/A
p3_find_n_smallest_number,prompt_4,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_idxs = []\n    for _ in range(arg2):\n        smallest_idxs.append(heapq.heappop(heap)[1])\n    return smallest_idxs']",100000,0.7792670999770053,0.8210773139994125,0.8912782000261359,N/A
p3_find_n_smallest_number,prompt_4,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(min(arg2, len(arg1))):\n        result.append(heapq.heappop(heap)[1])\n    return result']",1000,0.005223600019235164,0.005555162002565339,0.007175799983087927,N/A
p3_find_n_smallest_number,prompt_4,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(min(arg2, len(arg1))):\n        result.append(heapq.heappop(heap)[1])\n    return result']",10000,0.06534429994644597,0.06696227300330065,0.0703697000280954,N/A
p3_find_n_smallest_number,prompt_4,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = []\n    for _ in range(min(arg2, len(arg1))):\n        result.append(heapq.heappop(heap)[1])\n    return result']",100000,0.7899303999729455,0.8155714489973616,0.9395415000035428,N/A
p3_find_n_smallest_number,prompt_4,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    num_with_index = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, num_with_index, key=lambda x: x[0])\n    indices_of_k_smallest = [idx for num, idx in k_smallest]\n    return indices_of_k_smallest']",1000,0.006309600023087114,0.0069675520027522,0.011378400027751923,N/A
p3_find_n_smallest_number,prompt_4,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    num_with_index = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, num_with_index, key=lambda x: x[0])\n    indices_of_k_smallest = [idx for num, idx in k_smallest]\n    return indices_of_k_smallest']",10000,0.06539890001295134,0.06884239300212357,0.14742819999810308,N/A
p3_find_n_smallest_number,prompt_4,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    num_with_index = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, num_with_index, key=lambda x: x[0])\n    indices_of_k_smallest = [idx for num, idx in k_smallest]\n    return indices_of_k_smallest']",100000,0.8131228000274859,0.848658448997885,0.9647986000054516,N/A
p3_find_n_smallest_number,prompt_4,87,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the array size')\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return result""]",1000,0.005134999984875321,0.005531995999044739,0.007103599957190454,N/A
p3_find_n_smallest_number,prompt_4,87,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the array size')\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return result""]",10000,0.06618240004172549,0.06871749800106045,0.07909950002795085,N/A
p3_find_n_smallest_number,prompt_4,87,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the array size')\n    min_heap = [(value, i) for i, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return result""]",100000,0.7802914999774657,0.8029420320031931,0.8828745000064373,N/A
p3_find_n_smallest_number,prompt_4,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",1000,0.005056900030467659,0.005451582999085076,0.006501499970909208,N/A
p3_find_n_smallest_number,prompt_4,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",10000,0.05257470003562048,0.05592365900287405,0.07506829994963482,N/A
p3_find_n_smallest_number,prompt_4,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indexes = [idx for _, idx in k_smallest]\n    return indexes']",100000,0.7023650999763049,0.7389884959976188,0.8179434000048786,N/A
p3_find_n_smallest_number,prompt_4,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",1000,0.006508199963718653,0.006923040007241071,0.009140999987721443,N/A
p3_find_n_smallest_number,prompt_4,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",10000,0.06455050001386553,0.06770870100241154,0.07427789992652833,N/A
p3_find_n_smallest_number,prompt_4,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [index for value, index in k_smallest]\n    return result_indexes']",100000,0.8006910999538377,0.8532170389953535,1.0509845999768004,N/A
p3_find_n_smallest_number,prompt_4,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",1000,0.005091500002890825,0.005523465994047001,0.007653600070625544,N/A
p3_find_n_smallest_number,prompt_4,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",10000,0.06602400005795062,0.06904970299685374,0.07579489995259792,N/A
p3_find_n_smallest_number,prompt_4,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(min(arg2, len(arg1))):\n        smallest_indexes.append(heapq.heappop(min_heap)[1])\n    return smallest_indexes']",100000,0.7889743000268936,0.8108707359922118,0.8598007999826223,N/A
p3_find_n_smallest_number,prompt_4,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",1000,0.005225100088864565,0.005520724997622893,0.0062460999470204115,N/A
p3_find_n_smallest_number,prompt_4,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",10000,0.06568889995105565,0.06788243298768065,0.07556110003497452,N/A
p3_find_n_smallest_number,prompt_4,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",100000,0.7758656000951305,0.8004914989985992,0.8571398999774829,N/A
p3_find_n_smallest_number,prompt_4,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, num in enumerate(arg1) if num in k_smallest]\n    return indexes']",1000,0.004707599990069866,0.004964037995086983,0.007339899893850088,N/A
p3_find_n_smallest_number,prompt_4,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, num in enumerate(arg1) if num in k_smallest]\n    return indexes']",10000,0.044128800043836236,0.046884575001895426,0.05752980010583997,N/A
p3_find_n_smallest_number,prompt_4,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [i for i, num in enumerate(arg1) if num in k_smallest]\n    return indexes']",100000,0.4571924000047147,0.4875683470023796,0.6560064000077546,N/A
p3_find_n_smallest_number,prompt_4,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, index) for index, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    indexes_of_smallest = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return indexes_of_smallest']",1000,0.005229600006714463,0.0055023780011106286,0.0070300999796018004,N/A
p3_find_n_smallest_number,prompt_4,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, index) for index, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    indexes_of_smallest = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return indexes_of_smallest']",10000,0.06778519996441901,0.06976040000095964,0.0731693000998348,N/A
p3_find_n_smallest_number,prompt_4,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, index) for index, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    indexes_of_smallest = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return indexes_of_smallest']",100000,0.8158100000582635,0.8390835820045323,0.9600487999850884,N/A
p3_find_n_smallest_number,prompt_4,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers\n    :param arg2: Integer k representing the number of smallest elements to find\n    :return: List of indexes of the k smallest elements\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",1000,0.0022284999722614884,0.0023968030023388564,0.0027628999669104815,N/A
p3_find_n_smallest_number,prompt_4,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers\n    :param arg2: Integer k representing the number of smallest elements to find\n    :return: List of indexes of the k smallest elements\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",10000,0.022805699962191284,0.023662459999322892,0.0288987000240013,N/A
p3_find_n_smallest_number,prompt_4,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    """"""\n    Function to find the indexes of the k smallest numbers in an unsorted array.\n    \n    :param arg1: List of integers\n    :param arg2: Integer k representing the number of smallest elements to find\n    :return: List of indexes of the k smallest elements\n    """"""\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",100000,0.23481090005952865,0.24708316300995647,0.3063352999743074,N/A
p3_find_n_smallest_number,prompt_4,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indices = [index for _, index in smallest]\n    return result_indices']",1000,0.006478800089098513,0.006790457991883159,0.009847600013017654,N/A
p3_find_n_smallest_number,prompt_4,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indices = [index for _, index in smallest]\n    return result_indices']",10000,0.06505430000834167,0.06825757200014777,0.08372830005828291,N/A
p3_find_n_smallest_number,prompt_4,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indices = [index for _, index in smallest]\n    return result_indices']",100000,0.8080122999381274,0.8483336169959511,0.9713650000048801,N/A
p3_find_n_smallest_number,prompt_4,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, idx))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in heapq.nsmallest(arg2, min_heap)]\n    return result']",1000,0.011922100093215704,0.012355187996290625,0.014391500037163496,N/A
p3_find_n_smallest_number,prompt_4,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, idx))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in heapq.nsmallest(arg2, min_heap)]\n    return result']",10000,0.11810029996559024,0.12538246099604294,0.15775170002598315,N/A
p3_find_n_smallest_number,prompt_4,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, idx))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in heapq.nsmallest(arg2, min_heap)]\n    return result']",100000,1.2033424000255764,1.2647353339975234,1.520447100047022,N/A
p3_find_n_smallest_number,prompt_4,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",1000,0.002257699961774051,0.002419456992065534,0.0035519999219104648,N/A
p3_find_n_smallest_number,prompt_4,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",10000,0.022253999952226877,0.02391884698648937,0.032748500001616776,N/A
p3_find_n_smallest_number,prompt_4,97,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    return result']",100000,0.23613500001374632,0.2661058529978618,0.5878954000072554,N/A
p3_find_n_smallest_number,prompt_4,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap)\n    result_indexes = [idx for val, idx in smallest_k]\n    return result_indexes']",1000,0.007351300097070634,0.00840000199736096,0.033358999993652105,N/A
p3_find_n_smallest_number,prompt_4,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap)\n    result_indexes = [idx for val, idx in smallest_k]\n    return result_indexes']",10000,0.08814769994933158,0.09125087399967015,0.1157668000087142,N/A
p3_find_n_smallest_number,prompt_4,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k = heapq.nsmallest(arg2, min_heap)\n    result_indexes = [idx for val, idx in smallest_k]\n    return result_indexes']",100000,1.0497086000395939,1.081592780003557,1.1904576000524685,N/A
p3_find_n_smallest_number,prompt_4,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    value_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",1000,0.005105899996124208,0.00548930699354969,0.006724100094288588,N/A
p3_find_n_smallest_number,prompt_4,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    value_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",10000,0.05299429991282523,0.05553262999979779,0.06221659993752837,N/A
p3_find_n_smallest_number,prompt_4,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    value_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for _, index in k_smallest]\n    return indexes']",100000,0.687373400083743,0.7361304009996821,1.1146808000048622,N/A
p3_find_n_smallest_number,prompt_4,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    return [idx for num, idx in k_smallest]']",1000,0.0069812999572604895,0.00756723899859935,0.00967790000140667,N/A
p3_find_n_smallest_number,prompt_4,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    return [idx for num, idx in k_smallest]']",10000,0.0846574999159202,0.09020637799985706,0.10921570006757975,N/A
p3_find_n_smallest_number,prompt_4,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list)\n    return [idx for num, idx in k_smallest]']",100000,1.0477476000087336,1.0776118349982426,1.1931526999687776,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005227699992246926,0.005512547995895147,0.007434200029820204,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06623170000966638,0.06887858299538493,0.07526149996556342,N/A
p3_find_n_smallest_number,prompt_5,1,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7842660999158397,0.8044772860012017,0.927041899994947,N/A
p3_find_n_smallest_number,prompt_5,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for val, idx in smallest_k]\n    return result_indexes']",1000,0.005059000104665756,0.005545120008755475,0.00811920000705868,N/A
p3_find_n_smallest_number,prompt_5,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for val, idx in smallest_k]\n    return result_indexes']",10000,0.05292309995274991,0.05549386000493541,0.06671660009305924,N/A
p3_find_n_smallest_number,prompt_5,2,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for val, idx in smallest_k]\n    return result_indexes']",100000,0.7060995999490842,0.7404289549950045,0.7935636999318376,N/A
p3_find_n_smallest_number,prompt_5,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    smallest_k_elements = heapq.nsmallest(arg2, indexed_arr)\n    smallest_indices = [idx for _, idx in smallest_k_elements]\n    return smallest_indices']",1000,0.007249000016599894,0.007971689995611087,0.019940400030463934,N/A
p3_find_n_smallest_number,prompt_5,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    smallest_k_elements = heapq.nsmallest(arg2, indexed_arr)\n    smallest_indices = [idx for _, idx in smallest_k_elements]\n    return smallest_indices']",10000,0.0855291000334546,0.08982443299610168,0.1000247000483796,N/A
p3_find_n_smallest_number,prompt_5,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    smallest_k_elements = heapq.nsmallest(arg2, indexed_arr)\n    smallest_indices = [idx for _, idx in smallest_k_elements]\n    return smallest_indices']",100000,1.034947199979797,1.0828972539945971,1.2512804999714717,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_elements_indices = []\n    for _ in range(arg2):\n        smallest_elements_indices.append(heapq.heappop(min_heap)[1])\n    return smallest_elements_indices']",1000,0.0052429999923333526,0.005662337007233873,0.014921699999831617,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_elements_indices = []\n    for _ in range(arg2):\n        smallest_elements_indices.append(heapq.heappop(min_heap)[1])\n    return smallest_elements_indices']",10000,0.0666037000482902,0.07012162899249233,0.08835899992845953,N/A
p3_find_n_smallest_number,prompt_5,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_elements_indices = []\n    for _ in range(arg2):\n        smallest_elements_indices.append(heapq.heappop(min_heap)[1])\n    return smallest_elements_indices']",100000,0.7955171999055892,0.818711304004537,0.8728835000656545,N/A
p3_find_n_smallest_number,prompt_5,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(indexed_array)[1])\n    return smallest_indices']",1000,0.005214100005105138,0.005936009994475171,0.011538399965502322,N/A
p3_find_n_smallest_number,prompt_5,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(indexed_array)[1])\n    return smallest_indices']",10000,0.06378289998974651,0.06668061400065199,0.0735008999472484,N/A
p3_find_n_smallest_number,prompt_5,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(indexed_array)[1])\n    return smallest_indices']",100000,0.7930225000018254,0.8183554159943014,0.9070120999822393,N/A
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    val_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, val_index_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indexes']",1000,0.006452500005252659,0.006937449998222291,0.009298699907958508,N/A
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    val_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, val_index_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indexes']",10000,0.0649318000068888,0.06872531300294213,0.08569510001689196,N/A
p3_find_n_smallest_number,prompt_5,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    val_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, val_index_pairs, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_pairs]\n    return k_smallest_indexes']",100000,0.8102394000161439,0.8537084969959687,1.0989338000072166,N/A
p3_find_n_smallest_number,prompt_5,7,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be in the range 1 to len(array)')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]""]",1000,0.005135899991728365,0.005611583999125287,0.008841600036248565,N/A
p3_find_n_smallest_number,prompt_5,7,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be in the range 1 to len(array)')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]""]",10000,0.05287260003387928,0.05631566599593498,0.07964709994848818,N/A
p3_find_n_smallest_number,prompt_5,7,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('k must be in the range 1 to len(array)')\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    return [index for value, index in k_smallest]""]",100000,0.6877972000511363,0.73620430500363,0.8274139000568539,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (-value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [index for _, index in heap]\n    return result']",1000,0.012480500037781894,0.013176159999566152,0.017193499952554703,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (-value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [index for _, index in heap]\n    return result']",10000,0.12435860000550747,0.13086097498890012,0.14404110005125403,N/A
p3_find_n_smallest_number,prompt_5,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (-value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [index for _, index in heap]\n    return result']",100000,1.258159299963154,1.2787499850022142,1.3577117000240833,N/A
p3_find_n_smallest_number,prompt_5,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = [index for value, index in k_smallest]\n    return result']",1000,0.009658799972385168,0.010013374998234213,0.011419600108638406,N/A
p3_find_n_smallest_number,prompt_5,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = [index for value, index in k_smallest]\n    return result']",10000,0.10685149999335408,0.1101948890008498,0.13367270003072917,N/A
p3_find_n_smallest_number,prompt_5,9,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest = heapq.nsmallest(arg2, heap)\n    result = [index for value, index in k_smallest]\n    return result']",100000,1.2115187000017613,1.2546543149941136,1.5461037000641227,N/A
p3_find_n_smallest_number,prompt_5,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    element_count = {}\n    for element in k_smallest_elements:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    for index, value in enumerate(arg1):\n        if value in element_count and element_count[value] > 0:\n            indexes.append(index)\n            element_count[value] -= 1\n        if len(indexes) == arg2:\n            break\n    return indexes']",1000,0.0041452000150457025,0.0043670880072750155,0.005157000035978854,N/A
p3_find_n_smallest_number,prompt_5,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    element_count = {}\n    for element in k_smallest_elements:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    for index, value in enumerate(arg1):\n        if value in element_count and element_count[value] > 0:\n            indexes.append(index)\n            element_count[value] -= 1\n        if len(indexes) == arg2:\n            break\n    return indexes']",10000,0.04362559993751347,0.046495039999717845,0.05699319997802377,N/A
p3_find_n_smallest_number,prompt_5,10,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    element_count = {}\n    for element in k_smallest_elements:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    for index, value in enumerate(arg1):\n        if value in element_count and element_count[value] > 0:\n            indexes.append(index)\n            element_count[value] -= 1\n        if len(indexes) == arg2:\n            break\n    return indexes']",100000,0.3507222000043839,0.3563631590048317,0.36638649995438755,N/A
p3_find_n_smallest_number,prompt_5,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        heapq.heappush(heap, (num, index))\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for _, idx in smallest_k]\n    return result_indexes']",1000,0.009648900013417006,0.010013866992667318,0.01458039996214211,N/A
p3_find_n_smallest_number,prompt_5,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        heapq.heappush(heap, (num, index))\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for _, idx in smallest_k]\n    return result_indexes']",10000,0.10520820005331188,0.1093753769993782,0.12368269998114556,N/A
p3_find_n_smallest_number,prompt_5,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        heapq.heappush(heap, (num, index))\n    smallest_k = heapq.nsmallest(arg2, heap)\n    result_indexes = [idx for _, idx in smallest_k]\n    return result_indexes']",100000,1.2538131000474095,1.2789793389942496,1.3992113000713289,N/A
p3_find_n_smallest_number,prompt_5,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap, key=lambda x: x[0])\n    indexes = [elem[1] for elem in k_smallest]\n    return indexes']",1000,0.006562600028701127,0.006893755989149213,0.007865600055083632,N/A
p3_find_n_smallest_number,prompt_5,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap, key=lambda x: x[0])\n    indexes = [elem[1] for elem in k_smallest]\n    return indexes']",10000,0.06343049998395145,0.06665523099596612,0.07310160004999489,N/A
p3_find_n_smallest_number,prompt_5,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, heap, key=lambda x: x[0])\n    indexes = [elem[1] for elem in k_smallest]\n    return indexes']",100000,0.7812607999658212,0.8041195729945321,0.8549088999861851,N/A
p3_find_n_smallest_number,prompt_5,13,"['import heapq\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if len(arr) < k or k <= 0:\n        return []\n    kth_smallest = quickselect(arr, k - 1)\n    smallest_indices = []\n    for index, value in enumerate(arr):\n        if value < kth_smallest:\n            smallest_indices.append(index)\n    remaining = k - len(smallest_indices)\n    for index, value in enumerate(arr):\n        if value == kth_smallest and remaining > 0:\n            smallest_indices.append(index)\n            remaining -= 1\n    return smallest_indices']",1000,0.014947900082916021,0.01598003599443473,0.01901489996816963,N/A
p3_find_n_smallest_number,prompt_5,13,"['import heapq\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if len(arr) < k or k <= 0:\n        return []\n    kth_smallest = quickselect(arr, k - 1)\n    smallest_indices = []\n    for index, value in enumerate(arr):\n        if value < kth_smallest:\n            smallest_indices.append(index)\n    remaining = k - len(smallest_indices)\n    for index, value in enumerate(arr):\n        if value == kth_smallest and remaining > 0:\n            smallest_indices.append(index)\n            remaining -= 1\n    return smallest_indices']",10000,0.1581189000280574,0.16236985400668347,0.18884930002968758,N/A
p3_find_n_smallest_number,prompt_5,13,"['import heapq\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    arr = arg1\n    if len(arr) < k or k <= 0:\n        return []\n    kth_smallest = quickselect(arr, k - 1)\n    smallest_indices = []\n    for index, value in enumerate(arr):\n        if value < kth_smallest:\n            smallest_indices.append(index)\n    remaining = k - len(smallest_indices)\n    for index, value in enumerate(arr):\n        if value == kth_smallest and remaining > 0:\n            smallest_indices.append(index)\n            remaining -= 1\n    return smallest_indices']",100000,1.2709821000462398,1.2932611520111095,1.3425390999764204,N/A
p3_find_n_smallest_number,prompt_5,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-num, i))\n        elif -max_heap[0][0] > num:\n            heapq.heapreplace(max_heap, (-num, i))\n    result_indices = [index for _, index in max_heap]\n    result_indices.sort()\n    return result_indices']",1000,0.004074099939316511,0.0042955750005785375,0.005968100042082369,N/A
p3_find_n_smallest_number,prompt_5,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-num, i))\n        elif -max_heap[0][0] > num:\n            heapq.heapreplace(max_heap, (-num, i))\n    result_indices = [index for _, index in max_heap]\n    result_indices.sort()\n    return result_indices']",10000,0.03941319999285042,0.041255480997497214,0.0503632000181824,N/A
p3_find_n_smallest_number,prompt_5,14,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    max_heap = []\n    for i, num in enumerate(arg1):\n        if len(max_heap) < k:\n            heapq.heappush(max_heap, (-num, i))\n        elif -max_heap[0][0] > num:\n            heapq.heapreplace(max_heap, (-num, i))\n    result_indices = [index for _, index in max_heap]\n    result_indices.sort()\n    return result_indices']",100000,0.40297469997312874,0.4139435079938266,0.46172240003943443,N/A
p3_find_n_smallest_number,prompt_5,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indices = [index for value, index in smallest_k]\n    return indices']",1000,0.0064801000989973545,0.006934776999987662,0.00846310006454587,N/A
p3_find_n_smallest_number,prompt_5,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indices = [index for value, index in smallest_k]\n    return indices']",10000,0.06524719996377826,0.06757657799520529,0.07698639994487166,N/A
p3_find_n_smallest_number,prompt_5,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_k = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    indices = [index for value, index in smallest_k]\n    return indices']",100000,0.781056199921295,0.8136987279984169,0.9447260999586433,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [idx for val, idx in heap]']",1000,0.003154700039885938,0.0033427409979049118,0.004470900050364435,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [idx for val, idx in heap]']",10000,0.028338300064206123,0.030112633006647228,0.046066600014455616,N/A
p3_find_n_smallest_number,prompt_5,16,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [idx for val, idx in heap]']",100000,0.2883298998931423,0.29652451699832455,0.3308458999963477,N/A
p3_find_n_smallest_number,prompt_5,17,"['def funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indices = [indexed_array[i][1] for i in range(min(arg2, len(arg1)))]\n    return smallest_indices']",1000,0.009725600015372038,0.010649384004063905,0.017963399994187057,N/A
p3_find_n_smallest_number,prompt_5,17,"['def funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indices = [indexed_array[i][1] for i in range(min(arg2, len(arg1)))]\n    return smallest_indices']",10000,0.15281230001710355,0.15692522400291636,0.16213549999520183,N/A
p3_find_n_smallest_number,prompt_5,17,"['def funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indices = [indexed_array[i][1] for i in range(min(arg2, len(arg1)))]\n    return smallest_indices']",100000,2.19923759996891,2.2596310679987073,2.492274400079623,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for idx, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, idx))\n        elif -max_heap[0][0] > num:\n            heapq.heappushpop(max_heap, (-num, idx))\n    return [idx for _, idx in max_heap]']",1000,0.004075400065630674,0.004433440000284463,0.00855350005440414,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for idx, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, idx))\n        elif -max_heap[0][0] > num:\n            heapq.heappushpop(max_heap, (-num, idx))\n    return [idx for _, idx in max_heap]']",10000,0.03978880005888641,0.042093195006018505,0.0617566000437364,N/A
p3_find_n_smallest_number,prompt_5,18,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for idx, num in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-num, idx))\n        elif -max_heap[0][0] > num:\n            heapq.heappushpop(max_heap, (-num, idx))\n    return [idx for _, idx in max_heap]']",100000,0.39797349995933473,0.41112919100211004,0.43687019997742027,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",1000,0.003105000010691583,0.003332424003165215,0.004262400092557073,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",10000,0.028913000016473234,0.030221089995466174,0.047173199942335486,N/A
p3_find_n_smallest_number,prompt_5,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    result.sort()\n    return result']",100000,0.28819560003466904,0.29645753300050276,0.3233044999651611,N/A
p3_find_n_smallest_number,prompt_5,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    indexes = [-heapq.heappop(heap)[1] for _ in range(len(heap))]\n    indexes.reverse()\n    return indexes']",1000,0.0031524000223726034,0.0034331659961026164,0.00751299993135035,N/A
p3_find_n_smallest_number,prompt_5,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    indexes = [-heapq.heappop(heap)[1] for _ in range(len(heap))]\n    indexes.reverse()\n    return indexes']",10000,0.029473500093445182,0.030807277002604678,0.03406850004103035,N/A
p3_find_n_smallest_number,prompt_5,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    indexes = [-heapq.heappop(heap)[1] for _ in range(len(heap))]\n    indexes.reverse()\n    return indexes']",100000,0.2974118000129238,0.30802450400195086,0.32176950003486127,N/A
p3_find_n_smallest_number,prompt_5,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -value > heap[0][0]:\n            heapq.heappushpop(heap, (-value, index))\n    indexes = [index for neg_value, index in heap]\n    indexes.sort()\n    return indexes']",1000,0.004362800042144954,0.004677937005180865,0.005541600054129958,N/A
p3_find_n_smallest_number,prompt_5,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -value > heap[0][0]:\n            heapq.heappushpop(heap, (-value, index))\n    indexes = [index for neg_value, index in heap]\n    indexes.sort()\n    return indexes']",10000,0.0431101000867784,0.04518570199725218,0.07071190001443028,N/A
p3_find_n_smallest_number,prompt_5,21,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -value > heap[0][0]:\n            heapq.heappushpop(heap, (-value, index))\n    indexes = [index for neg_value, index in heap]\n    indexes.sort()\n    return indexes']",100000,0.43257230008020997,0.44274290099856445,0.45784920000005513,N/A
p3_find_n_smallest_number,prompt_5,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indices']",1000,0.005048900027759373,0.005430397003656253,0.007096400018781424,N/A
p3_find_n_smallest_number,prompt_5,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indices']",10000,0.06658550002612174,0.06923366900649854,0.07748189999256283,N/A
p3_find_n_smallest_number,prompt_5,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return indices']",100000,0.777735099894926,0.8061688430025242,0.9189594000345096,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_elements]\n    return indices']",1000,0.00451450003311038,0.004803708002436906,0.007049800013191998,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_elements]\n    return indices']",10000,0.0414022000040859,0.043620738001773136,0.051011100062169135,N/A
p3_find_n_smallest_number,prompt_5,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_elements]\n    return indices']",100000,0.43921840004622936,0.4555433460068889,0.533086400013417,N/A
p3_find_n_smallest_number,prompt_5,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(min(len(arg1), arg2))]\n    return k_smallest_indices']",1000,0.007744499947875738,0.008101373995887116,0.009768599993549287,N/A
p3_find_n_smallest_number,prompt_5,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(min(len(arg1), arg2))]\n    return k_smallest_indices']",10000,0.08716510003432631,0.09024829599424265,0.10081660002470016,N/A
p3_find_n_smallest_number,prompt_5,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(min(len(arg1), arg2))]\n    return k_smallest_indices']",100000,0.9985735999653116,1.0221787569951266,1.0961726000532508,N/A
p3_find_n_smallest_number,prompt_5,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.00519589998293668,0.005571987996809184,0.011070100008510053,N/A
p3_find_n_smallest_number,prompt_5,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06632089999038726,0.06870843999786302,0.07261070003733039,N/A
p3_find_n_smallest_number,prompt_5,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7705437999684364,0.7942425699951127,0.8384744999930263,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    return [index for value, index in heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])]']",1000,0.011911000008694828,0.012309296998428181,0.013437899993732572,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    return [index for value, index in heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])]']",10000,0.11708880006335676,0.12172864599036984,0.1407467001117766,N/A
p3_find_n_smallest_number,prompt_5,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    return [index for value, index in heapq.nsmallest(arg2, min_heap, key=lambda x: x[0])]']",100000,1.1816247999668121,1.20961117300787,1.3023766000987962,N/A
p3_find_n_smallest_number,prompt_5,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result = [index for value, index in k_smallest]\n    return result']",1000,0.006297699990682304,0.006718763994285837,0.00917410000693053,N/A
p3_find_n_smallest_number,prompt_5,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result = [index for value, index in k_smallest]\n    return result']",10000,0.06451210007071495,0.06769858199870214,0.07966769998893142,N/A
p3_find_n_smallest_number,prompt_5,27,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result = [index for value, index in k_smallest]\n    return result']",100000,0.7788789999904111,0.7956295260088518,0.8905258000595495,N/A
p3_find_n_smallest_number,prompt_5,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.005097400047816336,0.005567536992020905,0.007217800011858344,N/A
p3_find_n_smallest_number,prompt_5,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.06707210000604391,0.06874358600703999,0.08001080004032701,N/A
p3_find_n_smallest_number,prompt_5,28,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    k_smallest_indexes = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.778879199991934,0.8012769159965683,0.9082996000070125,N/A
p3_find_n_smallest_number,prompt_5,29,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.001168999937362969,0.0013051679986529053,0.004754599998705089,N/A
p3_find_n_smallest_number,prompt_5,29,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.010379199986346066,0.01732979299966246,0.052417100057937205,N/A
p3_find_n_smallest_number,prompt_5,29,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in smallest_elements:\n        index = arg1.index(element)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.22319509997032583,0.42940681999665686,0.6312076000031084,N/A
p3_find_n_smallest_number,prompt_5,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [idx for _, idx in min_heap]\n    return result']",1000,0.01151199999731034,0.012363260996062308,0.015906200045719743,N/A
p3_find_n_smallest_number,prompt_5,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [idx for _, idx in min_heap]\n    return result']",10000,0.11669990001246333,0.12030623101163655,0.13098500005435199,N/A
p3_find_n_smallest_number,prompt_5,30,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [idx for _, idx in min_heap]\n    return result']",100000,1.170690199942328,1.1947683129960205,1.2496606000931934,N/A
p3_find_n_smallest_number,prompt_5,31,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid input: ensure arg1 is non-empty and 0 < arg2 <= len(arg1)')\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    min_heap = indexed_list[:arg2]\n    heapq.heapify(min_heap)\n    for element in indexed_list[arg2:]:\n        if element[0] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, element)\n    result = [element[1] for element in min_heap]\n    return result""]",1000,0.005098200053907931,0.005459992000833153,0.008577300002798438,N/A
p3_find_n_smallest_number,prompt_5,31,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid input: ensure arg1 is non-empty and 0 < arg2 <= len(arg1)')\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    min_heap = indexed_list[:arg2]\n    heapq.heapify(min_heap)\n    for element in indexed_list[arg2:]:\n        if element[0] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, element)\n    result = [element[1] for element in min_heap]\n    return result""]",10000,0.0549676000373438,0.058047417002962905,0.0654239000286907,N/A
p3_find_n_smallest_number,prompt_5,31,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid input: ensure arg1 is non-empty and 0 < arg2 <= len(arg1)')\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    min_heap = indexed_list[:arg2]\n    heapq.heapify(min_heap)\n    for element in indexed_list[arg2:]:\n        if element[0] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, element)\n    result = [element[1] for element in min_heap]\n    return result""]",100000,0.7768220000434667,0.8007214040041436,0.9163889000192285,N/A
p3_find_n_smallest_number,prompt_5,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [index for value, index in heap]\n    return result']",1000,0.011917900061234832,0.012326708994805813,0.013153200037777424,N/A
p3_find_n_smallest_number,prompt_5,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [index for value, index in heap]\n    return result']",10000,0.11614269996061921,0.12290012399666012,0.14397039997857064,N/A
p3_find_n_smallest_number,prompt_5,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [index for value, index in heap]\n    return result']",100000,1.1753361999290064,1.201446951001417,1.2787639000453055,N/A
p3_find_n_smallest_number,prompt_5,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arr = [(element, index) for index, element in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    k_smallest = [heapq.heappop(indexed_arr) for _ in range(arg2)]\n    k_smallest_indices = sorted([item[1] for item in k_smallest])\n    return k_smallest_indices']",1000,0.005223399959504604,0.005464879993814975,0.006815599976107478,N/A
p3_find_n_smallest_number,prompt_5,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arr = [(element, index) for index, element in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    k_smallest = [heapq.heappop(indexed_arr) for _ in range(arg2)]\n    k_smallest_indices = sorted([item[1] for item in k_smallest])\n    return k_smallest_indices']",10000,0.06671000004280359,0.0687469240045175,0.077047000057064,N/A
p3_find_n_smallest_number,prompt_5,33,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_arr = [(element, index) for index, element in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    k_smallest = [heapq.heappop(indexed_arr) for _ in range(arg2)]\n    k_smallest_indices = sorted([item[1] for item in k_smallest])\n    return k_smallest_indices']",100000,0.7819789999630302,0.8153354280034546,0.8517085999483243,N/A
p3_find_n_smallest_number,prompt_5,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    min_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arg1[i], i))\n    result = [idx for value, idx in min_heap]\n    result.sort()\n    return result']",1000,0.002988699940033257,0.0032301460043527184,0.004098400007933378,N/A
p3_find_n_smallest_number,prompt_5,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    min_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arg1[i], i))\n    result = [idx for value, idx in min_heap]\n    result.sort()\n    return result']",10000,0.028206399991177022,0.03046271399478428,0.06342639995273203,N/A
p3_find_n_smallest_number,prompt_5,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    min_heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappushpop(min_heap, (-arg1[i], i))\n    result = [idx for value, idx in min_heap]\n    result.sort()\n    return result']",100000,0.2896435000002384,0.29791559499688447,0.326047100010328,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",1000,0.00525090005248785,0.005558289992623031,0.006577300024218857,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",10000,0.0679847999708727,0.06976454000920057,0.07203779998235404,N/A
p3_find_n_smallest_number,prompt_5,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(heap)\n    result = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result']",100000,0.7801067000254989,0.8001403170009144,0.8895484999520704,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_indexes = [item[1] for item in k_smallest]\n    return k_indexes']",1000,0.006379100028425455,0.007086974991252646,0.012674099998548627,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_indexes = [item[1] for item in k_smallest]\n    return k_indexes']",10000,0.06508250010665506,0.06896124899736605,0.09988550003618002,N/A
p3_find_n_smallest_number,prompt_5,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return None\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_indexes = [item[1] for item in k_smallest]\n    return k_indexes']",100000,0.7807765000034124,0.8101180420059245,1.0565989000024274,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    n = len(arg1)\n    k = arg2\n    if k >= n:\n        return list(range(n))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(k)]\n    return k_smallest_indexes']",1000,0.007476300001144409,0.008209545997669921,0.011899199918843806,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    n = len(arg1)\n    k = arg2\n    if k >= n:\n        return list(range(n))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(k)]\n    return k_smallest_indexes']",10000,0.0851113999960944,0.08714006899273954,0.09821789991110563,N/A
p3_find_n_smallest_number,prompt_5,37,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    n = len(arg1)\n    k = arg2\n    if k >= n:\n        return list(range(n))\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(k)]\n    return k_smallest_indexes']",100000,0.9871794000500813,1.0105591529910454,1.0520560999866575,N/A
p3_find_n_smallest_number,prompt_5,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005159799940884113,0.005539666000986472,0.0068301999708637595,N/A
p3_find_n_smallest_number,prompt_5,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06491730001289397,0.06859792400267907,0.08558309997897595,N/A
p3_find_n_smallest_number,prompt_5,38,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7910457999678329,0.8148340139933862,0.9979115000460297,N/A
p3_find_n_smallest_number,prompt_5,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [-1]\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for value, index in k_smallest_pairs]\n    return indexes']",1000,0.005056299967691302,0.005442643990973011,0.006038599996827543,N/A
p3_find_n_smallest_number,prompt_5,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [-1]\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for value, index in k_smallest_pairs]\n    return indexes']",10000,0.05338570009917021,0.055159934003604576,0.06424469989724457,N/A
p3_find_n_smallest_number,prompt_5,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return [-1]\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for value, index in k_smallest_pairs]\n    return indexes']",100000,0.680530000012368,0.6995739220059477,0.8151965000433847,N/A
p3_find_n_smallest_number,prompt_5,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    indices = [index for index, _ in k_smallest]\n    return indices""]",1000,0.005123600014485419,0.005473405995871872,0.006262500071898103,N/A
p3_find_n_smallest_number,prompt_5,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    indices = [index for index, _ in k_smallest]\n    return indices""]",10000,0.053639500052668154,0.055554981000022964,0.06341139995492995,N/A
p3_find_n_smallest_number,prompt_5,40,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = list(enumerate(arg1))\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    indices = [index for index, _ in k_smallest]\n    return indices""]",100000,0.6856654000002891,0.7074159549956676,0.7679364999057725,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    initial_elements = [(arg1[i], i) for i in range(min(arg2, len(arg1)))]\n    heapq.heapify(initial_elements)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < initial_elements[0][0]:\n            heapq.heappushpop(initial_elements, (arg1[i], i))\n    smallest_indexes = [index for value, index in initial_elements]\n    return smallest_indexes']",1000,0.0024510000366717577,0.0026448810007423163,0.0036699000047519803,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    initial_elements = [(arg1[i], i) for i in range(min(arg2, len(arg1)))]\n    heapq.heapify(initial_elements)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < initial_elements[0][0]:\n            heapq.heappushpop(initial_elements, (arg1[i], i))\n    smallest_indexes = [index for value, index in initial_elements]\n    return smallest_indexes']",10000,0.02348360000178218,0.024858018005033955,0.03580770001281053,N/A
p3_find_n_smallest_number,prompt_5,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    initial_elements = [(arg1[i], i) for i in range(min(arg2, len(arg1)))]\n    heapq.heapify(initial_elements)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < initial_elements[0][0]:\n            heapq.heappushpop(initial_elements, (arg1[i], i))\n    smallest_indexes = [index for value, index in initial_elements]\n    return smallest_indexes']",100000,0.2777162999846041,0.2868871759995818,0.31859250005800277,N/A
p3_find_n_smallest_number,prompt_5,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    heap = value_index_pairs[:arg2]\n    heapq.heapify(heap)\n    for pair in value_index_pairs[arg2:]:\n        if pair < heap[0]:\n            heapq.heapreplace(heap, pair)\n    result_indexes = [index for value, index in heap]\n    return result_indexes']",1000,0.005137800006195903,0.005465864003635943,0.007913800072856247,N/A
p3_find_n_smallest_number,prompt_5,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    heap = value_index_pairs[:arg2]\n    heapq.heapify(heap)\n    for pair in value_index_pairs[arg2:]:\n        if pair < heap[0]:\n            heapq.heapreplace(heap, pair)\n    result_indexes = [index for value, index in heap]\n    return result_indexes']",10000,0.05777469999156892,0.061011749999597666,0.11354110005777329,N/A
p3_find_n_smallest_number,prompt_5,42,"['import heapq\n\ndef funcImp(arg1, arg2):\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    heap = value_index_pairs[:arg2]\n    heapq.heapify(heap)\n    for pair in value_index_pairs[arg2:]:\n        if pair < heap[0]:\n            heapq.heapreplace(heap, pair)\n    result_indexes = [index for value, index in heap]\n    return result_indexes']",100000,0.7552803000435233,0.7725436350051313,0.8300770999630913,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = []\n    elements_count = {}\n    for elem in k_smallest_elements:\n        elements_count[elem] = elements_count.get(elem, 0) + 1\n    for i, value in enumerate(arg1):\n        if value in elements_count and elements_count[value] > 0:\n            indices.append(i)\n            elements_count[value] -= 1\n            if sum(elements_count.values()) == 0:\n                break\n    return indices']",1000,0.0031392000382766128,0.003394990995293483,0.0055099999299272895,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = []\n    elements_count = {}\n    for elem in k_smallest_elements:\n        elements_count[elem] = elements_count.get(elem, 0) + 1\n    for i, value in enumerate(arg1):\n        if value in elements_count and elements_count[value] > 0:\n            indices.append(i)\n            elements_count[value] -= 1\n            if sum(elements_count.values()) == 0:\n                break\n    return indices']",10000,0.03454509994480759,0.03653575100703165,0.04538719996344298,N/A
p3_find_n_smallest_number,prompt_5,43,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = []\n    elements_count = {}\n    for elem in k_smallest_elements:\n        elements_count[elem] = elements_count.get(elem, 0) + 1\n    for i, value in enumerate(arg1):\n        if value in elements_count and elements_count[value] > 0:\n            indices.append(i)\n            elements_count[value] -= 1\n            if sum(elements_count.values()) == 0:\n                break\n    return indices']",100000,0.28494379995390773,0.29151790199917743,0.31167070008814335,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    return [index for index, value in k_smallest_elements]']",1000,0.005410599987953901,0.006186018991284073,0.010331799974665046,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    return [index for index, value in k_smallest_elements]']",10000,0.0537142000393942,0.05603202600032091,0.06246269994881004,N/A
p3_find_n_smallest_number,prompt_5,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = list(enumerate(arg1))\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[1])\n    return [index for index, value in k_smallest_elements]']",100000,0.6816900999983773,0.7085952869977337,0.7686281999340281,N/A
p3_find_n_smallest_number,prompt_5,45,"['def funcImp(arg1, arg2):\n    k = arg2\n    array_with_index = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_array_with_index = sorted(array_with_index, key=lambda x: x[0])\n    k_smallest_indices = [idx for val, idx in sorted_array_with_index[:k]]\n    return k_smallest_indices']",1000,0.009912900044582784,0.010429046005010606,0.01320859999395907,N/A
p3_find_n_smallest_number,prompt_5,45,"['def funcImp(arg1, arg2):\n    k = arg2\n    array_with_index = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_array_with_index = sorted(array_with_index, key=lambda x: x[0])\n    k_smallest_indices = [idx for val, idx in sorted_array_with_index[:k]]\n    return k_smallest_indices']",10000,0.15665649995207787,0.16117932799854315,0.16740609996486455,N/A
p3_find_n_smallest_number,prompt_5,45,"['def funcImp(arg1, arg2):\n    k = arg2\n    array_with_index = [(val, idx) for idx, val in enumerate(arg1)]\n    sorted_array_with_index = sorted(array_with_index, key=lambda x: x[0])\n    k_smallest_indices = [idx for val, idx in sorted_array_with_index[:k]]\n    return k_smallest_indices']",100000,2.2969370000064373,2.334965789996786,2.5126279999967664,N/A
p3_find_n_smallest_number,prompt_5,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    while len(min_heap) > arg2:\n        heapq.heappop(min_heap)\n    smallest_indices = [index for value, index in min_heap]\n    return smallest_indices']",1000,0.02358410006854683,0.025073563997866585,0.030323499930091202,N/A
p3_find_n_smallest_number,prompt_5,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    while len(min_heap) > arg2:\n        heapq.heappop(min_heap)\n    smallest_indices = [index for value, index in min_heap]\n    return smallest_indices']",10000,0.3357616000575945,0.3490734790067654,0.4878341000294313,N/A
p3_find_n_smallest_number,prompt_5,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    while len(min_heap) > arg2:\n        heapq.heappop(min_heap)\n    smallest_indices = [index for value, index in min_heap]\n    return smallest_indices']",100000,600.0,600.0,600.0,	 runtime.get_runtime terminated after 600 seconds
p3_find_n_smallest_number,prompt_5,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indices_of_k_smallest = [idx for _, idx in k_smallest]\n    return indices_of_k_smallest']",1000,0.0052553999703377485,0.005508386002620682,0.006651400006376207,N/A
p3_find_n_smallest_number,prompt_5,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indices_of_k_smallest = [idx for _, idx in k_smallest]\n    return indices_of_k_smallest']",10000,0.0526321999495849,0.055130695003317666,0.06769099994562566,N/A
p3_find_n_smallest_number,prompt_5,47,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    indices_of_k_smallest = [idx for _, idx in k_smallest]\n    return indices_of_k_smallest']",100000,0.6817043999908492,0.7059192430030089,0.8193664000136778,N/A
p3_find_n_smallest_number,prompt_5,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (-num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for _, index in min_heap]\n    indices.sort()\n    return indices']",1000,0.012339900014922023,0.013091850001364947,0.01755250000860542,N/A
p3_find_n_smallest_number,prompt_5,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (-num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for _, index in min_heap]\n    indices.sort()\n    return indices']",10000,0.12505800009239465,0.12782286201021634,0.1364472999703139,N/A
p3_find_n_smallest_number,prompt_5,48,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (-num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for _, index in min_heap]\n    indices.sort()\n    return indices']",100000,1.2475273000309244,1.2764652310020757,1.3154510000022128,N/A
p3_find_n_smallest_number,prompt_5,49,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = list(enumerate(arg1))\n    sorted_array = sorted(indexed_array, key=lambda x: x[1])\n    k_smallest_pairs = sorted_array[:arg2]\n    k_smallest_indexes = [pair[0] for pair in k_smallest_pairs]\n    return k_smallest_indexes']",1000,0.008573299972340465,0.009358928999863564,0.01931869995314628,N/A
p3_find_n_smallest_number,prompt_5,49,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = list(enumerate(arg1))\n    sorted_array = sorted(indexed_array, key=lambda x: x[1])\n    k_smallest_pairs = sorted_array[:arg2]\n    k_smallest_indexes = [pair[0] for pair in k_smallest_pairs]\n    return k_smallest_indexes']",10000,0.13985500007402152,0.14381792299915105,0.15569230006076396,N/A
p3_find_n_smallest_number,prompt_5,49,"['def funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_array = list(enumerate(arg1))\n    sorted_array = sorted(indexed_array, key=lambda x: x[1])\n    k_smallest_pairs = sorted_array[:arg2]\n    k_smallest_indexes = [pair[0] for pair in k_smallest_pairs]\n    return k_smallest_indexes']",100000,2.1652840001042932,2.221010606995551,2.512886599986814,N/A
p3_find_n_smallest_number,prompt_5,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the array'\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = [heapq.heappop(indexed_list) for _ in range(arg2)]\n    result_indexes = [item[1] for item in k_smallest]\n    return result_indexes""]",1000,0.00505359994713217,0.005453492000233382,0.007409499958157539,N/A
p3_find_n_smallest_number,prompt_5,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the array'\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = [heapq.heappop(indexed_list) for _ in range(arg2)]\n    result_indexes = [item[1] for item in k_smallest]\n    return result_indexes""]",10000,0.06613910000305623,0.06825951099861413,0.07156830001622438,N/A
p3_find_n_smallest_number,prompt_5,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be greater than the length of the array'\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = [heapq.heappop(indexed_list) for _ in range(arg2)]\n    result_indexes = [item[1] for item in k_smallest]\n    return result_indexes""]",100000,0.7730439000297338,0.8021098080009688,0.8901206000009552,N/A
p3_find_n_smallest_number,prompt_5,51,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indices = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_indices""]",1000,0.00940649991389364,0.01025943300453946,0.013814800069667399,N/A
p3_find_n_smallest_number,prompt_5,51,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indices = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_indices""]",10000,0.15304480004124343,0.15760780199547297,0.163738299976103,N/A
p3_find_n_smallest_number,prompt_5,51,"[""def funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    indexed_array.sort(key=lambda x: x[0])\n    smallest_indices = [indexed_array[i][1] for i in range(arg2)]\n    return smallest_indices""]",100000,2.20760630001314,2.251516811003676,2.3267130999593064,N/A
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        index = arg1.index(element)\n        while arg1[index] is None:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n        arg1[index] = None\n    return indexes']",1000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        index = arg1.index(element)\n        while arg1[index] is None:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n        arg1[index] = None\n    return indexes']",10000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_5,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for element in k_smallest_elements:\n        index = arg1.index(element)\n        while arg1[index] is None:\n            index = arg1.index(element, index + 1)\n        indexes.append(index)\n        arg1[index] = None\n    return indexes']",100000,0,0,0,	 exception: '<' not supported between instances of 'NoneType' and 'int'
p3_find_n_smallest_number,prompt_5,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result_indices = [index for num, index in min_heap]\n    return result_indices']",1000,0.011882300022989511,0.012454182998044416,0.01646210008766502,N/A
p3_find_n_smallest_number,prompt_5,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result_indices = [index for num, index in min_heap]\n    return result_indices']",10000,0.11553870001807809,0.12096098599955439,0.1365354999434203,N/A
p3_find_n_smallest_number,prompt_5,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result_indices = [index for num, index in min_heap]\n    return result_indices']",100000,1.1857433000113815,1.2101844229979906,1.2636089000152424,N/A
p3_find_n_smallest_number,prompt_5,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [index for value, index in heap]']",1000,0.011449099984019995,0.012465019000228495,0.0202180000487715,N/A
p3_find_n_smallest_number,prompt_5,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [index for value, index in heap]']",10000,0.11116660002153367,0.11450842700782232,0.12719979998655617,N/A
p3_find_n_smallest_number,prompt_5,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [index for value, index in heap]']",100000,1.1236011000582948,1.1475673499994445,1.309886600007303,N/A
p3_find_n_smallest_number,prompt_5,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in k_smallest_tuples]\n    return k_smallest_indexes']",1000,0.006584499962627888,0.006874141996959225,0.008763699908740819,N/A
p3_find_n_smallest_number,prompt_5,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in k_smallest_tuples]\n    return k_smallest_indexes']",10000,0.06634570006281137,0.06871859700535424,0.07519659993704408,N/A
p3_find_n_smallest_number,prompt_5,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuples = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [item[1] for item in k_smallest_tuples]\n    return k_smallest_indexes']",100000,0.7749716999242082,0.8019936690013856,0.829480400076136,N/A
p3_find_n_smallest_number,prompt_5,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest = heapq.heappop(heap)\n        smallest_indices.append(smallest[1])\n    return smallest_indices']",1000,0.004991699941456318,0.0054904629953671244,0.007210399955511093,N/A
p3_find_n_smallest_number,prompt_5,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest = heapq.heappop(heap)\n        smallest_indices.append(smallest[1])\n    return smallest_indices']",10000,0.0652492999797687,0.06844064700533636,0.07419150008354336,N/A
p3_find_n_smallest_number,prompt_5,56,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest = heapq.heappop(heap)\n        smallest_indices.append(smallest[1])\n    return smallest_indices']",100000,0.7710073000052944,0.7856488670024555,0.8455801999662071,N/A
p3_find_n_smallest_number,prompt_5,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < heap[0][0]:\n            heapq.heapreplace(heap, (val, idx))\n    result = [idx for val, idx in heap]\n    return result']",1000,0.0025293000508099794,0.002665302004897967,0.0032079999800771475,N/A
p3_find_n_smallest_number,prompt_5,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < heap[0][0]:\n            heapq.heapreplace(heap, (val, idx))\n    result = [idx for val, idx in heap]\n    return result']",10000,0.024827699991874397,0.02613761100452393,0.03129279997665435,N/A
p3_find_n_smallest_number,prompt_5,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < heap[0][0]:\n            heapq.heapreplace(heap, (val, idx))\n    result = [idx for val, idx in heap]\n    return result']",100000,0.24791879998520017,0.2581753690098412,0.3534889000002295,N/A
p3_find_n_smallest_number,prompt_5,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return smallest_indices']",1000,0.005165099981240928,0.005581846996210516,0.00845249998383224,N/A
p3_find_n_smallest_number,prompt_5,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return smallest_indices']",10000,0.06599800009280443,0.06966350599890575,0.07651990000158548,N/A
p3_find_n_smallest_number,prompt_5,58,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(indexed_array)\n    smallest_indices = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return smallest_indices']",100000,0.7766766999848187,0.7911987320019398,0.862729600048624,N/A
p3_find_n_smallest_number,prompt_5,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    count = {val: 0 for val in k_smallest}\n    for index, value in enumerate(arg1):\n        if value in k_smallest and count[value] < k_smallest.count(value):\n            indices.append(index)\n            count[value] += 1\n    return indices']",1000,0.004768700106069446,0.004996828002622351,0.008525899960659444,N/A
p3_find_n_smallest_number,prompt_5,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    count = {val: 0 for val in k_smallest}\n    for index, value in enumerate(arg1):\n        if value in k_smallest and count[value] < k_smallest.count(value):\n            indices.append(index)\n            count[value] += 1\n    return indices']",10000,0.04496169998310506,0.04617064700112678,0.051243399968370795,N/A
p3_find_n_smallest_number,prompt_5,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 == 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indices = []\n    count = {val: 0 for val in k_smallest}\n    for index, value in enumerate(arg1):\n        if value in k_smallest and count[value] < k_smallest.count(value):\n            indices.append(index)\n            count[value] += 1\n    return indices']",100000,0.44949250004719943,0.45989221399766395,0.4898354000179097,N/A
p3_find_n_smallest_number,prompt_5,60,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for value, index in k_smallest_pairs]\n    return indexes""]",1000,0.005081999930553138,0.005494492006255314,0.008834499982185662,N/A
p3_find_n_smallest_number,prompt_5,60,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for value, index in k_smallest_pairs]\n    return indexes""]",10000,0.051075999974273145,0.05401737300097011,0.06808509991969913,N/A
p3_find_n_smallest_number,prompt_5,60,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, value_index_pairs)\n    indexes = [index for value, index in k_smallest_pairs]\n    return indexes""]",100000,0.6770907000172883,0.7016170670022257,0.8768436000682414,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    return [index for value, index in min_heap]']",1000,0.0023562998976558447,0.0027252160105854274,0.005419600056484342,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    return [index for value, index in min_heap]']",10000,0.023578199907206,0.026118581005139276,0.1172692000400275,N/A
p3_find_n_smallest_number,prompt_5,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    return [index for value, index in min_heap]']",100000,0.2791180000640452,0.28900522699928843,0.3198151000542566,N/A
p3_find_n_smallest_number,prompt_5,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(max_heap, (-value, index))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    result_indexes = [index for _, index in max_heap]\n    return result_indexes']",1000,0.012329100049100816,0.013030508991796523,0.015177199966274202,N/A
p3_find_n_smallest_number,prompt_5,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(max_heap, (-value, index))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    result_indexes = [index for _, index in max_heap]\n    return result_indexes']",10000,0.12496839999221265,0.12857821500161662,0.13754450005944818,N/A
p3_find_n_smallest_number,prompt_5,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(max_heap, (-value, index))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    result_indexes = [index for _, index in max_heap]\n    return result_indexes']",100000,1.2610520999878645,1.274824631998781,1.2986880000680685,N/A
p3_find_n_smallest_number,prompt_5,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, value_index_pairs, key=lambda x: x[0])\n    indices = [index for value, index in smallest_pairs]\n    indices.sort()\n    return indices']",1000,0.00629980000667274,0.00690586999990046,0.012775199953466654,N/A
p3_find_n_smallest_number,prompt_5,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, value_index_pairs, key=lambda x: x[0])\n    indices = [index for value, index in smallest_pairs]\n    indices.sort()\n    return indices']",10000,0.06419910001568496,0.06835856900550424,0.10285729996394366,N/A
p3_find_n_smallest_number,prompt_5,63,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    value_index_pairs = [(value, index) for index, value in enumerate(arg1)]\n    smallest_pairs = heapq.nsmallest(arg2, value_index_pairs, key=lambda x: x[0])\n    indices = [index for value, index in smallest_pairs]\n    indices.sort()\n    return indices']",100000,0.7750270999968052,0.8032108379888814,0.9632902999874204,N/A
p3_find_n_smallest_number,prompt_5,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in min_heap]\n    return result']",1000,0.011982199968770146,0.012523920002859085,0.019304499961435795,N/A
p3_find_n_smallest_number,prompt_5,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in min_heap]\n    return result']",10000,0.11740210000425577,0.12097274000523611,0.12910050002392381,N/A
p3_find_n_smallest_number,prompt_5,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in min_heap]\n    return result']",100000,1.1586828000145033,1.190490696997149,1.263075100025162,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-val, idx))\n    result = [idx for _, idx in min_heap]\n    result.sort()\n    return result']",1000,0.0030245999805629253,0.0032086219917982816,0.0037725999718531966,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-val, idx))\n    result = [idx for _, idx in min_heap]\n    result.sort()\n    return result']",10000,0.027085299952887,0.02887379399733618,0.03693589998874813,N/A
p3_find_n_smallest_number,prompt_5,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        val = arg1[idx]\n        if val < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-val, idx))\n    result = [idx for _, idx in min_heap]\n    result.sort()\n    return result']",100000,0.2709404999623075,0.2793495479947887,0.31127619999460876,N/A
p3_find_n_smallest_number,prompt_5,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in min_heap]\n    return sorted(result)']",1000,0.011755299987271428,0.01232682100031525,0.01442190003581345,N/A
p3_find_n_smallest_number,prompt_5,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in min_heap]\n    return sorted(result)']",10000,0.11833800002932549,0.12072653899667785,0.1283867999445647,N/A
p3_find_n_smallest_number,prompt_5,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [index for value, index in min_heap]\n    return sorted(result)']",100000,1.1816516999388114,1.2078348749899306,1.3222983999876305,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    return [idx for value, idx in min_heap]']",1000,0.0022504000226035714,0.002425779999466613,0.0030493000522255898,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    return [idx for value, idx in min_heap]']",10000,0.023064299952238798,0.02374814399285242,0.02670279995072633,N/A
p3_find_n_smallest_number,prompt_5,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, (arg1[idx], idx))\n    return [idx for value, idx in min_heap]']",100000,0.22682770004030317,0.23552061399444937,0.27038499992340803,N/A
p3_find_n_smallest_number,prompt_5,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    smallest_indices.sort()\n    return smallest_indices']",1000,0.005308400024659932,0.005492622994352132,0.005999700049869716,N/A
p3_find_n_smallest_number,prompt_5,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    smallest_indices.sort()\n    return smallest_indices']",10000,0.063783899997361,0.06711052800994366,0.0742038000607863,N/A
p3_find_n_smallest_number,prompt_5,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    smallest_indices.sort()\n    return smallest_indices']",100000,0.7897310999687761,0.8257809709920548,1.1042550000129268,N/A
p3_find_n_smallest_number,prompt_5,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    indexed_arr = [(num, idx) for idx, num in enumerate(arg1)]\n    heap = []\n    for value, idx in indexed_arr:\n        heapq.heappush(heap, (-value, idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = [idx for _, idx in heap]\n    return result']",1000,0.014539399999193847,0.015477911001071334,0.021763000055216253,N/A
p3_find_n_smallest_number,prompt_5,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    indexed_arr = [(num, idx) for idx, num in enumerate(arg1)]\n    heap = []\n    for value, idx in indexed_arr:\n        heapq.heappush(heap, (-value, idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = [idx for _, idx in heap]\n    return result']",10000,0.1506037999643013,0.15558812900213526,0.17604020005092025,N/A
p3_find_n_smallest_number,prompt_5,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0:\n        return []\n    indexed_arr = [(num, idx) for idx, num in enumerate(arg1)]\n    heap = []\n    for value, idx in indexed_arr:\n        heapq.heappush(heap, (-value, idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    result = [idx for _, idx in heap]\n    return result']",100000,1.6743149999529123,1.71646269400022,1.775957699981518,N/A
p3_find_n_smallest_number,prompt_5,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result = [idx for _, idx in k_smallest]\n    return result']",1000,0.008455800008960068,0.008942312995204703,0.013206199975684285,N/A
p3_find_n_smallest_number,prompt_5,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result = [idx for _, idx in k_smallest]\n    return result']",10000,0.09796350006945431,0.10137156500131823,0.11753639997914433,N/A
p3_find_n_smallest_number,prompt_5,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result = [idx for _, idx in k_smallest]\n    return result']",100000,1.149728500051424,1.1786827210022601,1.2656072999816388,N/A
p3_find_n_smallest_number,prompt_5,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_elements = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_elements, key=lambda x: x[0])\n    indices = [element[1] for element in k_smallest_elements]\n    indices.sort()\n    return indices']",1000,0.00641250004991889,0.006750262001296505,0.007513799937441945,N/A
p3_find_n_smallest_number,prompt_5,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_elements = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_elements, key=lambda x: x[0])\n    indices = [element[1] for element in k_smallest_elements]\n    indices.sort()\n    return indices']",10000,0.06443630007561296,0.06714055199874565,0.08008989994414151,N/A
p3_find_n_smallest_number,prompt_5,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_elements = [(elem, idx) for idx, elem in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_elements, key=lambda x: x[0])\n    indices = [element[1] for element in k_smallest_elements]\n    indices.sort()\n    return indices']",100000,0.778201200067997,0.7978304840018973,0.8859605999896303,N/A
p3_find_n_smallest_number,prompt_5,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if len(arg1) <= arg2:\n        return list(range(len(arg1)))\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_k]\n    return indices']",1000,0.004463299992494285,0.00479849600000307,0.007176000042818487,N/A
p3_find_n_smallest_number,prompt_5,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if len(arg1) <= arg2:\n        return list(range(len(arg1)))\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_k]\n    return indices']",10000,0.04192650003824383,0.04363826698856428,0.04900709993671626,N/A
p3_find_n_smallest_number,prompt_5,72,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if len(arg1) <= arg2:\n        return list(range(len(arg1)))\n    smallest_k = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [index for index, value in smallest_k]\n    return indices']",100000,0.4395435999613255,0.44972417599870823,0.5310294000664726,N/A
p3_find_n_smallest_number,prompt_5,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        smallest_indexes.append(idx)\n    return smallest_indexes']",1000,0.005202999920584261,0.005447165998630226,0.00653090002015233,N/A
p3_find_n_smallest_number,prompt_5,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        smallest_indexes.append(idx)\n    return smallest_indexes']",10000,0.065329400007613,0.06799480899586342,0.07586779992561787,N/A
p3_find_n_smallest_number,prompt_5,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        smallest_indexes.append(idx)\n    return smallest_indexes']",100000,0.7929755999939516,0.8102994950022548,0.8673467999324203,N/A
p3_find_n_smallest_number,prompt_5,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr = arg1\n    k = arg2\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    heap = [(arr[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arr[i], i))\n    return [index for value, index in heap]']",1000,0.002222800045274198,0.002340201003244147,0.00271140004042536,N/A
p3_find_n_smallest_number,prompt_5,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr = arg1\n    k = arg2\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    heap = [(arr[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arr[i], i))\n    return [index for value, index in heap]']",10000,0.022132900077849627,0.023519002001266928,0.03199120005592704,N/A
p3_find_n_smallest_number,prompt_5,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    arr = arg1\n    k = arg2\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    heap = [(arr[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] < heap[0][0]:\n            heapq.heapreplace(heap, (arr[i], i))\n    return [index for value, index in heap]']",100000,0.2290369999827817,0.23629840699606575,0.3033936999272555,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    value_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(value_index_pairs)\n    k_smallest = heapq.nsmallest(arg2, value_index_pairs)\n    result = [idx for val, idx in k_smallest]\n    return result']",1000,0.007236600038595498,0.007727886008797214,0.01686650002375245,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    value_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(value_index_pairs)\n    k_smallest = heapq.nsmallest(arg2, value_index_pairs)\n    result = [idx for val, idx in k_smallest]\n    return result']",10000,0.08468179998453707,0.08805881799431518,0.10604490002151579,N/A
p3_find_n_smallest_number,prompt_5,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    value_index_pairs = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(value_index_pairs)\n    k_smallest = heapq.nsmallest(arg2, value_index_pairs)\n    result = [idx for val, idx in k_smallest]\n    return result']",100000,1.0144362000282854,1.032477769004181,1.0774655001005158,N/A
p3_find_n_smallest_number,prompt_5,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for _, index in k_smallest_elements]\n    return result_indexes']",1000,0.005147699965164065,0.005470560003304854,0.006321000051684678,N/A
p3_find_n_smallest_number,prompt_5,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for _, index in k_smallest_elements]\n    return result_indexes']",10000,0.05186930007766932,0.055423357004765424,0.08630810002796352,N/A
p3_find_n_smallest_number,prompt_5,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 > len(arg1):\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    result_indexes = [index for _, index in k_smallest_elements]\n    return result_indexes']",100000,0.6815427999245003,0.7063687330007088,0.7505256000440568,N/A
p3_find_n_smallest_number,prompt_5,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for value, index in min_heap]\n    return sorted(indices)']",1000,0.011518799932673573,0.012314114002510906,0.01738660002592951,N/A
p3_find_n_smallest_number,prompt_5,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for value, index in min_heap]\n    return sorted(indices)']",10000,0.11462349991779774,0.11971159699489363,0.1388703000266105,N/A
p3_find_n_smallest_number,prompt_5,77,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for value, index in min_heap]\n    return sorted(indices)']",100000,1.165216900059022,1.2002996620105113,1.4746703000273556,N/A
p3_find_n_smallest_number,prompt_5,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -max_heap[0][0] > value:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-value, index))\n    result = [index for _, index in max_heap]\n    return sorted(result)']",1000,0.004180500051006675,0.0046107219974510375,0.006644999957643449,N/A
p3_find_n_smallest_number,prompt_5,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -max_heap[0][0] > value:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-value, index))\n    result = [index for _, index in max_heap]\n    return sorted(result)']",10000,0.040027699898928404,0.04317978799692355,0.07568190002348274,N/A
p3_find_n_smallest_number,prompt_5,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -max_heap[0][0] > value:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-value, index))\n    result = [index for _, index in max_heap]\n    return sorted(result)']",100000,0.4018446000991389,0.41227954999892974,0.4332291000755504,N/A
p3_find_n_smallest_number,prompt_5,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result_indices']",1000,0.005088799982331693,0.005411159000359476,0.006584399961866438,N/A
p3_find_n_smallest_number,prompt_5,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result_indices']",10000,0.06496500002685934,0.06739847000339068,0.07682189997285604,N/A
p3_find_n_smallest_number,prompt_5,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    result_indices = [heapq.heappop(heap)[1] for _ in range(arg2)]\n    return result_indices']",100000,0.7708972000982612,0.7910943459975533,0.8267205000156537,N/A
p3_find_n_smallest_number,prompt_5,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    result = [index for value, index in heap]\n    return result']",1000,0.006866200012154877,0.007293363997014239,0.020906099933199584,N/A
p3_find_n_smallest_number,prompt_5,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    result = [index for value, index in heap]\n    return result']",10000,0.06521579995751381,0.06834985500434414,0.07527130004018545,N/A
p3_find_n_smallest_number,prompt_5,80,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    result = [index for value, index in heap]\n    return result']",100000,0.6647342999931425,0.681845423997147,0.752120100078173,N/A
p3_find_n_smallest_number,prompt_5,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_elements]\n    return k_smallest_indexes']",1000,0.006245299940928817,0.006753629999002442,0.010235500056296587,N/A
p3_find_n_smallest_number,prompt_5,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_elements]\n    return k_smallest_indexes']",10000,0.06418430001940578,0.06732362199691125,0.079643499921076,N/A
p3_find_n_smallest_number,prompt_5,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    k_smallest_elements = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [idx for _, idx in k_smallest_elements]\n    return k_smallest_indexes']",100000,0.7803964000195265,0.8038344210025389,0.9311159999342635,N/A
p3_find_n_smallest_number,prompt_5,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k = min(len(arg1), arg2)\n    heap = [(-arg1[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [item[1] for item in heap]\n    return sorted(indexes)']",1000,0.003107300028204918,0.003365046001272276,0.0041053000604733825,N/A
p3_find_n_smallest_number,prompt_5,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k = min(len(arg1), arg2)\n    heap = [(-arg1[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [item[1] for item in heap]\n    return sorted(indexes)']",10000,0.02823809999972582,0.030116475996328516,0.036059799953363836,N/A
p3_find_n_smallest_number,prompt_5,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k = min(len(arg1), arg2)\n    heap = [(-arg1[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    indexes = [item[1] for item in heap]\n    return sorted(indexes)']",100000,0.290008999989368,0.2996256809984334,0.3142376000760123,N/A
p3_find_n_smallest_number,prompt_5,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    nums = arg1\n    k = arg2\n    if k <= 0 or k > len(nums):\n        return []\n    indexed_nums = [(num, idx) for idx, num in enumerate(nums)]\n    heapq.heapify(indexed_nums)\n    k_smallest = heapq.nsmallest(k, indexed_nums)\n    indexes = [idx for _, idx in k_smallest]\n    return sorted(indexes)']",1000,0.007214199984446168,0.0077093459945172076,0.012348000076599419,N/A
p3_find_n_smallest_number,prompt_5,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    nums = arg1\n    k = arg2\n    if k <= 0 or k > len(nums):\n        return []\n    indexed_nums = [(num, idx) for idx, num in enumerate(nums)]\n    heapq.heapify(indexed_nums)\n    k_smallest = heapq.nsmallest(k, indexed_nums)\n    indexes = [idx for _, idx in k_smallest]\n    return sorted(indexes)']",10000,0.08747439994476736,0.08921556499670259,0.09241379995364696,N/A
p3_find_n_smallest_number,prompt_5,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    nums = arg1\n    k = arg2\n    if k <= 0 or k > len(nums):\n        return []\n    indexed_nums = [(num, idx) for idx, num in enumerate(nums)]\n    heapq.heapify(indexed_nums)\n    k_smallest = heapq.nsmallest(k, indexed_nums)\n    indexes = [idx for _, idx in k_smallest]\n    return sorted(indexes)']",100000,1.0297281000530347,1.0476888029975817,1.1046853999141604,N/A
p3_find_n_smallest_number,prompt_5,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0 or not arg1:\n        return []\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_elements]\n    return smallest_indexes']",1000,0.004621800035238266,0.004800022997660563,0.005382699891924858,N/A
p3_find_n_smallest_number,prompt_5,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0 or not arg1:\n        return []\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_elements]\n    return smallest_indexes']",10000,0.04195780004374683,0.0444167219940573,0.051640599966049194,N/A
p3_find_n_smallest_number,prompt_5,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k == 0 or not arg1:\n        return []\n    smallest_elements = heapq.nsmallest(k, enumerate(arg1), key=lambda x: x[1])\n    smallest_indexes = [index for index, value in smallest_elements]\n    return smallest_indexes']",100000,0.4443755999673158,0.4554630779987201,0.6068797000916675,N/A
p3_find_n_smallest_number,prompt_5,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [pair[1] for pair in k_smallest_pairs]\n    return result_indexes']",1000,0.006522599956952035,0.006807213993743062,0.007558500044979155,N/A
p3_find_n_smallest_number,prompt_5,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [pair[1] for pair in k_smallest_pairs]\n    return result_indexes']",10000,0.06512899999506772,0.06773262000409887,0.08685789990704507,N/A
p3_find_n_smallest_number,prompt_5,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    result_indexes = [pair[1] for pair in k_smallest_pairs]\n    return result_indexes']",100000,0.7649588000494987,0.8029740409983788,0.8877029999857768,N/A
p3_find_n_smallest_number,prompt_5,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest_elements = heapq.nsmallest(arg2, heap)\n    indices = [item[1] for item in k_smallest_elements]\n    return indices']",1000,0.009430899983271956,0.009976310994243249,0.01078139990568161,N/A
p3_find_n_smallest_number,prompt_5,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest_elements = heapq.nsmallest(arg2, heap)\n    indices = [item[1] for item in k_smallest_elements]\n    return indices']",10000,0.10589749994687736,0.11046624900656753,0.1221667000791058,N/A
p3_find_n_smallest_number,prompt_5,86,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    k_smallest_elements = heapq.nsmallest(arg2, heap)\n    indices = [item[1] for item in k_smallest_elements]\n    return indices']",100000,1.2739925000350922,1.2998167860042305,1.3801730000413954,N/A
p3_find_n_smallest_number,prompt_5,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_values = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_values)\n    k_smallest_indices = [heapq.heappop(indexed_values)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.005042299977503717,0.005493118989979848,0.007166299968957901,N/A
p3_find_n_smallest_number,prompt_5,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_values = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_values)\n    k_smallest_indices = [heapq.heappop(indexed_values)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.0639645999763161,0.06606314799631946,0.07019940007012337,N/A
p3_find_n_smallest_number,prompt_5,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_values = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_values)\n    k_smallest_indices = [heapq.heappop(indexed_values)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.7669558000052348,0.7823623529972974,0.8643516000593081,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indexes = [index for value, index in min_heap]\n    indexes.sort()\n    return indexes']",1000,0.01186159998178482,0.012342266003834083,0.016053800005465746,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indexes = [index for value, index in min_heap]\n    indexes.sort()\n    return indexes']",10000,0.11743330000899732,0.12100629300926811,0.13340619998052716,N/A
p3_find_n_smallest_number,prompt_5,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indexes = [index for value, index in min_heap]\n    indexes.sort()\n    return indexes']",100000,1.1734780999831855,1.2085227910079994,1.4426169000798836,N/A
p3_find_n_smallest_number,prompt_5,89,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg2, int) or arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indexes""]",1000,0.00510989991016686,0.00575242199585773,0.02149379998445511,N/A
p3_find_n_smallest_number,prompt_5,89,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg2, int) or arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indexes""]",10000,0.05194510007277131,0.054564995003165674,0.06562780006788671,N/A
p3_find_n_smallest_number,prompt_5,89,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg2, int) or arg2 < 0 or arg2 > len(arg1):\n        raise ValueError('Invalid value for k')\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, indexed_array)\n    k_smallest_indexes = [idx for val, idx in k_smallest_pairs]\n    return k_smallest_indexes""]",100000,0.6745164999738336,0.6976272060035262,0.7300063000293449,N/A
p3_find_n_smallest_number,prompt_5,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (-value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for _, index in min_heap]\n    return indices']",1000,0.012439899961464107,0.013107001001480966,0.016105800052173436,N/A
p3_find_n_smallest_number,prompt_5,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (-value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for _, index in min_heap]\n    return indices']",10000,0.1243920000270009,0.12880399499787018,0.19959769991692156,N/A
p3_find_n_smallest_number,prompt_5,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (-value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [index for _, index in min_heap]\n    return indices']",100000,1.2589199000503868,1.2856342150003184,1.4206321000820026,N/A
p3_find_n_smallest_number,prompt_5,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",1000,0.005209399969317019,0.005735799005487934,0.0144884999608621,N/A
p3_find_n_smallest_number,prompt_5,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",10000,0.0660937000066042,0.06867729199468159,0.07604439998976886,N/A
p3_find_n_smallest_number,prompt_5,91,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(heap)\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",100000,0.7973816000157967,0.8164960779971443,0.8890130999498069,N/A
p3_find_n_smallest_number,prompt_5,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or not arg1:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted([idx for _, idx in heap])']",1000,0.012432000017724931,0.013091478003188968,0.015607499983161688,N/A
p3_find_n_smallest_number,prompt_5,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or not arg1:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted([idx for _, idx in heap])']",10000,0.12411849992349744,0.12829693400184625,0.136181200039573,N/A
p3_find_n_smallest_number,prompt_5,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or not arg1:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (-num, idx))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return sorted([idx for _, idx in heap])']",100000,1.2520280999597162,1.2737238200043794,1.3427859999937937,N/A
p3_find_n_smallest_number,prompt_5,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in k_smallest]\n    return smallest_indexes']",1000,0.006377100013196468,0.0067227389966137705,0.009140999987721443,N/A
p3_find_n_smallest_number,prompt_5,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in k_smallest]\n    return smallest_indexes']",10000,0.06540810002479702,0.06811138899647631,0.08820550004020333,N/A
p3_find_n_smallest_number,prompt_5,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    smallest_indexes = [index for value, index in k_smallest]\n    return smallest_indexes']",100000,0.7811773000285029,0.8089905510039535,0.9280159999616444,N/A
p3_find_n_smallest_number,prompt_5,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -value > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-value, index))\n    result_indexes = [index for _, index in max_heap]\n    return result_indexes']",1000,0.0044392000418156385,0.004698829991975799,0.00628349999897182,N/A
p3_find_n_smallest_number,prompt_5,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -value > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-value, index))\n    result_indexes = [index for _, index in max_heap]\n    return result_indexes']",10000,0.04334870004095137,0.0454265329928603,0.06312830001115799,N/A
p3_find_n_smallest_number,prompt_5,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    max_heap = []\n    for index, value in enumerate(arg1):\n        if len(max_heap) < arg2:\n            heapq.heappush(max_heap, (-value, index))\n        elif -value > max_heap[0][0]:\n            heapq.heappushpop(max_heap, (-value, index))\n    result_indexes = [index for _, index in max_heap]\n    return result_indexes']",100000,0.43896389997098595,0.448108785005752,0.4921288000186905,N/A
p3_find_n_smallest_number,prompt_5,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    array = arg1\n    k = arg2\n    if k == 0 or not array:\n        return []\n    heap = []\n    for i in range(len(array)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-array[i], i))\n        elif -heap[0][0] > array[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-array[i], i))\n    indexes = [index for value, index in heap]\n    return indexes']",1000,0.003807600005529821,0.004002838000888005,0.00458679988514632,N/A
p3_find_n_smallest_number,prompt_5,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    array = arg1\n    k = arg2\n    if k == 0 or not array:\n        return []\n    heap = []\n    for i in range(len(array)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-array[i], i))\n        elif -heap[0][0] > array[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-array[i], i))\n    indexes = [index for value, index in heap]\n    return indexes']",10000,0.03472860006149858,0.037133608991280195,0.052304200013168156,N/A
p3_find_n_smallest_number,prompt_5,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    array = arg1\n    k = arg2\n    if k == 0 or not array:\n        return []\n    heap = []\n    for i in range(len(array)):\n        if len(heap) < k:\n            heapq.heappush(heap, (-array[i], i))\n        elif -heap[0][0] > array[i]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-array[i], i))\n    indexes = [index for value, index in heap]\n    return indexes']",100000,0.3587756999768317,0.36687068700557574,0.38227169995661825,N/A
p3_find_n_smallest_number,prompt_5,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, paired_list, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest_pairs]\n    return k_smallest_indices']",1000,0.006499500013887882,0.006847653002478182,0.010941699962131679,N/A
p3_find_n_smallest_number,prompt_5,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, paired_list, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest_pairs]\n    return k_smallest_indices']",10000,0.06536300003062934,0.06808399699977599,0.09717069996986538,N/A
p3_find_n_smallest_number,prompt_5,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    paired_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest_pairs = heapq.nsmallest(arg2, paired_list, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest_pairs]\n    return k_smallest_indices']",100000,0.7859360999427736,0.809341416999232,0.8886815999867395,N/A
p3_find_n_smallest_number,prompt_5,97,"['import heapq\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    middle = [x for x in arr if x == pivot]\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_th_smallest = quickselect(arg1, arg2 - 1)\n    result = []\n    count = 0\n    for index, value in enumerate(arg1):\n        if value < k_th_smallest:\n            result.append(index)\n            count += 1\n        elif value == k_th_smallest and count < arg2:\n            result.append(index)\n            count += 1\n        if count == arg2:\n            break\n    return result']",1000,0.013699800008907914,0.014900365000357851,0.02452800003811717,N/A
p3_find_n_smallest_number,prompt_5,97,"['import heapq\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    middle = [x for x in arr if x == pivot]\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_th_smallest = quickselect(arg1, arg2 - 1)\n    result = []\n    count = 0\n    for index, value in enumerate(arg1):\n        if value < k_th_smallest:\n            result.append(index)\n            count += 1\n        elif value == k_th_smallest and count < arg2:\n            result.append(index)\n            count += 1\n        if count == arg2:\n            break\n    return result']",10000,0.13936540007125586,0.14561888800002634,0.1715981001034379,N/A
p3_find_n_smallest_number,prompt_5,97,"['import heapq\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    right = [x for x in arr if x > pivot]\n    middle = [x for x in arr if x == pivot]\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return pivot\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    k_th_smallest = quickselect(arg1, arg2 - 1)\n    result = []\n    count = 0\n    for index, value in enumerate(arg1):\n        if value < k_th_smallest:\n            result.append(index)\n            count += 1\n        elif value == k_th_smallest and count < arg2:\n            result.append(index)\n            count += 1\n        if count == arg2:\n            break\n    return result']",100000,1.0464732999680564,1.0658896250056569,1.11118190002162,N/A
p3_find_n_smallest_number,prompt_5,98,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(x, int) for x in arg1)):\n        raise ValueError('First argument must be a list of integers')\n    if not isinstance(arg2, int) or arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Second argument must be a positive integer less than or equal to the length of the list')\n    k = arg2\n    k_smallest = heapq.nsmallest(k, arg1)\n    indexes = []\n    for idx, num in enumerate(arg1):\n        if num in k_smallest:\n            indexes.append(idx)\n            k_smallest.remove(num)\n            if len(indexes) == k:\n                break\n    return indexes""]",1000,0.006016399944201112,0.0063473459973465655,0.008580199908465147,N/A
p3_find_n_smallest_number,prompt_5,98,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(x, int) for x in arg1)):\n        raise ValueError('First argument must be a list of integers')\n    if not isinstance(arg2, int) or arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Second argument must be a positive integer less than or equal to the length of the list')\n    k = arg2\n    k_smallest = heapq.nsmallest(k, arg1)\n    indexes = []\n    for idx, num in enumerate(arg1):\n        if num in k_smallest:\n            indexes.append(idx)\n            k_smallest.remove(num)\n            if len(indexes) == k:\n                break\n    return indexes""]",10000,0.05764209991320968,0.05907468699850142,0.06765360001008958,N/A
p3_find_n_smallest_number,prompt_5,98,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not isinstance(arg1, list) or not all((isinstance(x, int) for x in arg1)):\n        raise ValueError('First argument must be a list of integers')\n    if not isinstance(arg2, int) or arg2 <= 0 or arg2 > len(arg1):\n        raise ValueError('Second argument must be a positive integer less than or equal to the length of the list')\n    k = arg2\n    k_smallest = heapq.nsmallest(k, arg1)\n    indexes = []\n    for idx, num in enumerate(arg1):\n        if num in k_smallest:\n            indexes.append(idx)\n            k_smallest.remove(num)\n            if len(indexes) == k:\n                break\n    return indexes""]",100000,0.524527799920179,0.5373496939917095,0.5821618000045419,N/A
p3_find_n_smallest_number,prompt_5,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    max_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(max_heap, (-value, idx))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    smallest_indexes = [idx for _, idx in max_heap]\n    return smallest_indexes']",1000,0.01236679998692125,0.013043196008075028,0.01629749999847263,N/A
p3_find_n_smallest_number,prompt_5,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    max_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(max_heap, (-value, idx))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    smallest_indexes = [idx for _, idx in max_heap]\n    return smallest_indexes']",10000,0.1244285999564454,0.12828178399708123,0.1514079999178648,N/A
p3_find_n_smallest_number,prompt_5,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    max_heap = []\n    for idx, value in enumerate(arg1):\n        heapq.heappush(max_heap, (-value, idx))\n        if len(max_heap) > arg2:\n            heapq.heappop(max_heap)\n    smallest_indexes = [idx for _, idx in max_heap]\n    return smallest_indexes']",100000,1.2610114000272006,1.2759311279968824,1.302832099958323,N/A
p3_find_n_smallest_number,prompt_5,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-value, idx))\n        elif -value > min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-value, idx))\n    result = [index for value, index in min_heap]\n    return result']",1000,0.004396700067445636,0.004748386002611369,0.007819600054062903,N/A
p3_find_n_smallest_number,prompt_5,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-value, idx))\n        elif -value > min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-value, idx))\n    result = [index for value, index in min_heap]\n    return result']",10000,0.04213109996635467,0.04445789399323985,0.058780199964530766,N/A
p3_find_n_smallest_number,prompt_5,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for idx, value in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-value, idx))\n        elif -value > min_heap[0][0]:\n            heapq.heapreplace(min_heap, (-value, idx))\n    result = [index for value, index in min_heap]\n    return result']",100000,0.4346588000189513,0.4436862950026989,0.5055222000228241,N/A
p3_find_n_smallest_number,prompt_6,1,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indices[:arg2]']",1000,0.007441699970513582,0.007897538010729477,0.012751900008879602,N/A
p3_find_n_smallest_number,prompt_6,1,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indices[:arg2]']",10000,0.11070830002427101,0.11637869900441729,0.151792399934493,N/A
p3_find_n_smallest_number,prompt_6,1,"['def funcImp(arg1, arg2):\n    sorted_indices = sorted(range(len(arg1)), key=lambda x: arg1[x])\n    return sorted_indices[:arg2]']",100000,1.6043640000279993,1.6323854270065203,1.7106287000933662,N/A
p3_find_n_smallest_number,prompt_6,2,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Array length is less than k.'\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif -num > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    min_indexes = [index for _, index in min_heap]\n    return min_indexes""]",1000,0.0044652000069618225,0.004885546995792538,0.008910099975764751,N/A
p3_find_n_smallest_number,prompt_6,2,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Array length is less than k.'\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif -num > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    min_indexes = [index for _, index in min_heap]\n    return min_indexes""]",10000,0.042612100020051,0.04483410199871287,0.05495579994749278,N/A
p3_find_n_smallest_number,prompt_6,2,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'Array length is less than k.'\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (-num, index))\n        elif -num > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    min_indexes = [index for _, index in min_heap]\n    return min_indexes""]",100000,0.4325867999577895,0.4425455590034835,0.46335740003269166,N/A
p3_find_n_smallest_number,prompt_6,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = arg2\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-num, index))\n        elif -num > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    result = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    result.sort()\n    return result']",1000,0.004673099960200489,0.004861848998116329,0.005370899918489158,N/A
p3_find_n_smallest_number,prompt_6,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = arg2\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-num, index))\n        elif -num > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    result = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    result.sort()\n    return result']",10000,0.04350729996804148,0.04565796200302429,0.054574200068600476,N/A
p3_find_n_smallest_number,prompt_6,3,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = arg2\n    min_heap = []\n    for index, num in enumerate(arg1):\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, (-num, index))\n        elif -num > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-num, index))\n    result = [heapq.heappop(min_heap)[1] for _ in range(len(min_heap))]\n    result.sort()\n    return result']",100000,0.44224230002146214,0.4517028050019871,0.4779817999806255,N/A
p3_find_n_smallest_number,prompt_6,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",1000,0.0022773999953642488,0.0025336710014380514,0.0041247999761253595,N/A
p3_find_n_smallest_number,prompt_6,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",10000,0.022193299955688417,0.02365575299365446,0.028262500069104135,N/A
p3_find_n_smallest_number,prompt_6,4,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",100000,0.23196969996206462,0.2389311379927676,0.25926159997470677,N/A
p3_find_n_smallest_number,prompt_6,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    k_smallest_indices = [idx for _, idx in heap]\n    k_smallest_indices.sort()\n    return k_smallest_indices']",1000,0.002726099919527769,0.0029417930042836813,0.003858099924400449,N/A
p3_find_n_smallest_number,prompt_6,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    k_smallest_indices = [idx for _, idx in heap]\n    k_smallest_indices.sort()\n    return k_smallest_indices']",10000,0.026259100064635277,0.02721420400077477,0.02985869999974966,N/A
p3_find_n_smallest_number,prompt_6,5,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -heap[0][0]:\n            heapq.heapreplace(heap, (-arg1[idx], idx))\n    k_smallest_indices = [idx for _, idx in heap]\n    k_smallest_indices.sort()\n    return k_smallest_indices']",100000,0.2570743999676779,0.2673725510016084,0.2927784000057727,N/A
p3_find_n_smallest_number,prompt_6,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    if arg2 == 0:\n        return []\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",1000,0.0027561000315472484,0.0029981949995271863,0.0032950000604614615,N/A
p3_find_n_smallest_number,prompt_6,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    if arg2 == 0:\n        return []\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",10000,0.02580960001796484,0.027074476004345344,0.032481999951414764,N/A
p3_find_n_smallest_number,prompt_6,6,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    if arg2 == 0:\n        return []\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    return [index for _, index in max_heap]']",100000,0.26080970000475645,0.268253979991423,0.28948949999175966,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    result = [index for _, index in min_heap]\n    result.sort()\n    return result']",1000,0.01160099997650832,0.012369071998400614,0.017271600081585348,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    result = [index for _, index in min_heap]\n    result.sort()\n    return result']",10000,0.114820999908261,0.12067761799902656,0.15194629994221032,N/A
p3_find_n_smallest_number,prompt_6,7,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    result = [index for _, index in min_heap]\n    result.sort()\n    return result']",100000,1.168070700019598,1.200593898006482,1.34478369995486,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, index))\n        elif -num > heap[0][0]:\n            heapq.heapreplace(heap, (-num, index))\n    indices = [index for _, index in heap]\n    return indices']",1000,0.004474499961361289,0.00544392600771971,0.016799399978481233,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, index))\n        elif -num > heap[0][0]:\n            heapq.heapreplace(heap, (-num, index))\n    indices = [index for _, index in heap]\n    return indices']",10000,0.043598199961706996,0.04549966899794526,0.07065090001560748,N/A
p3_find_n_smallest_number,prompt_6,8,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for index, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, index))\n        elif -num > heap[0][0]:\n            heapq.heapreplace(heap, (-num, index))\n    indices = [index for _, index in heap]\n    return indices']",100000,0.4345469999825582,0.44684155100141654,0.5835365999955684,N/A
p3_find_n_smallest_number,prompt_6,9,"['arg1 = [5, 3, 1, 9, 6, 2]\narg2 = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,9,"['arg1 = [5, 3, 1, 9, 6, 2]\narg2 = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,9,"['arg1 = [5, 3, 1, 9, 6, 2]\narg2 = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,10,"['import random\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[:k]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(arr, low, high, pivot_index)\n    if k == pivot_index:\n        return arr[:k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef partition(arr, low, high, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[high] = (arr[high], arr[pivot_index])\n    store_index = low\n    for i in range(low, high):\n        if arr[i] < pivot_value:\n            arr[store_index], arr[i] = (arr[i], arr[store_index])\n            store_index += 1\n    arr[store_index], arr[high] = (arr[high], arr[store_index])\n    return store_index\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    arr = arg1[:]\n    k = arg2\n    smallest_elements = quickselect(arr, 0, len(arr) - 1, k)\n    result_indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        result_indexes.append(index)\n    return result_indexes']",1000,0.007240999955683947,0.008259638998424634,0.011678699986077845,N/A
p3_find_n_smallest_number,prompt_6,10,"['import random\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[:k]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(arr, low, high, pivot_index)\n    if k == pivot_index:\n        return arr[:k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef partition(arr, low, high, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[high] = (arr[high], arr[pivot_index])\n    store_index = low\n    for i in range(low, high):\n        if arr[i] < pivot_value:\n            arr[store_index], arr[i] = (arr[i], arr[store_index])\n            store_index += 1\n    arr[store_index], arr[high] = (arr[high], arr[store_index])\n    return store_index\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    arr = arg1[:]\n    k = arg2\n    smallest_elements = quickselect(arr, 0, len(arr) - 1, k)\n    result_indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        result_indexes.append(index)\n    return result_indexes']",10000,0.06877679994795471,0.0773203259985894,0.09045600006356835,N/A
p3_find_n_smallest_number,prompt_6,10,"['import random\n\ndef quickselect(arr, low, high, k):\n    if low == high:\n        return arr[:k]\n    pivot_index = random.randint(low, high)\n    pivot_index = partition(arr, low, high, pivot_index)\n    if k == pivot_index:\n        return arr[:k]\n    elif k < pivot_index:\n        return quickselect(arr, low, pivot_index - 1, k)\n    else:\n        return quickselect(arr, pivot_index + 1, high, k)\n\ndef partition(arr, low, high, pivot_index):\n    pivot_value = arr[pivot_index]\n    arr[pivot_index], arr[high] = (arr[high], arr[pivot_index])\n    store_index = low\n    for i in range(low, high):\n        if arr[i] < pivot_value:\n            arr[store_index], arr[i] = (arr[i], arr[store_index])\n            store_index += 1\n    arr[store_index], arr[high] = (arr[high], arr[store_index])\n    return store_index\n\ndef funcImp(arg1, arg2):\n    if arg1 is None or len(arg1) == 0 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    arr = arg1[:]\n    k = arg2\n    smallest_elements = quickselect(arr, 0, len(arr) - 1, k)\n    result_indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        result_indexes.append(index)\n    return result_indexes']",100000,0.6944694999838248,0.7959297430072911,0.9575249999761581,N/A
p3_find_n_smallest_number,prompt_6,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if not arg1:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, idx))\n        elif -heap[0][0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, idx))\n    result = [idx for _, idx in heap]\n    return result']",1000,0.004240200039930642,0.004484111001947895,0.006789200007915497,N/A
p3_find_n_smallest_number,prompt_6,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if not arg1:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, idx))\n        elif -heap[0][0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, idx))\n    result = [idx for _, idx in heap]\n    return result']",10000,0.04073520004749298,0.0422883610019926,0.05463380005676299,N/A
p3_find_n_smallest_number,prompt_6,11,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if not arg1:\n        return []\n    heap = []\n    for idx, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, idx))\n        elif -heap[0][0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, idx))\n    result = [idx for _, idx in heap]\n    return result']",100000,0.40254519996233284,0.4124465689994395,0.4416254000971094,N/A
p3_find_n_smallest_number,prompt_6,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[idx], idx))\n    k_smallest_indices = [idx for val, idx in min_heap]\n    return k_smallest_indices']",1000,0.0023111000191420317,0.0026466870005242525,0.004333000048063695,N/A
p3_find_n_smallest_number,prompt_6,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[idx], idx))\n    k_smallest_indices = [idx for val, idx in min_heap]\n    return k_smallest_indices']",10000,0.02339180000126362,0.024856722007971257,0.03461780003271997,N/A
p3_find_n_smallest_number,prompt_6,12,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[idx], idx))\n    k_smallest_indices = [idx for val, idx in min_heap]\n    return k_smallest_indices']",100000,0.27923420001752675,0.2888743400014937,0.3034913999726996,N/A
p3_find_n_smallest_number,prompt_6,13,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'k is larger than the array size'\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif value < -heap[0][0]:\n            heapq.heappushpop(heap, (-value, index))\n    result = sorted([idx for _, idx in heap])\n    return result""]",1000,0.004015799961052835,0.004276180004235357,0.005044399993494153,N/A
p3_find_n_smallest_number,prompt_6,13,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'k is larger than the array size'\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif value < -heap[0][0]:\n            heapq.heappushpop(heap, (-value, index))\n    result = sorted([idx for _, idx in heap])\n    return result""]",10000,0.03885240003000945,0.041490567998262125,0.06448509998153895,N/A
p3_find_n_smallest_number,prompt_6,13,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2:\n        return 'k is larger than the array size'\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif value < -heap[0][0]:\n            heapq.heappushpop(heap, (-value, index))\n    result = sorted([idx for _, idx in heap])\n    return result""]",100000,0.3936684000073001,0.4053162700065877,0.43784079991746694,N/A
p3_find_n_smallest_number,prompt_6,14,"[""def funcImp(arg1, arg2):\n\n    def quickselect(arr, low, high, k):\n        if low == high:\n            return arr[low]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quickselect(arr, low, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, high, k)\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n    n = len(arg1)\n    k = arg2\n    if k <= 0 or k > n:\n        raise ValueError('k must be greater than 0 and less than or equal to the length of the array')\n    kth_smallest = quickselect(arg1[:], 0, n - 1, k - 1)\n    result_indices = []\n    for idx, val in enumerate(arg1):\n        if val <= kth_smallest:\n            result_indices.append(idx)\n            if len(result_indices) == k:\n                break\n    return result_indices\narray = [7, 10, 4, 3, 20, 15]\nk = 3\nindexes = funcImp(array, k)\npass""]",1000,0.008118600002489984,0.009148183998186142,0.03471359994728118,N/A
p3_find_n_smallest_number,prompt_6,14,"[""def funcImp(arg1, arg2):\n\n    def quickselect(arr, low, high, k):\n        if low == high:\n            return arr[low]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quickselect(arr, low, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, high, k)\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n    n = len(arg1)\n    k = arg2\n    if k <= 0 or k > n:\n        raise ValueError('k must be greater than 0 and less than or equal to the length of the array')\n    kth_smallest = quickselect(arg1[:], 0, n - 1, k - 1)\n    result_indices = []\n    for idx, val in enumerate(arg1):\n        if val <= kth_smallest:\n            result_indices.append(idx)\n            if len(result_indices) == k:\n                break\n    return result_indices\narray = [7, 10, 4, 3, 20, 15]\nk = 3\nindexes = funcImp(array, k)\npass""]",10000,0.052867499995045364,0.05553311600466259,0.06866730004549026,N/A
p3_find_n_smallest_number,prompt_6,14,"[""def funcImp(arg1, arg2):\n\n    def quickselect(arr, low, high, k):\n        if low == high:\n            return arr[low]\n        pivot_index = partition(arr, low, high)\n        if k == pivot_index:\n            return arr[k]\n        elif k < pivot_index:\n            return quickselect(arr, low, pivot_index - 1, k)\n        else:\n            return quickselect(arr, pivot_index + 1, high, k)\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] <= pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n    n = len(arg1)\n    k = arg2\n    if k <= 0 or k > n:\n        raise ValueError('k must be greater than 0 and less than or equal to the length of the array')\n    kth_smallest = quickselect(arg1[:], 0, n - 1, k - 1)\n    result_indices = []\n    for idx, val in enumerate(arg1):\n        if val <= kth_smallest:\n            result_indices.append(idx)\n            if len(result_indices) == k:\n                break\n    return result_indices\narray = [7, 10, 4, 3, 20, 15]\nk = 3\nindexes = funcImp(array, k)\npass""]",100000,0.7686881999252364,0.7820463770010975,0.8918419000692666,N/A
p3_find_n_smallest_number,prompt_6,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [idx for _, idx in heapq.nsmallest(arg2, heap)]\n    return result']",1000,0.01163970003835857,0.012418702993309126,0.016236199997365475,N/A
p3_find_n_smallest_number,prompt_6,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [idx for _, idx in heapq.nsmallest(arg2, heap)]\n    return result']",10000,0.11771739996038377,0.1233544739941135,0.17094119999092072,N/A
p3_find_n_smallest_number,prompt_6,15,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    result = [idx for _, idx in heapq.nsmallest(arg2, heap)]\n    return result']",100000,1.1892083999700844,1.2092339459992945,1.279417400015518,N/A
p3_find_n_smallest_number,prompt_6,16,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    if not arg1:\n        return []\n    index_array = [(elem, idx) for idx, elem in enumerate(arg1)]\n    heap = index_array[:arg2]\n    heapq.heapify(heap)\n    for elem in index_array[arg2:]:\n        if elem[0] < heap[0][0]:\n            heapq.heappushpop(heap, elem)\n    result = [elem[1] for elem in heapq.nsmallest(arg2, heap)]\n    return result""]",1000,0.0052538999589160085,0.005502620990155265,0.007114000036381185,N/A
p3_find_n_smallest_number,prompt_6,16,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    if not arg1:\n        return []\n    index_array = [(elem, idx) for idx, elem in enumerate(arg1)]\n    heap = index_array[:arg2]\n    heapq.heapify(heap)\n    for elem in index_array[arg2:]:\n        if elem[0] < heap[0][0]:\n            heapq.heappushpop(heap, elem)\n    result = [elem[1] for elem in heapq.nsmallest(arg2, heap)]\n    return result""]",10000,0.05734679999295622,0.05955129500012845,0.066080900025554,N/A
p3_find_n_smallest_number,prompt_6,16,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array')\n    if not arg1:\n        return []\n    index_array = [(elem, idx) for idx, elem in enumerate(arg1)]\n    heap = index_array[:arg2]\n    heapq.heapify(heap)\n    for elem in index_array[arg2:]:\n        if elem[0] < heap[0][0]:\n            heapq.heappushpop(heap, elem)\n    result = [elem[1] for elem in heapq.nsmallest(arg2, heap)]\n    return result""]",100000,0.7840659000212327,0.8035093459975906,0.8486485999310389,N/A
p3_find_n_smallest_number,prompt_6,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = [idx for val, idx in min_heap]\n    return result']",1000,0.0021985999774187803,0.0024798460002057256,0.005267399945296347,N/A
p3_find_n_smallest_number,prompt_6,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = [idx for val, idx in min_heap]\n    return result']",10000,0.022409799974411726,0.023763087999541313,0.029869999969378114,N/A
p3_find_n_smallest_number,prompt_6,17,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = [idx for val, idx in min_heap]\n    return result']",100000,0.2303099000127986,0.2399024159950204,0.27756080008111894,N/A
p3_find_n_smallest_number,prompt_6,18,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the array size')\n    if not arg1:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (arg1[i], i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indexes = [index for _, index in min_heap]\n    return indexes""]",1000,0.011038500000722706,0.011817977003520354,0.017841199995018542,N/A
p3_find_n_smallest_number,prompt_6,18,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the array size')\n    if not arg1:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (arg1[i], i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indexes = [index for _, index in min_heap]\n    return indexes""]",10000,0.11103649996221066,0.11761822200729512,0.23179719992913306,N/A
p3_find_n_smallest_number,prompt_6,18,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be larger than the array size')\n    if not arg1:\n        return []\n    min_heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(min_heap, (arg1[i], i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indexes = [index for _, index in min_heap]\n    return indexes""]",100000,1.122360899928026,1.1413088759954553,1.1785486999433488,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = arg1[:k]\n    heapq.heapify(min_heap)\n    for number in arg1[k:]:\n        heapq.heappushpop(min_heap, number)\n    indices = []\n    for value in min_heap:\n        index = arg1.index(value)\n        while index in indices:\n            index = arg1.index(value, index + 1)\n        indices.append(index)\n    return indices']",1000,0.003715400001965463,0.003984552001347765,0.004822000046260655,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = arg1[:k]\n    heapq.heapify(min_heap)\n    for number in arg1[k:]:\n        heapq.heappushpop(min_heap, number)\n    indices = []\n    for value in min_heap:\n        index = arg1.index(value)\n        while index in indices:\n            index = arg1.index(value, index + 1)\n        indices.append(index)\n    return indices']",10000,0.03296420001424849,0.034863777003483844,0.047388600069098175,N/A
p3_find_n_smallest_number,prompt_6,19,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = arg1[:k]\n    heapq.heapify(min_heap)\n    for number in arg1[k:]:\n        heapq.heappushpop(min_heap, number)\n    indices = []\n    for value in min_heap:\n        index = arg1.index(value)\n        while index in indices:\n            index = arg1.index(value, index + 1)\n        indices.append(index)\n    return indices']",100000,0.3510470000328496,0.365451035000151,0.39103160006925464,N/A
p3_find_n_smallest_number,prompt_6,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for idx, val in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (val, idx))\n        else:\n            heapq.heappushpop(heap, (val, idx))\n    return [idx for val, idx in heap]']",1000,0.006042400025762618,0.006276939994422719,0.008954899967648089,N/A
p3_find_n_smallest_number,prompt_6,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for idx, val in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (val, idx))\n        else:\n            heapq.heappushpop(heap, (val, idx))\n    return [idx for val, idx in heap]']",10000,0.0578088000183925,0.060596716998843475,0.1250620000064373,N/A
p3_find_n_smallest_number,prompt_6,20,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    heap = []\n    for idx, val in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (val, idx))\n        else:\n            heapq.heappushpop(heap, (val, idx))\n    return [idx for val, idx in heap]']",100000,0.5833591000409797,0.5946132769982796,0.6734270000597462,N/A
p3_find_n_smallest_number,prompt_6,21,"['arg1 = [10, 3, 5, 6, 2]\narg2 = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,21,"['arg1 = [10, 3, 5, 6, 2]\narg2 = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,21,"['arg1 = [10, 3, 5, 6, 2]\narg2 = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = [index for value, index in min_heap]\n    return result']",1000,0.002244999981485307,0.0024497159966267645,0.004175000009126961,N/A
p3_find_n_smallest_number,prompt_6,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = [index for value, index in min_heap]\n    return result']",10000,0.022478200029581785,0.023587530001532287,0.03823279996868223,N/A
p3_find_n_smallest_number,prompt_6,22,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    n = len(arg1)\n    if arg2 >= n:\n        return list(range(n))\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, n):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    result = [index for value, index in min_heap]\n    return result']",100000,0.2277081001084298,0.2334539690008387,0.24605640000663698,N/A
p3_find_n_smallest_number,prompt_6,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",1000,0.00644479994662106,0.006941045995336026,0.010343900066800416,N/A
p3_find_n_smallest_number,prompt_6,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",10000,0.0650688000023365,0.06763202799949795,0.07921929995063692,N/A
p3_find_n_smallest_number,prompt_6,23,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array, key=lambda x: x[0])\n    k_smallest_indexes = [index for value, index in k_smallest]\n    return k_smallest_indexes']",100000,0.7837860999861732,0.8025991879962384,0.841345899971202,N/A
p3_find_n_smallest_number,prompt_6,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    k_smallest_indexes = [heapq.heappop(indexed_arr)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.005152099998667836,0.005564010008238256,0.008934900048188865,N/A
p3_find_n_smallest_number,prompt_6,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    k_smallest_indexes = [heapq.heappop(indexed_arr)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.06404520000796765,0.06689311200752854,0.07921270001679659,N/A
p3_find_n_smallest_number,prompt_6,24,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_arr)\n    k_smallest_indexes = [heapq.heappop(indexed_arr)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.7678946000523865,0.7932199210079852,0.8710142999188974,N/A
p3_find_n_smallest_number,prompt_6,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuple = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result_indices = [idx for val, idx in k_smallest_tuple]\n    return result_indices']",1000,0.006454100017435849,0.006984164989553392,0.010414800024591386,N/A
p3_find_n_smallest_number,prompt_6,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuple = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result_indices = [idx for val, idx in k_smallest_tuple]\n    return result_indices']",10000,0.0649569999659434,0.0688937929959502,0.08710110001266003,N/A
p3_find_n_smallest_number,prompt_6,25,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest_tuple = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    result_indices = [idx for val, idx in k_smallest_tuple]\n    return result_indices']",100000,0.7687043999321759,0.7964138489891774,1.0629348000511527,N/A
p3_find_n_smallest_number,prompt_6,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    max_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(max_heap, (-num, i))\n        if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    result = [idx for _, idx in max_heap]\n    return result']",1000,0.01252989994827658,0.013614699998870492,0.020848900079727173,N/A
p3_find_n_smallest_number,prompt_6,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    max_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(max_heap, (-num, i))\n        if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    result = [idx for _, idx in max_heap]\n    return result']",10000,0.1236339999595657,0.12799917899188584,0.13843149994499981,N/A
p3_find_n_smallest_number,prompt_6,26,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    max_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(max_heap, (-num, i))\n        if len(max_heap) > k:\n            heapq.heappop(max_heap)\n    result = [idx for _, idx in max_heap]\n    return result']",100000,1.2538067999994382,1.2781398899876513,1.305205500102602,N/A
p3_find_n_smallest_number,prompt_6,27,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k should be less than or equal to the length of the list')\n    heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    smallest_indices = [index for value, index in heap]\n    return smallest_indices""]",1000,0.0021901000291109085,0.0024449280055705456,0.003838400007225573,N/A
p3_find_n_smallest_number,prompt_6,27,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k should be less than or equal to the length of the list')\n    heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    smallest_indices = [index for value, index in heap]\n    return smallest_indices""]",10000,0.022441099979914725,0.023798284000949934,0.02837279997766018,N/A
p3_find_n_smallest_number,prompt_6,27,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k should be less than or equal to the length of the list')\n    heap = [(value, idx) for idx, value in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < heap[0][0]:\n            heapq.heapreplace(heap, (arg1[idx], idx))\n    smallest_indices = [index for value, index in heap]\n    return smallest_indices""]",100000,0.22980139998253435,0.23910408099414782,0.3492439000401646,N/A
p3_find_n_smallest_number,prompt_6,28,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array.')\n    smallest_elements_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_elements_indices""]",1000,0.003117899992503226,0.003331199997337535,0.003959599998779595,N/A
p3_find_n_smallest_number,prompt_6,28,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array.')\n    smallest_elements_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_elements_indices""]",10000,0.02854859991930425,0.030794684001011773,0.0637584999203682,N/A
p3_find_n_smallest_number,prompt_6,28,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        raise ValueError('k cannot be greater than the length of the array.')\n    smallest_elements_indices = heapq.nsmallest(arg2, range(len(arg1)), key=arg1.__getitem__)\n    return smallest_elements_indices""]",100000,0.2888974000234157,0.2982337040023413,0.37253799999598414,N/A
p3_find_n_smallest_number,prompt_6,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    return result']",1000,0.0029968000017106533,0.0033371729962527754,0.005078600021079183,N/A
p3_find_n_smallest_number,prompt_6,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    return result']",10000,0.028696299996227026,0.030682208995567634,0.04454000003170222,N/A
p3_find_n_smallest_number,prompt_6,29,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    result = [index for _, index in heap]\n    return result']",100000,0.2986019999952987,0.30670478599495254,0.3284832000499591,N/A
p3_find_n_smallest_number,prompt_6,30,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0:\n        raise ValueError('k should be between 1 and the length of the list')\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest_elements]\n    return indices""]",1000,0.004710300010628998,0.004908378995023668,0.006674899952486157,N/A
p3_find_n_smallest_number,prompt_6,30,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0:\n        raise ValueError('k should be between 1 and the length of the list')\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest_elements]\n    return indices""]",10000,0.044389599934220314,0.046805943002691495,0.058818900026381016,N/A
p3_find_n_smallest_number,prompt_6,30,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1) or arg2 <= 0:\n        raise ValueError('k should be between 1 and the length of the list')\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indices = [i for i, x in enumerate(arg1) if x in k_smallest_elements]\n    return indices""]",100000,0.44988750002812594,0.4645662899944,0.6343293000245467,N/A
p3_find_n_smallest_number,prompt_6,31,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0 or not arr:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = arr[:k]\n    heapq.heapify(min_heap)\n    index_map = {val: idx for idx, val in enumerate(arr[:k])}\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0]:\n            top_val = heapq.heappop(min_heap)\n            del index_map[top_val]\n            heapq.heappush(min_heap, arr[i])\n            index_map[arr[i]] = i\n    result_indices = [index_map[val] for val in min_heap]\n    return result_indices']",1000,0.0018498999997973442,0.0020026379951741547,0.0023729000240564346,N/A
p3_find_n_smallest_number,prompt_6,31,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0 or not arr:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = arr[:k]\n    heapq.heapify(min_heap)\n    index_map = {val: idx for idx, val in enumerate(arr[:k])}\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0]:\n            top_val = heapq.heappop(min_heap)\n            del index_map[top_val]\n            heapq.heappush(min_heap, arr[i])\n            index_map[arr[i]] = i\n    result_indices = [index_map[val] for val in min_heap]\n    return result_indices']",10000,0.018737600068561733,0.019604043007129802,0.021604400011710823,N/A
p3_find_n_smallest_number,prompt_6,31,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0 or not arr:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n    min_heap = arr[:k]\n    heapq.heapify(min_heap)\n    index_map = {val: idx for idx, val in enumerate(arr[:k])}\n    for i in range(k, len(arr)):\n        if arr[i] < min_heap[0]:\n            top_val = heapq.heappop(min_heap)\n            del index_map[top_val]\n            heapq.heappush(min_heap, arr[i])\n            index_map[arr[i]] = i\n    result_indices = [index_map[val] for val in min_heap]\n    return result_indices']",100000,0.18764180003199726,0.19414759800070897,0.21426990011241287,N/A
p3_find_n_smallest_number,prompt_6,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",1000,0.007393799955025315,0.008014727011322975,0.01318640005774796,N/A
p3_find_n_smallest_number,prompt_6,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",10000,0.08642259996850044,0.08993357900297269,0.09830289997626096,N/A
p3_find_n_smallest_number,prompt_6,32,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(heap, (value, index))\n    smallest_indexes = []\n    for _ in range(arg2):\n        smallest_indexes.append(heapq.heappop(heap)[1])\n    return smallest_indexes']",100000,0.9857106000417843,1.0104328580060973,1.247452300041914,N/A
p3_find_n_smallest_number,prompt_6,33,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_indices']",1000,0.007340000011026859,0.007837797998217867,0.009908200008794665,N/A
p3_find_n_smallest_number,prompt_6,33,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_indices']",10000,0.11086710006929934,0.11488716299762018,0.1362441999372095,N/A
p3_find_n_smallest_number,prompt_6,33,"['def funcImp(arg1, arg2):\n    k = arg2\n    sorted_indices = sorted(range(len(arg1)), key=lambda i: arg1[i])[:k]\n    return sorted_indices']",100000,1.5858526999363676,1.6189244420046451,1.6985460999421775,N/A
p3_find_n_smallest_number,prompt_6,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    k_smallest = set(heap)\n    indices = []\n    for i, num in enumerate(arg1):\n        if num in k_smallest:\n            indices.append(i)\n            k_smallest.remove(num)\n            if not k_smallest:\n                break\n    return indices']",1000,0.0030132000101730227,0.0032166910031810403,0.0049510999815538526,N/A
p3_find_n_smallest_number,prompt_6,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    k_smallest = set(heap)\n    indices = []\n    for i, num in enumerate(arg1):\n        if num in k_smallest:\n            indices.append(i)\n            k_smallest.remove(num)\n            if not k_smallest:\n                break\n    return indices']",10000,0.026656700065359473,0.027803865987807513,0.03520379995461553,N/A
p3_find_n_smallest_number,prompt_6,34,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    heap = arg1[:arg2]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < heap[0]:\n            heapq.heapreplace(heap, arg1[i])\n    k_smallest = set(heap)\n    indices = []\n    for i, num in enumerate(arg1):\n        if num in k_smallest:\n            indices.append(i)\n            k_smallest.remove(num)\n            if not k_smallest:\n                break\n    return indices']",100000,0.3200247000204399,0.3312328729964793,0.49902340001426637,N/A
p3_find_n_smallest_number,prompt_6,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return [index for _, index in heap]']",1000,0.006583700072951615,0.00704422399867326,0.012447200017049909,N/A
p3_find_n_smallest_number,prompt_6,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return [index for _, index in heap]']",10000,0.065863800002262,0.06975685799494385,0.17768920003436506,N/A
p3_find_n_smallest_number,prompt_6,35,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 <= 0:\n        return []\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        else:\n            heapq.heappushpop(heap, (-num, i))\n    return [index for _, index in heap]']",100000,0.668683800031431,0.6829436879977584,0.7070879999082536,N/A
p3_find_n_smallest_number,prompt_6,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        else:\n            heapq.heappushpop(heap, (-value, index))\n    indices = [index for value, index in heap]\n    return indices']",1000,0.006861899979412556,0.007110730995191261,0.008707000059075654,N/A
p3_find_n_smallest_number,prompt_6,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        else:\n            heapq.heappushpop(heap, (-value, index))\n    indices = [index for value, index in heap]\n    return indices']",10000,0.06688119994942099,0.06951961199520156,0.08124460000544786,N/A
p3_find_n_smallest_number,prompt_6,36,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        else:\n            heapq.heappushpop(heap, (-value, index))\n    indices = [index for value, index in heap]\n    return indices']",100000,0.6707224000710994,0.6981223609985318,0.9691011999966577,N/A
p3_find_n_smallest_number,prompt_6,37,"['array = [4, 2, 9, 1, 5, 6]\nk = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,37,"['array = [4, 2, 9, 1, 5, 6]\nk = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,37,"['array = [4, 2, 9, 1, 5, 6]\nk = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,38,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low < high:\n        pi = partition(arr, low, high)\n        if pi == k:\n            return\n        elif pi < k:\n            quickselect(arr, pi + 1, high, k)\n        else:\n            quickselect(arr, low, pi - 1, k)\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    original_indexes = list(range(len(arg1)))\n\n    def partition_with_index(arr, indexes, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        indexes[i + 1], indexes[high] = (indexes[high], indexes[i + 1])\n        return i + 1\n\n    def quickselect_with_index(arr, indexes, low, high, k):\n        if low < high:\n            pi = partition_with_index(arr, indexes, low, high)\n            if pi == k:\n                return\n            elif pi < k:\n                quickselect_with_index(arr, indexes, pi + 1, high, k)\n            else:\n                quickselect_with_index(arr, indexes, low, pi - 1, k)\n    quickselect_with_index(arg1, original_indexes, 0, len(arg1) - 1, arg2 - 1)\n    return original_indexes[:arg2]\npass']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,38,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low < high:\n        pi = partition(arr, low, high)\n        if pi == k:\n            return\n        elif pi < k:\n            quickselect(arr, pi + 1, high, k)\n        else:\n            quickselect(arr, low, pi - 1, k)\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    original_indexes = list(range(len(arg1)))\n\n    def partition_with_index(arr, indexes, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        indexes[i + 1], indexes[high] = (indexes[high], indexes[i + 1])\n        return i + 1\n\n    def quickselect_with_index(arr, indexes, low, high, k):\n        if low < high:\n            pi = partition_with_index(arr, indexes, low, high)\n            if pi == k:\n                return\n            elif pi < k:\n                quickselect_with_index(arr, indexes, pi + 1, high, k)\n            else:\n                quickselect_with_index(arr, indexes, low, pi - 1, k)\n    quickselect_with_index(arg1, original_indexes, 0, len(arg1) - 1, arg2 - 1)\n    return original_indexes[:arg2]\npass']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,38,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low < high:\n        pi = partition(arr, low, high)\n        if pi == k:\n            return\n        elif pi < k:\n            quickselect(arr, pi + 1, high, k)\n        else:\n            quickselect(arr, low, pi - 1, k)\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    original_indexes = list(range(len(arg1)))\n\n    def partition_with_index(arr, indexes, low, high):\n        pivot = arr[high]\n        i = low - 1\n        for j in range(low, high):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = (arr[j], arr[i])\n                indexes[i], indexes[j] = (indexes[j], indexes[i])\n        arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n        indexes[i + 1], indexes[high] = (indexes[high], indexes[i + 1])\n        return i + 1\n\n    def quickselect_with_index(arr, indexes, low, high, k):\n        if low < high:\n            pi = partition_with_index(arr, indexes, low, high)\n            if pi == k:\n                return\n            elif pi < k:\n                quickselect_with_index(arr, indexes, pi + 1, high, k)\n            else:\n                quickselect_with_index(arr, indexes, low, pi - 1, k)\n    quickselect_with_index(arg1, original_indexes, 0, len(arg1) - 1, arg2 - 1)\n    return original_indexes[:arg2]\npass']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    result = [index for _, index in heap]\n    return result']",1000,0.004113300004974008,0.004387001001741737,0.004947499954141676,N/A
p3_find_n_smallest_number,prompt_6,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    result = [index for _, index in heap]\n    return result']",10000,0.040469100000336766,0.04148206499870866,0.04417080001439899,N/A
p3_find_n_smallest_number,prompt_6,39,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0 or arg2 == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for index, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-value, index))\n        elif -heap[0][0] > value:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-value, index))\n    result = [index for _, index in heap]\n    return result']",100000,0.40327490004710853,0.4099520059977658,0.43054010008927435,N/A
p3_find_n_smallest_number,prompt_6,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [i for num, i in min_heap]\n    return indices\npass']",1000,0.011506599956192076,0.012191895003197714,0.013090700027532876,N/A
p3_find_n_smallest_number,prompt_6,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [i for num, i in min_heap]\n    return indices\npass']",10000,0.11487010004930198,0.1199192480056081,0.13221129996236414,N/A
p3_find_n_smallest_number,prompt_6,40,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    indices = [i for num, i in min_heap]\n    return indices\npass']",100000,1.1612893999554217,1.1952295100025367,1.4990972999949008,N/A
p3_find_n_smallest_number,prompt_6,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n\n    def quickselect(arr, left, right, k):\n        pivot_index = right\n        pivot = arr[pivot_index]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        if i == k:\n            return arr[:i]\n        elif i < k:\n            return quickselect(arr, i + 1, right, k)\n        else:\n            return quickselect(arr, left, i - 1, k)\n    k_smallest = quickselect(arg1[:], 0, len(arg1) - 1, arg2)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1) if val in k_smallest]\n    heapq.heapify(min_heap)\n    result_indexes = []\n    while min_heap and len(result_indexes) < arg2:\n        val, idx = heapq.heappop(min_heap)\n        result_indexes.append(idx)\n    return result_indexes']",1000,0.010275899898260832,0.011157386001432314,0.027995300013571978,N/A
p3_find_n_smallest_number,prompt_6,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n\n    def quickselect(arr, left, right, k):\n        pivot_index = right\n        pivot = arr[pivot_index]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        if i == k:\n            return arr[:i]\n        elif i < k:\n            return quickselect(arr, i + 1, right, k)\n        else:\n            return quickselect(arr, left, i - 1, k)\n    k_smallest = quickselect(arg1[:], 0, len(arg1) - 1, arg2)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1) if val in k_smallest]\n    heapq.heapify(min_heap)\n    result_indexes = []\n    while min_heap and len(result_indexes) < arg2:\n        val, idx = heapq.heappop(min_heap)\n        result_indexes.append(idx)\n    return result_indexes']",10000,0.07365010003559291,0.07692416300415061,0.09658880007918924,N/A
p3_find_n_smallest_number,prompt_6,41,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n\n    def quickselect(arr, left, right, k):\n        pivot_index = right\n        pivot = arr[pivot_index]\n        i = left\n        for j in range(left, right):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[right] = (arr[right], arr[i])\n        if i == k:\n            return arr[:i]\n        elif i < k:\n            return quickselect(arr, i + 1, right, k)\n        else:\n            return quickselect(arr, left, i - 1, k)\n    k_smallest = quickselect(arg1[:], 0, len(arg1) - 1, arg2)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1) if val in k_smallest]\n    heapq.heapify(min_heap)\n    result_indexes = []\n    while min_heap and len(result_indexes) < arg2:\n        val, idx = heapq.heappop(min_heap)\n        result_indexes.append(idx)\n    return result_indexes']",100000,1.0164466999704018,1.0314241250010674,1.0623380999313667,N/A
p3_find_n_smallest_number,prompt_6,42,"['arr = [7, 10, 4, 3, 20, 15]\nk = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,42,"['arr = [7, 10, 4, 3, 20, 15]\nk = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,42,"['arr = [7, 10, 4, 3, 20, 15]\nk = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,43,"['import heapq\n\ndef funcImp(arg1, k):\n    if not arg1 or k == 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [x[1] for x in heap]']",1000,0.002848500036634505,0.0029938999935984613,0.0034524999791756272,N/A
p3_find_n_smallest_number,prompt_6,43,"['import heapq\n\ndef funcImp(arg1, k):\n    if not arg1 or k == 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [x[1] for x in heap]']",10000,0.025657500023953617,0.026880247993394734,0.031651000026613474,N/A
p3_find_n_smallest_number,prompt_6,43,"['import heapq\n\ndef funcImp(arg1, k):\n    if not arg1 or k == 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(k)]\n    heapq.heapify(heap)\n    for i in range(k, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [x[1] for x in heap]']",100000,0.26005590008571744,0.26522016599890774,0.27840179996564984,N/A
p3_find_n_smallest_number,prompt_6,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [indice for num, indice in min_heap]\n    return result']",1000,0.011401899973861873,0.01215806900174357,0.013573999982327223,N/A
p3_find_n_smallest_number,prompt_6,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [indice for num, indice in min_heap]\n    return result']",10000,0.1165018999017775,0.12039353699306958,0.1310508999740705,N/A
p3_find_n_smallest_number,prompt_6,44,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    min_heap = []\n    for i, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, i))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result = [indice for num, indice in min_heap]\n    return result']",100000,1.1655680999392644,1.1948180669988506,1.3310607000021264,N/A
p3_find_n_smallest_number,prompt_6,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",1000,0.005064300028607249,0.005658261002972722,0.008987999986857176,N/A
p3_find_n_smallest_number,prompt_6,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",10000,0.06412170000839978,0.06809344899840652,0.07894879998639226,N/A
p3_find_n_smallest_number,prompt_6,45,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = [(value, index) for index, value in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    k_smallest_indices = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indices']",100000,0.7793494999641553,0.7962119239917956,0.86047710001003,N/A
p3_find_n_smallest_number,prompt_6,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result_indexes = [index for value, index in heapq.nsmallest(arg2, min_heap)]\n    return result_indexes']",1000,0.011973600019700825,0.0123548570019193,0.015332599985413253,N/A
p3_find_n_smallest_number,prompt_6,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result_indexes = [index for value, index in heapq.nsmallest(arg2, min_heap)]\n    return result_indexes']",10000,0.11725540005136281,0.12108276499668136,0.13336430001072586,N/A
p3_find_n_smallest_number,prompt_6,46,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    result_indexes = [index for value, index in heapq.nsmallest(arg2, min_heap)]\n    return result_indexes']",100000,1.1806983998976648,1.210437840995146,1.2989073999924585,N/A
p3_find_n_smallest_number,prompt_6,47,"['def funcImp(arg1, arg2):\n    import heapq\n    if len(arg1) < arg2:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    indexes = [idx for val, idx in smallest_elements]\n    return indexes\narg1 = [5, 3, 1, 6, 4, 2]\narg2 = 3\npass']",1000,0.005255899974144995,0.0056331340002361684,0.009297600015997887,N/A
p3_find_n_smallest_number,prompt_6,47,"['def funcImp(arg1, arg2):\n    import heapq\n    if len(arg1) < arg2:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    indexes = [idx for val, idx in smallest_elements]\n    return indexes\narg1 = [5, 3, 1, 6, 4, 2]\narg2 = 3\npass']",10000,0.05229409993626177,0.05560852999333292,0.06266880000475794,N/A
p3_find_n_smallest_number,prompt_6,47,"['def funcImp(arg1, arg2):\n    import heapq\n    if len(arg1) < arg2:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    indexes = [idx for val, idx in smallest_elements]\n    return indexes\narg1 = [5, 3, 1, 6, 4, 2]\narg2 = 3\npass']",100000,0.6829419999849051,0.7022371930012014,0.7671192000852898,N/A
p3_find_n_smallest_number,prompt_6,48,"['import heapq\n\ndef funcImp(arg1, k):\n    if not arg1 or k <= 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(k)]\n    return k_smallest_indices']",1000,0.007533199968747795,0.008067315998487175,0.010736100026406348,N/A
p3_find_n_smallest_number,prompt_6,48,"['import heapq\n\ndef funcImp(arg1, k):\n    if not arg1 or k <= 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(k)]\n    return k_smallest_indices']",10000,0.08811100001912564,0.09147005701088347,0.12190079991705716,N/A
p3_find_n_smallest_number,prompt_6,48,"['import heapq\n\ndef funcImp(arg1, k):\n    if not arg1 or k <= 0:\n        return []\n    if k >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n    k_smallest_indices = [heapq.heappop(heap)[1] for _ in range(k)]\n    return k_smallest_indices']",100000,0.996141399955377,1.0163305300078356,1.0713222000049427,N/A
p3_find_n_smallest_number,prompt_6,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [idx for _, idx in sorted(heap)]']",1000,0.01179370004683733,0.01233982499805279,0.017735400004312396,N/A
p3_find_n_smallest_number,prompt_6,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [idx for _, idx in sorted(heap)]']",10000,0.11662290000822395,0.12123414100264199,0.18792289996054024,N/A
p3_find_n_smallest_number,prompt_6,49,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(heap, (num, idx))\n        if len(heap) > arg2:\n            heapq.heappop(heap)\n    return [idx for _, idx in sorted(heap)]']",100000,1.1821014999877661,1.206452345997095,1.2407015999779105,N/A
p3_find_n_smallest_number,prompt_6,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be larger than the array length'\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [idx for idx, value in k_smallest]\n    return indices""]",1000,0.004576600040309131,0.004845500000519678,0.008041299995966256,N/A
p3_find_n_smallest_number,prompt_6,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be larger than the array length'\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [idx for idx, value in k_smallest]\n    return indices""]",10000,0.041571600013412535,0.04405442700255662,0.05549469997640699,N/A
p3_find_n_smallest_number,prompt_6,50,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return 'k cannot be larger than the array length'\n    k_smallest = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    indices = [idx for idx, value in k_smallest]\n    return indices""]",100000,0.44373370008543134,0.4516552649985533,0.4669925000052899,N/A
p3_find_n_smallest_number,prompt_6,51,"['arg1 = [10, 3, 5, 8, 2, 9, 1]\narg2 = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,51,"['arg1 = [10, 3, 5, 8, 2, 9, 1]\narg2 = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,51,"['arg1 = [10, 3, 5, 8, 2, 9, 1]\narg2 = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (value, i))\n        else:\n            heapq.heappushpop(heap, (value, i))\n    return [index for value, index in heapq.nsmallest(arg2, heap)]']",1000,0.006125699961557984,0.006514156999764964,0.008196400012820959,N/A
p3_find_n_smallest_number,prompt_6,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (value, i))\n        else:\n            heapq.heappushpop(heap, (value, i))\n    return [index for value, index in heapq.nsmallest(arg2, heap)]']",10000,0.05901389999780804,0.06048803300014697,0.0703206000616774,N/A
p3_find_n_smallest_number,prompt_6,52,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    heap = []\n    for i, value in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (value, i))\n        else:\n            heapq.heappushpop(heap, (value, i))\n    return [index for value, index in heapq.nsmallest(arg2, heap)]']",100000,0.5883393000112846,0.6018593560066074,0.7244230000069365,N/A
p3_find_n_smallest_number,prompt_6,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indices = [idx for _, idx in k_smallest]\n    return result_indices']",1000,0.005165899987332523,0.005469239009544253,0.006210400024428964,N/A
p3_find_n_smallest_number,prompt_6,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indices = [idx for _, idx in k_smallest]\n    return result_indices']",10000,0.05215819994919002,0.055050460004713385,0.06646299990825355,N/A
p3_find_n_smallest_number,prompt_6,53,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    indexed_array = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_array)\n    result_indices = [idx for _, idx in k_smallest]\n    return result_indices']",100000,0.6852284999331459,0.71738949599443,0.7542722999351099,N/A
p3_find_n_smallest_number,prompt_6,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    k_smallest_indices = [idx for val, idx in k_smallest]\n    return k_smallest_indices']",1000,0.005094200023449957,0.0055409730004612355,0.007179099950008094,N/A
p3_find_n_smallest_number,prompt_6,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    k_smallest_indices = [idx for val, idx in k_smallest]\n    return k_smallest_indices']",10000,0.05251960002351552,0.05537205500411801,0.06416269997134805,N/A
p3_find_n_smallest_number,prompt_6,54,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    k_smallest_indices = [idx for val, idx in k_smallest]\n    return k_smallest_indices']",100000,0.6816686999518424,0.7121180230076425,0.7529395000310615,N/A
p3_find_n_smallest_number,prompt_6,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    min_heap = indexed_arr[:arg2]\n    heapq.heapify(min_heap)\n    for item in indexed_arr[arg2:]:\n        if item < min_heap[0]:\n            heapq.heapreplace(min_heap, item)\n    result = [idx for val, idx in min_heap]\n    return result']",1000,0.005079300026409328,0.005426733007188886,0.006352400057949126,N/A
p3_find_n_smallest_number,prompt_6,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    min_heap = indexed_arr[:arg2]\n    heapq.heapify(min_heap)\n    for item in indexed_arr[arg2:]:\n        if item < min_heap[0]:\n            heapq.heapreplace(min_heap, item)\n    result = [idx for val, idx in min_heap]\n    return result']",10000,0.05603530001826584,0.059650720995850864,0.07059549994301051,N/A
p3_find_n_smallest_number,prompt_6,55,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    indexed_arr = [(val, idx) for idx, val in enumerate(arg1)]\n    min_heap = indexed_arr[:arg2]\n    heapq.heapify(min_heap)\n    for item in indexed_arr[arg2:]:\n        if item < min_heap[0]:\n            heapq.heapreplace(min_heap, item)\n    result = [idx for val, idx in min_heap]\n    return result']",100000,0.7565305000171065,0.7861079800047446,0.9469122999580577,N/A
p3_find_n_smallest_number,prompt_6,56,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low < high:\n        pi = partition(arr, low, high)\n        if pi > k:\n            return quickselect(arr, low, pi - 1, k)\n        elif pi < k:\n            return quickselect(arr, pi + 1, high, k)\n    return arr[:k]\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    n = len(arg1)\n    k = min(arg2, n)\n    array_copy = arg1[:]\n    small_elements = quickselect(array_copy, 0, n - 1, k - 1)\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in small_elements:\n            result.append(i)\n            small_elements.remove(arg1[i])\n    return result']",1000,0.009241799940355122,0.00970643899636343,0.013617200078442693,N/A
p3_find_n_smallest_number,prompt_6,56,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low < high:\n        pi = partition(arr, low, high)\n        if pi > k:\n            return quickselect(arr, low, pi - 1, k)\n        elif pi < k:\n            return quickselect(arr, pi + 1, high, k)\n    return arr[:k]\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    n = len(arg1)\n    k = min(arg2, n)\n    array_copy = arg1[:]\n    small_elements = quickselect(array_copy, 0, n - 1, k - 1)\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in small_elements:\n            result.append(i)\n            small_elements.remove(arg1[i])\n    return result']",10000,0.061782200005836785,0.06529931099736132,0.0834652999183163,N/A
p3_find_n_smallest_number,prompt_6,56,"['def partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i + 1\n            arr[i], arr[j] = (arr[j], arr[i])\n    arr[i + 1], arr[high] = (arr[high], arr[i + 1])\n    return i + 1\n\ndef quickselect(arr, low, high, k):\n    if low < high:\n        pi = partition(arr, low, high)\n        if pi > k:\n            return quickselect(arr, low, pi - 1, k)\n        elif pi < k:\n            return quickselect(arr, pi + 1, high, k)\n    return arr[:k]\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    n = len(arg1)\n    k = min(arg2, n)\n    array_copy = arg1[:]\n    small_elements = quickselect(array_copy, 0, n - 1, k - 1)\n    result = []\n    for i in range(len(arg1)):\n        if arg1[i] in small_elements:\n            result.append(i)\n            small_elements.remove(arg1[i])\n    return result']",100000,0.87900419998914,0.8921211409964599,0.9663273999467492,N/A
p3_find_n_smallest_number,prompt_6,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    min_heap = indexed_array[:arg2]\n    heapq.heapify(min_heap)\n    for item in indexed_array[arg2:]:\n        if item[0] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, item)\n    return [idx for _, idx in min_heap]']",1000,0.0051015999633818865,0.005507466008421034,0.007694099913351238,N/A
p3_find_n_smallest_number,prompt_6,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    min_heap = indexed_array[:arg2]\n    heapq.heapify(min_heap)\n    for item in indexed_array[arg2:]:\n        if item[0] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, item)\n    return [idx for _, idx in min_heap]']",10000,0.05476600001566112,0.058181875001173465,0.07629340002313256,N/A
p3_find_n_smallest_number,prompt_6,57,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_array = [(num, idx) for idx, num in enumerate(arg1)]\n    min_heap = indexed_array[:arg2]\n    heapq.heapify(min_heap)\n    for item in indexed_array[arg2:]:\n        if item[0] < min_heap[0][0]:\n            heapq.heapreplace(min_heap, item)\n    return [idx for _, idx in min_heap]']",100000,0.74697560002096,0.774194906995399,0.8200813001021743,N/A
p3_find_n_smallest_number,prompt_6,58,"['def naive_approach(arr, k):\n    sorted_arr = sorted(enumerate(arr), key=lambda x: x[1])\n    return [index for index, value in sorted_arr[:k]]']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,58,"['def naive_approach(arr, k):\n    sorted_arr = sorted(enumerate(arr), key=lambda x: x[1])\n    return [index for index, value in sorted_arr[:k]]']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,58,"['def naive_approach(arr, k):\n    sorted_arr = sorted(enumerate(arr), key=lambda x: x[1])\n    return [index for index, value in sorted_arr[:k]]']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    result.sort()\n    return result']",1000,0.002803299925290048,0.0030758990033064038,0.003801700077019632,N/A
p3_find_n_smallest_number,prompt_6,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    result.sort()\n    return result']",10000,0.02648090000730008,0.02747417299775407,0.029918699990957975,N/A
p3_find_n_smallest_number,prompt_6,59,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < -min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[idx], idx))\n    result = [idx for val, idx in min_heap]\n    result.sort()\n    return result']",100000,0.26526859996374696,0.2714421250042506,0.2869076000060886,N/A
p3_find_n_smallest_number,prompt_6,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for _, idx in heap]']",1000,0.0030609999084845185,0.00345402600010857,0.0063659000443294644,N/A
p3_find_n_smallest_number,prompt_6,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for _, idx in heap]']",10000,0.029328100034035742,0.03104474000632763,0.04102770006284118,N/A
p3_find_n_smallest_number,prompt_6,60,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) < arg2 or arg2 <= 0:\n        return []\n    heap = [(-val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        if -arg1[idx] > heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[idx], idx))\n    return [idx for _, idx in heap]']",100000,0.29631939996033907,0.3050589590019081,0.3284033000236377,N/A
p3_find_n_smallest_number,prompt_6,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, val in enumerate(arg1):\n        heapq.heappush(heap, (val, idx))\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(heap)[1])\n    return smallest_indices']",1000,0.007512299926020205,0.007997984993271529,0.008875899948179722,N/A
p3_find_n_smallest_number,prompt_6,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, val in enumerate(arg1):\n        heapq.heappush(heap, (val, idx))\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(heap)[1])\n    return smallest_indices']",10000,0.08636049996130168,0.08908222100348212,0.11030229995958507,N/A
p3_find_n_smallest_number,prompt_6,61,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or len(arg1) == 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for idx, val in enumerate(arg1):\n        heapq.heappush(heap, (val, idx))\n    smallest_indices = []\n    for _ in range(arg2):\n        smallest_indices.append(heapq.heappop(heap)[1])\n    return smallest_indices']",100000,1.008713399991393,1.0377359059918672,1.1745535000227392,N/A
p3_find_n_smallest_number,prompt_6,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, element in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (element, index))\n        else:\n            heapq.heappushpop(min_heap, (element, index))\n    result_indices = [index for element, index in min_heap]\n    result_indices.sort()\n    return result_indices']",1000,0.006095099961385131,0.006502562992973253,0.0097237000009045,N/A
p3_find_n_smallest_number,prompt_6,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, element in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (element, index))\n        else:\n            heapq.heappushpop(min_heap, (element, index))\n    result_indices = [index for element, index in min_heap]\n    result_indices.sort()\n    return result_indices']",10000,0.05784019990824163,0.060492056995863096,0.07050840009469539,N/A
p3_find_n_smallest_number,prompt_6,62,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, element in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (element, index))\n        else:\n            heapq.heappushpop(min_heap, (element, index))\n    result_indices = [index for element, index in min_heap]\n    result_indices.sort()\n    return result_indices']",100000,0.5850860000355169,0.6161397219996434,1.0291048999642953,N/A
p3_find_n_smallest_number,prompt_6,63,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if not arg1 or k <= 0 or k > len(arg1):\n        raise ValueError('Invalid input')\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k_indexes = [heapq.heappop(min_heap)[1] for _ in range(k)]\n    return smallest_k_indexes""]",1000,0.005073899985291064,0.005761589998146519,0.016939900000579655,N/A
p3_find_n_smallest_number,prompt_6,63,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if not arg1 or k <= 0 or k > len(arg1):\n        raise ValueError('Invalid input')\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k_indexes = [heapq.heappop(min_heap)[1] for _ in range(k)]\n    return smallest_k_indexes""]",10000,0.06738750007934868,0.06921540700714104,0.07563340000342578,N/A
p3_find_n_smallest_number,prompt_6,63,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if not arg1 or k <= 0 or k > len(arg1):\n        raise ValueError('Invalid input')\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_k_indexes = [heapq.heappop(min_heap)[1] for _ in range(k)]\n    return smallest_k_indexes""]",100000,0.7463748999871314,0.7782199830014724,1.0654534000204876,N/A
p3_find_n_smallest_number,prompt_6,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    while len(min_heap) > arg2:\n        heapq.heappop(min_heap)\n    k_smallest_indexes = [idx for val, idx in heapq.nsmallest(arg2, min_heap)]\n    return k_smallest_indexes']",1000,0.02198229997884482,0.02368892400059849,0.04873409995343536,N/A
p3_find_n_smallest_number,prompt_6,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    while len(min_heap) > arg2:\n        heapq.heappop(min_heap)\n    k_smallest_indexes = [idx for val, idx in heapq.nsmallest(arg2, min_heap)]\n    return k_smallest_indexes']",10000,0.311343599925749,0.3195879259961657,0.33077989995945245,N/A
p3_find_n_smallest_number,prompt_6,64,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    while len(min_heap) > arg2:\n        heapq.heappop(min_heap)\n    k_smallest_indexes = [idx for val, idx in heapq.nsmallest(arg2, min_heap)]\n    return k_smallest_indexes']",100000,5.539000399992801,5.719950102999573,5.956681199953891,N/A
p3_find_n_smallest_number,prompt_6,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    result = [t[1] for t in sorted(min_heap, key=lambda x: x[1])]\n    return result']",1000,0.003234499949030578,0.003384669997030869,0.003701500012539327,N/A
p3_find_n_smallest_number,prompt_6,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    result = [t[1] for t in sorted(min_heap, key=lambda x: x[1])]\n    return result']",10000,0.02903069998137653,0.03127115099923685,0.06709580007009208,N/A
p3_find_n_smallest_number,prompt_6,65,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] > min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (-arg1[i], i))\n    result = [t[1] for t in sorted(min_heap, key=lambda x: x[1])]\n    return result']",100000,0.28928330005146563,0.30016585600562395,0.3162125999806449,N/A
p3_find_n_smallest_number,prompt_6,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -heap[0][0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return sorted([index for _, index in heap])']",1000,0.0041452000150457025,0.004460055002709851,0.006454900023527443,N/A
p3_find_n_smallest_number,prompt_6,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -heap[0][0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return sorted([index for _, index in heap])']",10000,0.03871729993261397,0.04083126500598155,0.04975390003528446,N/A
p3_find_n_smallest_number,prompt_6,66,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = []\n    for i, num in enumerate(arg1):\n        if len(heap) < arg2:\n            heapq.heappush(heap, (-num, i))\n        elif -heap[0][0] > num:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-num, i))\n    return sorted([index for _, index in heap])']",100000,0.3994066999293864,0.41119776499690486,0.45847029995638877,N/A
p3_find_n_smallest_number,prompt_6,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, idx))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    return [index for _, index in min_heap]']",1000,0.011535300058312714,0.012345625995658338,0.016014400054700673,N/A
p3_find_n_smallest_number,prompt_6,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, idx))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    return [index for _, index in min_heap]']",10000,0.1157306000823155,0.11952056800946594,0.12996569997631013,N/A
p3_find_n_smallest_number,prompt_6,67,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    min_heap = []\n    for idx, num in enumerate(arg1):\n        heapq.heappush(min_heap, (num, idx))\n        if len(min_heap) > arg2:\n            heapq.heappop(min_heap)\n    return [index for _, index in min_heap]']",100000,1.1709542999742553,1.2052448150038253,1.3185472000623122,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indexes = [arg1.index(element) for element in smallest_elements]\n    return indexes']",1000,0.002087100059725344,0.0027780810021795334,0.006538799963891506,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indexes = [arg1.index(element) for element in smallest_elements]\n    return indexes']",10000,0.01715249998960644,0.01824741598684341,0.023397599929012358,N/A
p3_find_n_smallest_number,prompt_6,68,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k = arg2\n    if k <= 0 or k > len(arg1):\n        return []\n    smallest_elements = heapq.nsmallest(k, arg1)\n    indexes = [arg1.index(element) for element in smallest_elements]\n    return indexes']",100000,0.1617164999479428,0.1686960729956627,0.20310560008510947,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(indexed_array)\n    k_smallest_indexes = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.004879100015386939,0.005248539001913741,0.006346900016069412,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(indexed_array)\n    k_smallest_indexes = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.06494329997804016,0.06660565799800679,0.072211500024423,N/A
p3_find_n_smallest_number,prompt_6,69,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if arg2 > len(arg1):\n        return []\n    indexed_array = [(arg1[i], i) for i in range(len(arg1))]\n    heapq.heapify(indexed_array)\n    k_smallest_indexes = [heapq.heappop(indexed_array)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.7493461000267416,0.766612222000258,0.8043908000690863,N/A
p3_find_n_smallest_number,prompt_6,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",1000,0.006310399970971048,0.006734696989879012,0.011000199941918254,N/A
p3_find_n_smallest_number,prompt_6,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",10000,0.06462610000744462,0.06797039599972778,0.074722999939695,N/A
p3_find_n_smallest_number,prompt_6,70,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    indexed_list = [(value, index) for index, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_list, key=lambda x: x[0])\n    k_smallest_indices = [index for value, index in k_smallest]\n    return k_smallest_indices']",100000,0.7853298000991344,0.8028074059938081,0.8388266999972984,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=lambda i: arg1[i])\n    return k_smallest_indexes']",1000,0.0039802000392228365,0.004211972004268319,0.004525600001215935,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=lambda i: arg1[i])\n    return k_smallest_indexes']",10000,0.03783040004782379,0.03911198699963279,0.04431460006162524,N/A
p3_find_n_smallest_number,prompt_6,71,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    k_smallest_indexes = heapq.nsmallest(arg2, range(len(arg1)), key=lambda i: arg1[i])\n    return k_smallest_indexes']",100000,0.3741324000293389,0.3864447449997533,0.44382789998780936,N/A
p3_find_n_smallest_number,prompt_6,72,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",1000,0.0011415000772103667,0.001297440998023376,0.004663700005039573,N/A
p3_find_n_smallest_number,prompt_6,72,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",10000,0.010102699976414442,0.01730742199346423,0.05535149993374944,N/A
p3_find_n_smallest_number,prompt_6,72,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for elem in smallest_elements:\n        index = arg1.index(elem)\n        indexes.append(index)\n        arg1[index] = float('inf')\n    return indexes""]",100000,0.2199902000138536,0.4235972289950587,0.5961261000484228,N/A
p3_find_n_smallest_number,prompt_6,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",1000,0.007657999987713993,0.008096999999834225,0.011467000003904104,N/A
p3_find_n_smallest_number,prompt_6,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",10000,0.08581469999626279,0.08977803999441676,0.10028699995018542,N/A
p3_find_n_smallest_number,prompt_6,73,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_indexes = [heapq.heappop(min_heap)[1] for _ in range(arg2)]\n    return k_smallest_indexes']",100000,0.9779173999559134,1.0187293840071652,1.0763904999475926,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        smallest_indices.append(idx)\n    return smallest_indices']",1000,0.005097300047054887,0.0055386629921849815,0.008737300056964159,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        smallest_indices.append(idx)\n    return smallest_indices']",10000,0.06736780004575849,0.06872182999621146,0.07257540000136942,N/A
p3_find_n_smallest_number,prompt_6,74,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if len(arg1) == 0:\n        return []\n    if arg2 > len(arg1):\n        arg2 = len(arg1)\n    min_heap = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = []\n    for _ in range(arg2):\n        val, idx = heapq.heappop(min_heap)\n        smallest_indices.append(idx)\n    return smallest_indices']",100000,0.7932872999226674,0.8113637869921513,0.8437478999840096,N/A
p3_find_n_smallest_number,prompt_6,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes_of_k_smallest = [arg1.index(ele) for ele in k_smallest_elements]\n    return indexes_of_k_smallest']",1000,0.0020634999964386225,0.002153369000880048,0.0024944000178948045,N/A
p3_find_n_smallest_number,prompt_6,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes_of_k_smallest = [arg1.index(ele) for ele in k_smallest_elements]\n    return indexes_of_k_smallest']",10000,0.01695540000218898,0.017993043003370984,0.02255709993187338,N/A
p3_find_n_smallest_number,prompt_6,75,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest_elements = heapq.nsmallest(arg2, arg1)\n    indexes_of_k_smallest = [arg1.index(ele) for ele in k_smallest_elements]\n    return indexes_of_k_smallest']",100000,0.16262959991581738,0.16621589300455525,0.18268269998952746,N/A
p3_find_n_smallest_number,prompt_6,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (num, i))\n        else:\n            heapq.heappushpop(min_heap, (num, i))\n    min_heap.sort()\n    return [index for num, index in min_heap[:arg2]]']",1000,0.006086299894377589,0.00639932700083591,0.009102600044570863,N/A
p3_find_n_smallest_number,prompt_6,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (num, i))\n        else:\n            heapq.heappushpop(min_heap, (num, i))\n    min_heap.sort()\n    return [index for num, index in min_heap[:arg2]]']",10000,0.05843740003183484,0.0602804680087138,0.07085840008221567,N/A
p3_find_n_smallest_number,prompt_6,76,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return sorted(range(len(arg1)), key=lambda x: arg1[x])\n    min_heap = []\n    for i, num in enumerate(arg1):\n        if len(min_heap) < arg2:\n            heapq.heappush(min_heap, (num, i))\n        else:\n            heapq.heappushpop(min_heap, (num, i))\n    min_heap.sort()\n    return [index for num, index in min_heap[:arg2]]']",100000,0.5855989999836311,0.59855457900092,0.7073123999871314,N/A
p3_find_n_smallest_number,prompt_6,77,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n\n    def quickselect(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k:\n                return\n            elif pivot_index < k:\n                quickselect(arr, pivot_index + 1, high, k)\n            else:\n                quickselect(arr, low, pivot_index - 1, k)\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n    quickselect(arr, 0, len(arr) - 1, k - 1)\n    k_smallest_elems = arr[:k]\n    result_indexes = []\n    for elem in k_smallest_elems:\n        result_indexes.append(arr.index(elem))\n    return result_indexes']",1000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,77,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n\n    def quickselect(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k:\n                return\n            elif pivot_index < k:\n                quickselect(arr, pivot_index + 1, high, k)\n            else:\n                quickselect(arr, low, pivot_index - 1, k)\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n    quickselect(arr, 0, len(arr) - 1, k - 1)\n    k_smallest_elems = arr[:k]\n    result_indexes = []\n    for elem in k_smallest_elems:\n        result_indexes.append(arr.index(elem))\n    return result_indexes']",10000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,77,"['import heapq\n\ndef funcImp(arr, k):\n    if k <= 0:\n        return []\n    if k >= len(arr):\n        return list(range(len(arr)))\n\n    def quickselect(arr, low, high, k):\n        if low <= high:\n            pivot_index = partition(arr, low, high)\n            if pivot_index == k:\n                return\n            elif pivot_index < k:\n                quickselect(arr, pivot_index + 1, high, k)\n            else:\n                quickselect(arr, low, pivot_index - 1, k)\n\n    def partition(arr, low, high):\n        pivot = arr[high]\n        i = low\n        for j in range(low, high):\n            if arr[j] < pivot:\n                arr[i], arr[j] = (arr[j], arr[i])\n                i += 1\n        arr[i], arr[high] = (arr[high], arr[i])\n        return i\n    quickselect(arr, 0, len(arr) - 1, k - 1)\n    k_smallest_elems = arr[:k]\n    result_indexes = []\n    for elem in k_smallest_elems:\n        result_indexes.append(arr.index(elem))\n    return result_indexes']",100000,0,0,0,	 exception: maximum recursion depth exceeded in comparison
p3_find_n_smallest_number,prompt_6,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    smallest_indices = [heapq.heappop(indexed_list)[1] for _ in range(k)]\n    return smallest_indices']",1000,0.005151799996383488,0.005540693991351872,0.008611500030383468,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    smallest_indices = [heapq.heappop(indexed_list)[1] for _ in range(k)]\n    return smallest_indices']",10000,0.06578790000639856,0.06898725199978799,0.07745330000761896,N/A
p3_find_n_smallest_number,prompt_6,78,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = arg2\n    if k > len(arg1):\n        k = len(arg1)\n    indexed_list = [(val, idx) for idx, val in enumerate(arg1)]\n    heapq.heapify(indexed_list)\n    smallest_indices = [heapq.heappop(indexed_list)[1] for _ in range(k)]\n    return smallest_indices']",100000,0.7821282000513747,0.79775509500294,0.8465571000706404,N/A
p3_find_n_smallest_number,prompt_6,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    array_with_indices = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, array_with_indices, key=lambda x: x[0])\n    indices = [idx for val, idx in k_smallest]\n    return indices']",1000,0.006473199930042028,0.006912905001081526,0.01173709996510297,N/A
p3_find_n_smallest_number,prompt_6,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    array_with_indices = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, array_with_indices, key=lambda x: x[0])\n    indices = [idx for val, idx in k_smallest]\n    return indices']",10000,0.06533590005710721,0.06865310100023635,0.08624630002304912,N/A
p3_find_n_smallest_number,prompt_6,79,"['import heapq\n\ndef funcImp(arg1, arg2):\n    array_with_indices = [(val, idx) for idx, val in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, array_with_indices, key=lambda x: x[0])\n    indices = [idx for val, idx in k_smallest]\n    return indices']",100000,0.7839454000350088,0.8148893260012846,0.9725384999765083,N/A
p3_find_n_smallest_number,prompt_6,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        idx = arg1.index(num)\n        indexes.append(idx)\n        arg1[idx] = float('inf')\n    return indexes""]",1000,0.0011335000162944198,0.0012916559912264348,0.004892900004051626,N/A
p3_find_n_smallest_number,prompt_6,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        idx = arg1.index(num)\n        indexes.append(idx)\n        arg1[idx] = float('inf')\n    return indexes""]",10000,0.010105599998496473,0.01716104899882339,0.05154390004463494,N/A
p3_find_n_smallest_number,prompt_6,80,"[""import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = []\n    for num in k_smallest:\n        idx = arg1.index(num)\n        indexes.append(idx)\n        arg1[idx] = float('inf')\n    return indexes""]",100000,0.22811200004070997,0.4264469639980234,0.5837555999169126,N/A
p3_find_n_smallest_number,prompt_6,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k >= n:\n        return list(range(n))\n    min_heap = []\n    for i, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, i))\n    k_smallest_with_indexes = heapq.nsmallest(k, min_heap)\n    k_smallest_indexes = [index for value, index in k_smallest_with_indexes]\n    return k_smallest_indexes']",1000,0.00941109994892031,0.010037441996391862,0.01189880003221333,N/A
p3_find_n_smallest_number,prompt_6,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k >= n:\n        return list(range(n))\n    min_heap = []\n    for i, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, i))\n    k_smallest_with_indexes = heapq.nsmallest(k, min_heap)\n    k_smallest_indexes = [index for value, index in k_smallest_with_indexes]\n    return k_smallest_indexes']",10000,0.10500440001487732,0.10912775199860335,0.12087280000559986,N/A
p3_find_n_smallest_number,prompt_6,81,"['import heapq\n\ndef funcImp(arg1, arg2):\n    n = len(arg1)\n    k = arg2\n    if k >= n:\n        return list(range(n))\n    min_heap = []\n    for i, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, i))\n    k_smallest_with_indexes = heapq.nsmallest(k, min_heap)\n    k_smallest_indexes = [index for value, index in k_smallest_with_indexes]\n    return k_smallest_indexes']",100000,1.2271146000130102,1.2781931959989015,1.5240956000052392,N/A
p3_find_n_smallest_number,prompt_6,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(x) for x in k_smallest]\n    return indexes']",1000,0.0020215000258758664,0.0021959210059139876,0.003101699985563755,N/A
p3_find_n_smallest_number,prompt_6,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(x) for x in k_smallest]\n    return indexes']",10000,0.016846799990162253,0.017971813996555282,0.026451400015503168,N/A
p3_find_n_smallest_number,prompt_6,82,"['import heapq\n\ndef funcImp(arg1, arg2):\n    k_smallest = heapq.nsmallest(arg2, arg1)\n    indexes = [arg1.index(x) for x in k_smallest]\n    return indexes']",100000,0.15874230000190437,0.1651921040005982,0.1779571999795735,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_elements = heapq.nsmallest(arg2, min_heap)\n    indices_of_k_smallest = [index for value, index in k_smallest_elements]\n    return indices_of_k_smallest']",1000,0.009476099978201091,0.010085205000359565,0.010618200059980154,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_elements = heapq.nsmallest(arg2, min_heap)\n    indices_of_k_smallest = [index for value, index in k_smallest_elements]\n    return indices_of_k_smallest']",10000,0.10691790003329515,0.11011364100384526,0.11872869997750968,N/A
p3_find_n_smallest_number,prompt_6,83,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    min_heap = []\n    for index, value in enumerate(arg1):\n        heapq.heappush(min_heap, (value, index))\n    k_smallest_elements = heapq.nsmallest(arg2, min_heap)\n    indices_of_k_smallest = [index for value, index in k_smallest_elements]\n    return indices_of_k_smallest']",100000,1.2820209000492468,1.3117770609969739,1.498286599991843,N/A
p3_find_n_smallest_number,prompt_6,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in smallest_elements]']",1000,0.004459400079213083,0.0047539889998734,0.0074777000118047,N/A
p3_find_n_smallest_number,prompt_6,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in smallest_elements]']",10000,0.041589600034058094,0.04374030400300399,0.05227510002441704,N/A
p3_find_n_smallest_number,prompt_6,84,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 == 0 or not arg1:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    smallest_elements = heapq.nsmallest(arg2, enumerate(arg1), key=lambda x: x[1])\n    return [index for index, _ in smallest_elements]']",100000,0.43855920003261417,0.44797520800493656,0.46606180001981556,N/A
p3_find_n_smallest_number,prompt_6,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if not arg1:\n        return []\n    k = arg2\n    lst = arg1\n    heap = []\n    for i, num in enumerate(lst):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return [index for num, index in heap]']",1000,0.011841600062325597,0.012271522000664845,0.01593919994775206,N/A
p3_find_n_smallest_number,prompt_6,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if not arg1:\n        return []\n    k = arg2\n    lst = arg1\n    heap = []\n    for i, num in enumerate(lst):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return [index for num, index in heap]']",10000,0.11694279999937862,0.12133069699746557,0.18839070003014058,N/A
p3_find_n_smallest_number,prompt_6,85,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    if not arg1:\n        return []\n    k = arg2\n    lst = arg1\n    heap = []\n    for i, num in enumerate(lst):\n        heapq.heappush(heap, (num, i))\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return [index for num, index in heap]']",100000,1.1765867000212893,1.206597706003813,1.2676504000555724,N/A
p3_find_n_smallest_number,prompt_6,86,"['arr = [7, 10, 4, 3, 20, 15]\nk = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,86,"['arr = [7, 10, 4, 3, 20, 15]\nk = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,86,"['arr = [7, 10, 4, 3, 20, 15]\nk = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return result']",1000,0.005188800045289099,0.0054411040036939085,0.006671899929642677,N/A
p3_find_n_smallest_number,prompt_6,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return result']",10000,0.0644235999789089,0.06721034100279212,0.0739482999779284,N/A
p3_find_n_smallest_number,prompt_6,87,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0:\n        return []\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    result = [heapq.heappop(min_heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return result']",100000,0.7814052000176162,0.7955962119949982,0.8448515000054613,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [index for value, index in heapq.nsmallest(arg2, min_heap)]']",1000,0.002215899992734194,0.0024401240004226564,0.0032614999217912555,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [index for value, index in heapq.nsmallest(arg2, min_heap)]']",10000,0.022431999910622835,0.023362579999957233,0.03430210007354617,N/A
p3_find_n_smallest_number,prompt_6,88,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = [(arg1[i], i) for i in range(arg2)]\n    heapq.heapify(min_heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[i], i))\n    return [index for value, index in heapq.nsmallest(arg2, min_heap)]']",100000,0.22620220005046576,0.23537810800014994,0.2946511999471113,N/A
p3_find_n_smallest_number,prompt_6,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = []\n    for _ in range(k):\n        _, idx = heapq.heappop(min_heap)\n        smallest_indices.append(idx)\n    return smallest_indices\narr = [5, 3, 1, 7, 9, 2]\nk = 3\npass']",1000,0.005218600039370358,0.00548430499387905,0.006813899963162839,N/A
p3_find_n_smallest_number,prompt_6,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = []\n    for _ in range(k):\n        _, idx = heapq.heappop(min_heap)\n        smallest_indices.append(idx)\n    return smallest_indices\narr = [5, 3, 1, 7, 9, 2]\nk = 3\npass']",10000,0.06388639996293932,0.06686544399592094,0.0744387999875471,N/A
p3_find_n_smallest_number,prompt_6,89,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    k = min(arg2, len(arg1))\n    min_heap = [(num, idx) for idx, num in enumerate(arg1)]\n    heapq.heapify(min_heap)\n    smallest_indices = []\n    for _ in range(k):\n        _, idx = heapq.heappop(min_heap)\n        smallest_indices.append(idx)\n    return smallest_indices\narr = [5, 3, 1, 7, 9, 2]\nk = 3\npass']",100000,0.7982966999989003,0.816783189997077,0.8575423998991027,N/A
p3_find_n_smallest_number,prompt_6,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",1000,0.007368699996732175,0.00800390899530612,0.01042299997061491,N/A
p3_find_n_smallest_number,prompt_6,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",10000,0.0842442000284791,0.08701621300424449,0.09818959992844611,N/A
p3_find_n_smallest_number,prompt_6,90,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or not arg1:\n        return []\n    heap = []\n    for i in range(len(arg1)):\n        heapq.heappush(heap, (arg1[i], i))\n    smallest_indexes = [heapq.heappop(heap)[1] for _ in range(min(arg2, len(arg1)))]\n    return smallest_indexes']",100000,0.949631099938415,0.9823975099949166,1.1013937999960035,N/A
p3_find_n_smallest_number,prompt_6,91,"['arg1 = [4, 1, 3, 2, 5]\narg2 = 3']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,91,"['arg1 = [4, 1, 3, 2, 5]\narg2 = 3']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,91,"['arg1 = [4, 1, 3, 2, 5]\narg2 = 3']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",1000,0.0022031000116840005,0.0024096030043438076,0.002942900056950748,N/A
p3_find_n_smallest_number,prompt_6,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",10000,0.02279190008994192,0.0237781309930142,0.03328719991259277,N/A
p3_find_n_smallest_number,prompt_6,92,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    min_heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(min_heap)\n    for idx in range(arg2, len(arg1)):\n        if arg1[idx] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (arg1[idx], idx))\n    return [idx for val, idx in min_heap]']",100000,0.22876870003528893,0.2393202010006644,0.25632869999390095,N/A
p3_find_n_smallest_number,prompt_6,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    smallest_indexes = [index for value, index in smallest_elements]\n    return smallest_indexes']",1000,0.005248800036497414,0.005400303005008027,0.00636350002605468,N/A
p3_find_n_smallest_number,prompt_6,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    smallest_indexes = [index for value, index in smallest_elements]\n    return smallest_indexes']",10000,0.0531495000468567,0.05505975100095384,0.06577210000250489,N/A
p3_find_n_smallest_number,prompt_6,93,"['import heapq\n\ndef funcImp(arg1, arg2):\n    indexed_array = [(value, index) for index, value in enumerate(arg1)]\n    smallest_elements = heapq.nsmallest(arg2, indexed_array)\n    smallest_indexes = [index for value, index in smallest_elements]\n    return smallest_indexes']",100000,0.6787372999824584,0.6998615859996061,0.754573000012897,N/A
p3_find_n_smallest_number,prompt_6,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [idx for _, idx in heap]']",1000,0.004063699976541102,0.004521491009509191,0.007647200021892786,N/A
p3_find_n_smallest_number,prompt_6,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [idx for _, idx in heap]']",10000,0.030425500008277595,0.03231294700060971,0.05187840003054589,N/A
p3_find_n_smallest_number,prompt_6,94,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 > len(arg1):\n        return []\n    heap = []\n    for i in range(arg2):\n        heapq.heappush(heap, (-arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if -arg1[i] < heap[0][0]:\n            heapq.heappushpop(heap, (-arg1[i], i))\n    return [idx for _, idx in heap]']",100000,0.46061760000884533,0.47240762199973685,0.4981784999836236,N/A
p3_find_n_smallest_number,prompt_6,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    n = len(arg1)\n    if arg2 > n:\n        return sorted(range(n), key=lambda x: arg1[x])\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, n):\n        if -arg1[i] < max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    result = [idx for _, idx in max_heap]\n    return result']",1000,0.002900599967688322,0.003185040996177122,0.0057628999929875135,N/A
p3_find_n_smallest_number,prompt_6,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    n = len(arg1)\n    if arg2 > n:\n        return sorted(range(n), key=lambda x: arg1[x])\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, n):\n        if -arg1[i] < max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    result = [idx for _, idx in max_heap]\n    return result']",10000,0.028750300058163702,0.03118522499804385,0.0906827999278903,N/A
p3_find_n_smallest_number,prompt_6,95,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1:\n        return []\n    n = len(arg1)\n    if arg2 > n:\n        return sorted(range(n), key=lambda x: arg1[x])\n    max_heap = []\n    for i in range(arg2):\n        heapq.heappush(max_heap, (-arg1[i], i))\n    for i in range(arg2, n):\n        if -arg1[i] < max_heap[0][0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, (-arg1[i], i))\n    result = [idx for _, idx in max_heap]\n    return result']",100000,0.29190379998181015,0.3015231459995266,0.3960648000938818,N/A
p3_find_n_smallest_number,prompt_6,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",1000,0.005125100025907159,0.005504875000333413,0.00824660004582256,N/A
p3_find_n_smallest_number,prompt_6,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",10000,0.05342240002937615,0.055476845006924125,0.06864050007425249,N/A
p3_find_n_smallest_number,prompt_6,96,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if arg2 <= 0 or arg2 > len(arg1):\n        return []\n    indexed_arr = [(value, idx) for idx, value in enumerate(arg1)]\n    k_smallest = heapq.nsmallest(arg2, indexed_arr)\n    indexes = [idx for value, idx in k_smallest]\n    return indexes']",100000,0.6799560999497771,0.7052349129924551,0.7490471999626607,N/A
p3_find_n_smallest_number,prompt_6,97,"['def naive_find_k_smallest_indexes(arr, k):\n    if k > len(arr):\n        return []\n    sorted_indexes = sorted(range(len(arr)), key=lambda x: arr[x])\n    return sorted_indexes[:k]']",1000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,97,"['def naive_find_k_smallest_indexes(arr, k):\n    if k > len(arr):\n        return []\n    sorted_indexes = sorted(range(len(arr)), key=lambda x: arr[x])\n    return sorted_indexes[:k]']",10000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,97,"['def naive_find_k_smallest_indexes(arr, k):\n    if k > len(arr):\n        return []\n    sorted_indexes = sorted(range(len(arr)), key=lambda x: arr[x])\n    return sorted_indexes[:k]']",100000,0,0,0,	 exception: funcImp function not found or not callable
p3_find_n_smallest_number,prompt_6,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        heapq.heappushpop(heap, (arg1[idx], idx))\n    return [idx for _, idx in heap]']",1000,0.004478699993342161,0.004689305005595088,0.006154300062917173,N/A
p3_find_n_smallest_number,prompt_6,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        heapq.heappushpop(heap, (arg1[idx], idx))\n    return [idx for _, idx in heap]']",10000,0.04240670008584857,0.04436341000022367,0.056823600083589554,N/A
p3_find_n_smallest_number,prompt_6,98,"['import heapq\n\ndef funcImp(arg1, arg2):\n    heap = [(val, idx) for idx, val in enumerate(arg1[:arg2])]\n    heapq.heapify(heap)\n    for idx in range(arg2, len(arg1)):\n        heapq.heappushpop(heap, (arg1[idx], idx))\n    return [idx for _, idx in heap]']",100000,0.4332930000964552,0.4447534800041467,0.589967800071463,N/A
p3_find_n_smallest_number,prompt_6,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    smallest_indices = [idx for val, idx in min_heap]\n    return sorted(smallest_indices)']",1000,0.002439799951389432,0.0026298570074141025,0.004667000030167401,N/A
p3_find_n_smallest_number,prompt_6,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    smallest_indices = [idx for val, idx in min_heap]\n    return sorted(smallest_indices)']",10000,0.024249100009910762,0.025196101998444645,0.033567999955266714,N/A
p3_find_n_smallest_number,prompt_6,99,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0 or arg2 > len(arg1):\n        return []\n    min_heap = []\n    for i in range(arg2):\n        heapq.heappush(min_heap, (arg1[i], i))\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < min_heap[0][0]:\n            heapq.heappushpop(min_heap, (arg1[i], i))\n    smallest_indices = [idx for val, idx in min_heap]\n    return sorted(smallest_indices)']",100000,0.27779279998503625,0.2877207449928392,0.304399500018917,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i for _, i in heap]']",1000,0.0027700000209733844,0.0029946309968363494,0.0048405000707134604,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i for _, i in heap]']",10000,0.025613600038923323,0.026935520002152772,0.03028559999074787,N/A
p3_find_n_smallest_number,prompt_6,100,"['import heapq\n\ndef funcImp(arg1, arg2):\n    if not arg1 or arg2 <= 0:\n        return []\n    if arg2 >= len(arg1):\n        return list(range(len(arg1)))\n    heap = [(-arg1[i], i) for i in range(arg2)]\n    heapq.heapify(heap)\n    for i in range(arg2, len(arg1)):\n        if arg1[i] < -heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, (-arg1[i], i))\n    return [i for _, i in heap]']",100000,0.253842500038445,0.2649166250019334,0.28482160007115453,N/A
