[ORIGINAL_PROBLEM]
org_arr_prob1_one_arg  = 'Quickest way to find missing number in an array of numbers.'
org_arr_prob2_one_arg  = 'Find the Duplicate Number.'
org_arr_prob3_two_arg  = 'Python algorithm to find the indexes of the k smallest number in an unsorted array?'
org_arr_prob4_two_arg  = 'Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!)'
org_arr_prob5_one_arg  = 'How do I find the duplicates in a list and create another list with them?'
org_arr_prob6_one_arg  = 'Removing duplicates in lists.'
org_arr_prob7_one_arg  = 'Quicksort with Python.'

[FUNCTION_DESCRIPTION]
func_desc_arr    = 'The Python implementation should be in a function named "funcImp" that takes <FUNCTION_ARGUMENT>.'
func_desc_lnk    = 'The Python implementation should be within a class named "Node." This class should be initialized with attributes "self.val = val" and "self.next = None". Additionally, the implementation should be within a function named "funcImp," which takes a single linked list of integers named "head" as a parameter.'
func_desc_pascal = 'The Python implementation should be in a function named "funcImp" that takes a single number of raws named "arg1" as a parameter.'

[FUNCTION_ARGUMENT]
func_one_arg_arr = 'a single list of integers named "arg1" as a parameter.'
func_two_arg_arr = 'a single list of integers named "arg1" as a first argument and "arg2" as a second argument as a parameters.'

[PROMPT]
prompt_1 = "<ORIGINAL_PROMPT> <FUNCTION_DESCRIPTION>"
prompt_2 = "<ORIGINAL_PROMPT> The implementation should be fast. <FUNCTION_DESCRIPTION>"
prompt_3 = "<ORIGINAL_PROMPT> The implementation should be fast as the size of the list grows. <FUNCTION_DESCRIPTION>"
prompt_4 = "<ORIGINAL_PROMPT> The implementation should have the most optimal time complexity possible. <FUNCTION_DESCRIPTION>"
prompt_5 = """Please explain your chain of thought to create a solution to the problem: <ORIGINAL_PROMPT> <FUNCTION_DESCRIPTION>
            First, explain your chain of thought.
            Then, provide a step by step description of the algorithm with the best possible time complexity to solve the task.
            Then, describe how to implement the algorithm step by step in the fastest possible way.
            Finally, <FUNCTION_DESCRIPTION>"""
prompt_6 = """ How can we approach the problem of <ORIGINAL_PROMPT> with a time complexity O(1) runtime? <FUNCTION_DESCRIPTION>
                We can follow the steps below in our chain of thought:
                1)	What is the problem statement?
                2)	What is the naive approach to <ORIGINAL_PROMPT>? What is its time complexity?
                3)	Can we improve the time complexity to O(1)? If yes, how?
                4)	Can you provide an algorithm to <ORIGINAL_PROMPT> in O(1) time complexity?
                5)	Can you explain how the algorithm works step by step?
                6)	Are there any edge cases that need to be considered for the algorithm to work correctly?
                7)	Can you provide an example to demonstrate how the algorithm works?
                8)	How does the O(1) algorithm compare to other algorithms in terms of time?
                9)	Can you think of any potential limitations or drawbacks of the O(1) algorithm?
                10)	Then, describe how to implement the algorithm step by step in the fastest possible way in Python, <FUNCTION_DESCRIPTION>."""
